
RobotTest2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006888  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08006940  08006940  00016940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a14  08006a14  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006a14  08006a14  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a14  08006a14  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a14  08006a14  00016a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a18  08006a18  00016a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006a1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  2000000c  08006a28  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08006a28  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000103bc  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000248c  00000000  00000000  00030433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001060  00000000  00000000  000328c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cd3  00000000  00000000  00033920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000167ab  00000000  00000000  000345f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012ad3  00000000  00000000  0004ad9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000922be  00000000  00000000  0005d871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003be4  00000000  00000000  000efb30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000f3714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08006928 	.word	0x08006928

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08006928 	.word	0x08006928

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <HAL_I2C_AddrCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode){
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	0008      	movs	r0, r1
 8000222:	0011      	movs	r1, r2
 8000224:	1cfb      	adds	r3, r7, #3
 8000226:	1c02      	adds	r2, r0, #0
 8000228:	701a      	strb	r2, [r3, #0]
 800022a:	003b      	movs	r3, r7
 800022c:	1c0a      	adds	r2, r1, #0
 800022e:	801a      	strh	r2, [r3, #0]

	for(int i = 0; i < 12; i++) {
 8000230:	2300      	movs	r3, #0
 8000232:	60fb      	str	r3, [r7, #12]
 8000234:	e017      	b.n	8000266 <HAL_I2C_AddrCallback+0x4e>
	    test[i * 2] = (uint8_t)(adcConversions[i] & 0xFF); // Lower 8 bits
 8000236:	4b19      	ldr	r3, [pc, #100]	; (800029c <HAL_I2C_AddrCallback+0x84>)
 8000238:	68fa      	ldr	r2, [r7, #12]
 800023a:	0052      	lsls	r2, r2, #1
 800023c:	5ad2      	ldrh	r2, [r2, r3]
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	005b      	lsls	r3, r3, #1
 8000242:	b2d1      	uxtb	r1, r2
 8000244:	4a16      	ldr	r2, [pc, #88]	; (80002a0 <HAL_I2C_AddrCallback+0x88>)
 8000246:	54d1      	strb	r1, [r2, r3]
	    test[i * 2 + 1] = (uint8_t)((adcConversions[i] >> 8) & 0xFF); // Upper 8 bits
 8000248:	4b14      	ldr	r3, [pc, #80]	; (800029c <HAL_I2C_AddrCallback+0x84>)
 800024a:	68fa      	ldr	r2, [r7, #12]
 800024c:	0052      	lsls	r2, r2, #1
 800024e:	5ad3      	ldrh	r3, [r2, r3]
 8000250:	0a1b      	lsrs	r3, r3, #8
 8000252:	b29a      	uxth	r2, r3
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	005b      	lsls	r3, r3, #1
 8000258:	3301      	adds	r3, #1
 800025a:	b2d1      	uxtb	r1, r2
 800025c:	4a10      	ldr	r2, [pc, #64]	; (80002a0 <HAL_I2C_AddrCallback+0x88>)
 800025e:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < 12; i++) {
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	3301      	adds	r3, #1
 8000264:	60fb      	str	r3, [r7, #12]
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	2b0b      	cmp	r3, #11
 800026a:	dde4      	ble.n	8000236 <HAL_I2C_AddrCallback+0x1e>
	}

	if(TransferDirection == I2C_DIRECTION_TRANSMIT)  // if the master wants to transmit the data
 800026c:	1cfb      	adds	r3, r7, #3
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d107      	bne.n	8000284 <HAL_I2C_AddrCallback+0x6c>
		{
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, (uint8_t *)&ro, 2, I2C_FIRST_AND_LAST_FRAME);
 8000274:	2380      	movs	r3, #128	; 0x80
 8000276:	049b      	lsls	r3, r3, #18
 8000278:	490a      	ldr	r1, [pc, #40]	; (80002a4 <HAL_I2C_AddrCallback+0x8c>)
 800027a:	6878      	ldr	r0, [r7, #4]
 800027c:	2202      	movs	r2, #2
 800027e:	f002 ffed 	bl	800325c <HAL_I2C_Slave_Seq_Receive_IT>
		{
			HAL_I2C_Slave_Seq_Transmit_IT(hi2c, test, 24, I2C_FIRST_AND_LAST_FRAME);
		}


}
 8000282:	e006      	b.n	8000292 <HAL_I2C_AddrCallback+0x7a>
			HAL_I2C_Slave_Seq_Transmit_IT(hi2c, test, 24, I2C_FIRST_AND_LAST_FRAME);
 8000284:	2380      	movs	r3, #128	; 0x80
 8000286:	049b      	lsls	r3, r3, #18
 8000288:	4905      	ldr	r1, [pc, #20]	; (80002a0 <HAL_I2C_AddrCallback+0x88>)
 800028a:	6878      	ldr	r0, [r7, #4]
 800028c:	2218      	movs	r2, #24
 800028e:	f002 ff25 	bl	80030dc <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	46bd      	mov	sp, r7
 8000296:	b004      	add	sp, #16
 8000298:	bd80      	pop	{r7, pc}
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	200002fc 	.word	0x200002fc
 80002a0:	20000314 	.word	0x20000314
 80002a4:	200002dc 	.word	0x200002dc

080002a8 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b084      	sub	sp, #16
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
    uint8_t *regAddr = (uint8_t *)&i2cReg;  // Cast struct to byte pointer
 80002b0:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <HAL_I2C_SlaveRxCpltCallback+0x34>)
 80002b2:	60fb      	str	r3, [r7, #12]
    if(ro.address < sizeof(RegRecord_t)) {
 80002b4:	4b0a      	ldr	r3, [pc, #40]	; (80002e0 <HAL_I2C_SlaveRxCpltCallback+0x38>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	2b06      	cmp	r3, #6
 80002ba:	d808      	bhi.n	80002ce <HAL_I2C_SlaveRxCpltCallback+0x26>
        regAddr[ro.address] = ro.data;  // Write received data to the specified register
 80002bc:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <HAL_I2C_SlaveRxCpltCallback+0x38>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	001a      	movs	r2, r3
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	189b      	adds	r3, r3, r2
 80002c6:	4a06      	ldr	r2, [pc, #24]	; (80002e0 <HAL_I2C_SlaveRxCpltCallback+0x38>)
 80002c8:	7852      	ldrb	r2, [r2, #1]
 80002ca:	701a      	strb	r2, [r3, #0]
    }
    else {
        Error_Handler();  // Invalid address received
    }

}
 80002cc:	e001      	b.n	80002d2 <HAL_I2C_SlaveRxCpltCallback+0x2a>
        Error_Handler();  // Invalid address received
 80002ce:	f000 fe5b 	bl	8000f88 <Error_Handler>
}
 80002d2:	46c0      	nop			; (mov r8, r8)
 80002d4:	46bd      	mov	sp, r7
 80002d6:	b004      	add	sp, #16
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	46c0      	nop			; (mov r8, r8)
 80002dc:	200002d4 	.word	0x200002d4
 80002e0:	200002dc 	.word	0x200002dc

080002e4 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback (I2C_HandleTypeDef *hi2c)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	0018      	movs	r0, r3
 80002f0:	f003 f876 	bl	80033e0 <HAL_I2C_EnableListen_IT>
}
 80002f4:	46c0      	nop			; (mov r8, r8)
 80002f6:	46bd      	mov	sp, r7
 80002f8:	b002      	add	sp, #8
 80002fa:	bd80      	pop	{r7, pc}

080002fc <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	0018      	movs	r0, r3
 8000308:	f003 f86a 	bl	80033e0 <HAL_I2C_EnableListen_IT>
}
 800030c:	46c0      	nop			; (mov r8, r8)
 800030e:	46bd      	mov	sp, r7
 8000310:	b002      	add	sp, #8
 8000312:	bd80      	pop	{r7, pc}

08000314 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a6b      	ldr	r2, [pc, #428]	; (80004d0 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000322:	4293      	cmp	r3, r2
 8000324:	d000      	beq.n	8000328 <HAL_TIM_PeriodElapsedCallback+0x14>
 8000326:	e0ce      	b.n	80004c6 <HAL_TIM_PeriodElapsedCallback+0x1b2>

		if(irscan.scl==0){
 8000328:	4b6a      	ldr	r3, [pc, #424]	; (80004d4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800032a:	785b      	ldrb	r3, [r3, #1]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d000      	beq.n	8000332 <HAL_TIM_PeriodElapsedCallback+0x1e>
 8000330:	e076      	b.n	8000420 <HAL_TIM_PeriodElapsedCallback+0x10c>
			switch(irscan.ledN){
 8000332:	4b68      	ldr	r3, [pc, #416]	; (80004d4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	2b07      	cmp	r3, #7
 8000338:	d86c      	bhi.n	8000414 <HAL_TIM_PeriodElapsedCallback+0x100>
 800033a:	009a      	lsls	r2, r3, #2
 800033c:	4b66      	ldr	r3, [pc, #408]	; (80004d8 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800033e:	18d3      	adds	r3, r2, r3
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	469f      	mov	pc, r3
				case 0:
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,0);
 8000344:	4b65      	ldr	r3, [pc, #404]	; (80004dc <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000346:	2200      	movs	r2, #0
 8000348:	2108      	movs	r1, #8
 800034a:	0018      	movs	r0, r3
 800034c:	f002 fd98 	bl	8002e80 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0,1);
 8000350:	4b63      	ldr	r3, [pc, #396]	; (80004e0 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000352:	2201      	movs	r2, #1
 8000354:	2101      	movs	r1, #1
 8000356:	0018      	movs	r0, r3
 8000358:	f002 fd92 	bl	8002e80 <HAL_GPIO_WritePin>
					break;
 800035c:	e05c      	b.n	8000418 <HAL_TIM_PeriodElapsedCallback+0x104>
				case 1:
					HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0,0);
 800035e:	4b60      	ldr	r3, [pc, #384]	; (80004e0 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000360:	2200      	movs	r2, #0
 8000362:	2101      	movs	r1, #1
 8000364:	0018      	movs	r0, r3
 8000366:	f002 fd8b 	bl	8002e80 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD,GPIO_PIN_1,1);
 800036a:	4b5d      	ldr	r3, [pc, #372]	; (80004e0 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800036c:	2201      	movs	r2, #1
 800036e:	2102      	movs	r1, #2
 8000370:	0018      	movs	r0, r3
 8000372:	f002 fd85 	bl	8002e80 <HAL_GPIO_WritePin>
					break;
 8000376:	e04f      	b.n	8000418 <HAL_TIM_PeriodElapsedCallback+0x104>
				case 2:
					HAL_GPIO_WritePin(GPIOD,GPIO_PIN_1,0);
 8000378:	4b59      	ldr	r3, [pc, #356]	; (80004e0 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800037a:	2200      	movs	r2, #0
 800037c:	2102      	movs	r1, #2
 800037e:	0018      	movs	r0, r3
 8000380:	f002 fd7e 	bl	8002e80 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,1);
 8000384:	4b56      	ldr	r3, [pc, #344]	; (80004e0 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000386:	2201      	movs	r2, #1
 8000388:	2104      	movs	r1, #4
 800038a:	0018      	movs	r0, r3
 800038c:	f002 fd78 	bl	8002e80 <HAL_GPIO_WritePin>
					break;
 8000390:	e042      	b.n	8000418 <HAL_TIM_PeriodElapsedCallback+0x104>
				case 3:
					HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,0);
 8000392:	4b53      	ldr	r3, [pc, #332]	; (80004e0 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000394:	2200      	movs	r2, #0
 8000396:	2104      	movs	r1, #4
 8000398:	0018      	movs	r0, r3
 800039a:	f002 fd71 	bl	8002e80 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD,GPIO_PIN_3,1);
 800039e:	4b50      	ldr	r3, [pc, #320]	; (80004e0 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80003a0:	2201      	movs	r2, #1
 80003a2:	2108      	movs	r1, #8
 80003a4:	0018      	movs	r0, r3
 80003a6:	f002 fd6b 	bl	8002e80 <HAL_GPIO_WritePin>
					break;
 80003aa:	e035      	b.n	8000418 <HAL_TIM_PeriodElapsedCallback+0x104>
				case 4:
					HAL_GPIO_WritePin(GPIOD,GPIO_PIN_3,0);
 80003ac:	4b4c      	ldr	r3, [pc, #304]	; (80004e0 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	2108      	movs	r1, #8
 80003b2:	0018      	movs	r0, r3
 80003b4:	f002 fd64 	bl	8002e80 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD,GPIO_PIN_4,1);
 80003b8:	4b49      	ldr	r3, [pc, #292]	; (80004e0 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80003ba:	2201      	movs	r2, #1
 80003bc:	2110      	movs	r1, #16
 80003be:	0018      	movs	r0, r3
 80003c0:	f002 fd5e 	bl	8002e80 <HAL_GPIO_WritePin>
					break;
 80003c4:	e028      	b.n	8000418 <HAL_TIM_PeriodElapsedCallback+0x104>
				case 5:
					HAL_GPIO_WritePin(GPIOD,GPIO_PIN_4,0);
 80003c6:	4b46      	ldr	r3, [pc, #280]	; (80004e0 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	2110      	movs	r1, #16
 80003cc:	0018      	movs	r0, r3
 80003ce:	f002 fd57 	bl	8002e80 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,1);
 80003d2:	4b43      	ldr	r3, [pc, #268]	; (80004e0 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80003d4:	2201      	movs	r2, #1
 80003d6:	2120      	movs	r1, #32
 80003d8:	0018      	movs	r0, r3
 80003da:	f002 fd51 	bl	8002e80 <HAL_GPIO_WritePin>
					break;
 80003de:	e01b      	b.n	8000418 <HAL_TIM_PeriodElapsedCallback+0x104>
				case 6:
					HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,0);
 80003e0:	4b3f      	ldr	r3, [pc, #252]	; (80004e0 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	2120      	movs	r1, #32
 80003e6:	0018      	movs	r0, r3
 80003e8:	f002 fd4a 	bl	8002e80 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD,GPIO_PIN_6,1);
 80003ec:	4b3c      	ldr	r3, [pc, #240]	; (80004e0 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80003ee:	2201      	movs	r2, #1
 80003f0:	2140      	movs	r1, #64	; 0x40
 80003f2:	0018      	movs	r0, r3
 80003f4:	f002 fd44 	bl	8002e80 <HAL_GPIO_WritePin>
					break;
 80003f8:	e00e      	b.n	8000418 <HAL_TIM_PeriodElapsedCallback+0x104>
				case 7:
					HAL_GPIO_WritePin(GPIOD,GPIO_PIN_6,0);
 80003fa:	4b39      	ldr	r3, [pc, #228]	; (80004e0 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	2140      	movs	r1, #64	; 0x40
 8000400:	0018      	movs	r0, r3
 8000402:	f002 fd3d 	bl	8002e80 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,1);
 8000406:	4b35      	ldr	r3, [pc, #212]	; (80004dc <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000408:	2201      	movs	r2, #1
 800040a:	2108      	movs	r1, #8
 800040c:	0018      	movs	r0, r3
 800040e:	f002 fd37 	bl	8002e80 <HAL_GPIO_WritePin>
					break;
 8000412:	e001      	b.n	8000418 <HAL_TIM_PeriodElapsedCallback+0x104>
				default:
					Error_Handler();
 8000414:	f000 fdb8 	bl	8000f88 <Error_Handler>
			}
			irscan.scl=1;
 8000418:	4b2e      	ldr	r3, [pc, #184]	; (80004d4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800041a:	2201      	movs	r2, #1
 800041c:	705a      	strb	r2, [r3, #1]
 800041e:	e041      	b.n	80004a4 <HAL_TIM_PeriodElapsedCallback+0x190>
		}else if(irscan.scl==1){
 8000420:	4b2c      	ldr	r3, [pc, #176]	; (80004d4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000422:	785b      	ldrb	r3, [r3, #1]
 8000424:	2b01      	cmp	r3, #1
 8000426:	d136      	bne.n	8000496 <HAL_TIM_PeriodElapsedCallback+0x182>
			switch(irscan.ledN){
 8000428:	4b2a      	ldr	r3, [pc, #168]	; (80004d4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b07      	cmp	r3, #7
 800042e:	d82c      	bhi.n	800048a <HAL_TIM_PeriodElapsedCallback+0x176>
 8000430:	009a      	lsls	r2, r3, #2
 8000432:	4b2c      	ldr	r3, [pc, #176]	; (80004e4 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000434:	18d3      	adds	r3, r2, r3
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	469f      	mov	pc, r3
				case 0:
					adcConversions[0]=adcDMAbuf[0];
 800043a:	4b2b      	ldr	r3, [pc, #172]	; (80004e8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800043c:	881a      	ldrh	r2, [r3, #0]
 800043e:	4b2b      	ldr	r3, [pc, #172]	; (80004ec <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000440:	801a      	strh	r2, [r3, #0]
					break;
 8000442:	e024      	b.n	800048e <HAL_TIM_PeriodElapsedCallback+0x17a>
				case 1:
					adcConversions[1]=adcDMAbuf[1];
 8000444:	4b28      	ldr	r3, [pc, #160]	; (80004e8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000446:	885a      	ldrh	r2, [r3, #2]
 8000448:	4b28      	ldr	r3, [pc, #160]	; (80004ec <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800044a:	805a      	strh	r2, [r3, #2]
					break;
 800044c:	e01f      	b.n	800048e <HAL_TIM_PeriodElapsedCallback+0x17a>
				case 2:
					adcConversions[2]=adcDMAbuf[2];
 800044e:	4b26      	ldr	r3, [pc, #152]	; (80004e8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000450:	889a      	ldrh	r2, [r3, #4]
 8000452:	4b26      	ldr	r3, [pc, #152]	; (80004ec <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000454:	809a      	strh	r2, [r3, #4]
					break;
 8000456:	e01a      	b.n	800048e <HAL_TIM_PeriodElapsedCallback+0x17a>
				case 3:
					adcConversions[3]=adcDMAbuf[3];
 8000458:	4b23      	ldr	r3, [pc, #140]	; (80004e8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800045a:	88da      	ldrh	r2, [r3, #6]
 800045c:	4b23      	ldr	r3, [pc, #140]	; (80004ec <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800045e:	80da      	strh	r2, [r3, #6]
					break;
 8000460:	e015      	b.n	800048e <HAL_TIM_PeriodElapsedCallback+0x17a>
				case 4:
					adcConversions[4]=adcDMAbuf[4];
 8000462:	4b21      	ldr	r3, [pc, #132]	; (80004e8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000464:	891a      	ldrh	r2, [r3, #8]
 8000466:	4b21      	ldr	r3, [pc, #132]	; (80004ec <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000468:	811a      	strh	r2, [r3, #8]
					break;
 800046a:	e010      	b.n	800048e <HAL_TIM_PeriodElapsedCallback+0x17a>
				case 5:
					adcConversions[5]=adcDMAbuf[5];
 800046c:	4b1e      	ldr	r3, [pc, #120]	; (80004e8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800046e:	895a      	ldrh	r2, [r3, #10]
 8000470:	4b1e      	ldr	r3, [pc, #120]	; (80004ec <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000472:	815a      	strh	r2, [r3, #10]
					break;
 8000474:	e00b      	b.n	800048e <HAL_TIM_PeriodElapsedCallback+0x17a>
				case 6:
					adcConversions[6]=adcDMAbuf[6];
 8000476:	4b1c      	ldr	r3, [pc, #112]	; (80004e8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000478:	899a      	ldrh	r2, [r3, #12]
 800047a:	4b1c      	ldr	r3, [pc, #112]	; (80004ec <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800047c:	819a      	strh	r2, [r3, #12]
					break;
 800047e:	e006      	b.n	800048e <HAL_TIM_PeriodElapsedCallback+0x17a>
				case 7:
					adcConversions[7]=adcDMAbuf[7];
 8000480:	4b19      	ldr	r3, [pc, #100]	; (80004e8 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000482:	89da      	ldrh	r2, [r3, #14]
 8000484:	4b19      	ldr	r3, [pc, #100]	; (80004ec <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000486:	81da      	strh	r2, [r3, #14]
					break;
 8000488:	e001      	b.n	800048e <HAL_TIM_PeriodElapsedCallback+0x17a>
				default:
					Error_Handler();
 800048a:	f000 fd7d 	bl	8000f88 <Error_Handler>
			}
			irscan.scl=2;
 800048e:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000490:	2202      	movs	r2, #2
 8000492:	705a      	strb	r2, [r3, #1]
 8000494:	e006      	b.n	80004a4 <HAL_TIM_PeriodElapsedCallback+0x190>
		}else if(irscan.scl==2){
 8000496:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000498:	785b      	ldrb	r3, [r3, #1]
 800049a:	2b02      	cmp	r3, #2
 800049c:	d102      	bne.n	80004a4 <HAL_TIM_PeriodElapsedCallback+0x190>
			irscan.scl=0;
 800049e:	4b0d      	ldr	r3, [pc, #52]	; (80004d4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	705a      	strb	r2, [r3, #1]
		}

		if (irscan.scl==0) {
 80004a4:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80004a6:	785b      	ldrb	r3, [r3, #1]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d10c      	bne.n	80004c6 <HAL_TIM_PeriodElapsedCallback+0x1b2>
			irscan.ledN++;
 80004ac:	4b09      	ldr	r3, [pc, #36]	; (80004d4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	3301      	adds	r3, #1
 80004b2:	b2da      	uxtb	r2, r3
 80004b4:	4b07      	ldr	r3, [pc, #28]	; (80004d4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80004b6:	701a      	strb	r2, [r3, #0]
			if(irscan.ledN>7){irscan.ledN=0;}
 80004b8:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	2b07      	cmp	r3, #7
 80004be:	d902      	bls.n	80004c6 <HAL_TIM_PeriodElapsedCallback+0x1b2>
 80004c0:	4b04      	ldr	r3, [pc, #16]	; (80004d4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	701a      	strb	r2, [r3, #0]
		}

	}

}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b002      	add	sp, #8
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	40000400 	.word	0x40000400
 80004d4:	200002e0 	.word	0x200002e0
 80004d8:	08006940 	.word	0x08006940
 80004dc:	50000400 	.word	0x50000400
 80004e0:	50000c00 	.word	0x50000c00
 80004e4:	08006960 	.word	0x08006960
 80004e8:	200002e4 	.word	0x200002e4
 80004ec:	200002fc 	.word	0x200002fc

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f001 f88e 	bl	8001614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f848 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 fc2e 	bl	8000d5c <MX_GPIO_Init>
  MX_DMA_Init();
 8000500:	f000 fc0e 	bl	8000d20 <MX_DMA_Init>
  MX_ADC1_Init();
 8000504:	f000 f89c 	bl	8000640 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000508:	f000 f9a4 	bl	8000854 <MX_I2C1_Init>
  MX_I2C2_Init();
 800050c:	f000 f9e2 	bl	80008d4 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000510:	f000 fa20 	bl	8000954 <MX_TIM1_Init>
  MX_TIM15_Init();
 8000514:	f000 fb60 	bl	8000bd8 <MX_TIM15_Init>
  MX_TIM3_Init();
 8000518:	f000 fb08 	bl	8000b2c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcDMAbuf, 12);
 800051c:	4915      	ldr	r1, [pc, #84]	; (8000574 <main+0x84>)
 800051e:	4b16      	ldr	r3, [pc, #88]	; (8000578 <main+0x88>)
 8000520:	220c      	movs	r2, #12
 8000522:	0018      	movs	r0, r3
 8000524:	f001 fc10 	bl	8001d48 <HAL_ADC_Start_DMA>
  HAL_I2C_Init(&hi2c2);
 8000528:	4b14      	ldr	r3, [pc, #80]	; (800057c <main+0x8c>)
 800052a:	0018      	movs	r0, r3
 800052c:	f002 fd04 	bl	8002f38 <HAL_I2C_Init>
  HAL_I2C_EnableListen_IT(&hi2c2);
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <main+0x8c>)
 8000532:	0018      	movs	r0, r3
 8000534:	f002 ff54 	bl	80033e0 <HAL_I2C_EnableListen_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <main+0x90>)
 800053a:	2100      	movs	r1, #0
 800053c:	0018      	movs	r0, r3
 800053e:	f005 f89b 	bl	8005678 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000542:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <main+0x90>)
 8000544:	210c      	movs	r1, #12
 8000546:	0018      	movs	r0, r3
 8000548:	f005 f896 	bl	8005678 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim3);
 800054c:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <main+0x94>)
 800054e:	0018      	movs	r0, r3
 8000550:	f004 ffe4 	bl	800551c <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,1);
	  HAL_Delay(1);
 8000554:	2001      	movs	r0, #1
 8000556:	f001 f8e3 	bl	8001720 <HAL_Delay>

	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (int)(i2cReg.m1.data)<<8);
 800055a:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <main+0x98>)
 800055c:	795b      	ldrb	r3, [r3, #5]
 800055e:	021a      	lsls	r2, r3, #8
 8000560:	4b07      	ldr	r3, [pc, #28]	; (8000580 <main+0x90>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, (int)(i2cReg.m2.data)<<8);
 8000566:	4b08      	ldr	r3, [pc, #32]	; (8000588 <main+0x98>)
 8000568:	799b      	ldrb	r3, [r3, #6]
 800056a:	021a      	lsls	r2, r3, #8
 800056c:	4b04      	ldr	r3, [pc, #16]	; (8000580 <main+0x90>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_Delay(1);
 8000572:	e7ef      	b.n	8000554 <main+0x64>
 8000574:	200002e4 	.word	0x200002e4
 8000578:	20000028 	.word	0x20000028
 800057c:	2000016c 	.word	0x2000016c
 8000580:	200001f0 	.word	0x200001f0
 8000584:	2000023c 	.word	0x2000023c
 8000588:	200002d4 	.word	0x200002d4

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b093      	sub	sp, #76	; 0x4c
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	2414      	movs	r4, #20
 8000594:	193b      	adds	r3, r7, r4
 8000596:	0018      	movs	r0, r3
 8000598:	2334      	movs	r3, #52	; 0x34
 800059a:	001a      	movs	r2, r3
 800059c:	2100      	movs	r1, #0
 800059e:	f006 f997 	bl	80068d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	0018      	movs	r0, r3
 80005a6:	2310      	movs	r3, #16
 80005a8:	001a      	movs	r2, r3
 80005aa:	2100      	movs	r1, #0
 80005ac:	f006 f990 	bl	80068d0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b0:	2380      	movs	r3, #128	; 0x80
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	0018      	movs	r0, r3
 80005b6:	f004 f94b 	bl	8004850 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ba:	193b      	adds	r3, r7, r4
 80005bc:	2202      	movs	r2, #2
 80005be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c0:	193b      	adds	r3, r7, r4
 80005c2:	2280      	movs	r2, #128	; 0x80
 80005c4:	0052      	lsls	r2, r2, #1
 80005c6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005c8:	0021      	movs	r1, r4
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2240      	movs	r2, #64	; 0x40
 80005d4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2202      	movs	r2, #2
 80005da:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2202      	movs	r2, #2
 80005e0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2200      	movs	r2, #0
 80005e6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2208      	movs	r2, #8
 80005ec:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2280      	movs	r2, #128	; 0x80
 80005f2:	0292      	lsls	r2, r2, #10
 80005f4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	2280      	movs	r2, #128	; 0x80
 80005fa:	0592      	lsls	r2, r2, #22
 80005fc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	0018      	movs	r0, r3
 8000602:	f004 f965 	bl	80048d0 <HAL_RCC_OscConfig>
 8000606:	1e03      	subs	r3, r0, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800060a:	f000 fcbd 	bl	8000f88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2207      	movs	r2, #7
 8000612:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2202      	movs	r2, #2
 8000618:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	2102      	movs	r1, #2
 800062a:	0018      	movs	r0, r3
 800062c:	f004 fc60 	bl	8004ef0 <HAL_RCC_ClockConfig>
 8000630:	1e03      	subs	r3, r0, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000634:	f000 fca8 	bl	8000f88 <Error_Handler>
  }
}
 8000638:	46c0      	nop			; (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	b013      	add	sp, #76	; 0x4c
 800063e:	bd90      	pop	{r4, r7, pc}

08000640 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	0018      	movs	r0, r3
 800064a:	230c      	movs	r3, #12
 800064c:	001a      	movs	r2, r3
 800064e:	2100      	movs	r1, #0
 8000650:	f006 f93e 	bl	80068d0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000654:	4b72      	ldr	r3, [pc, #456]	; (8000820 <MX_ADC1_Init+0x1e0>)
 8000656:	4a73      	ldr	r2, [pc, #460]	; (8000824 <MX_ADC1_Init+0x1e4>)
 8000658:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800065a:	4b71      	ldr	r3, [pc, #452]	; (8000820 <MX_ADC1_Init+0x1e0>)
 800065c:	2280      	movs	r2, #128	; 0x80
 800065e:	05d2      	lsls	r2, r2, #23
 8000660:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000662:	4b6f      	ldr	r3, [pc, #444]	; (8000820 <MX_ADC1_Init+0x1e0>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000668:	4b6d      	ldr	r3, [pc, #436]	; (8000820 <MX_ADC1_Init+0x1e0>)
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 800066e:	4b6c      	ldr	r3, [pc, #432]	; (8000820 <MX_ADC1_Init+0x1e0>)
 8000670:	2280      	movs	r2, #128	; 0x80
 8000672:	0612      	lsls	r2, r2, #24
 8000674:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000676:	4b6a      	ldr	r3, [pc, #424]	; (8000820 <MX_ADC1_Init+0x1e0>)
 8000678:	2208      	movs	r2, #8
 800067a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800067c:	4b68      	ldr	r3, [pc, #416]	; (8000820 <MX_ADC1_Init+0x1e0>)
 800067e:	2200      	movs	r2, #0
 8000680:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000682:	4b67      	ldr	r3, [pc, #412]	; (8000820 <MX_ADC1_Init+0x1e0>)
 8000684:	2200      	movs	r2, #0
 8000686:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000688:	4b65      	ldr	r3, [pc, #404]	; (8000820 <MX_ADC1_Init+0x1e0>)
 800068a:	2201      	movs	r2, #1
 800068c:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800068e:	4b64      	ldr	r3, [pc, #400]	; (8000820 <MX_ADC1_Init+0x1e0>)
 8000690:	2201      	movs	r2, #1
 8000692:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000694:	4b62      	ldr	r3, [pc, #392]	; (8000820 <MX_ADC1_Init+0x1e0>)
 8000696:	2220      	movs	r2, #32
 8000698:	2100      	movs	r1, #0
 800069a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800069c:	4b60      	ldr	r3, [pc, #384]	; (8000820 <MX_ADC1_Init+0x1e0>)
 800069e:	2200      	movs	r2, #0
 80006a0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006a2:	4b5f      	ldr	r3, [pc, #380]	; (8000820 <MX_ADC1_Init+0x1e0>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006a8:	4b5d      	ldr	r3, [pc, #372]	; (8000820 <MX_ADC1_Init+0x1e0>)
 80006aa:	222c      	movs	r2, #44	; 0x2c
 80006ac:	2101      	movs	r1, #1
 80006ae:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006b0:	4b5b      	ldr	r3, [pc, #364]	; (8000820 <MX_ADC1_Init+0x1e0>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_19CYCLES_5;
 80006b6:	4b5a      	ldr	r3, [pc, #360]	; (8000820 <MX_ADC1_Init+0x1e0>)
 80006b8:	2204      	movs	r2, #4
 80006ba:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006bc:	4b58      	ldr	r3, [pc, #352]	; (8000820 <MX_ADC1_Init+0x1e0>)
 80006be:	223c      	movs	r2, #60	; 0x3c
 80006c0:	2100      	movs	r1, #0
 80006c2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80006c4:	4b56      	ldr	r3, [pc, #344]	; (8000820 <MX_ADC1_Init+0x1e0>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006ca:	4b55      	ldr	r3, [pc, #340]	; (8000820 <MX_ADC1_Init+0x1e0>)
 80006cc:	0018      	movs	r0, r3
 80006ce:	f001 f993 	bl	80019f8 <HAL_ADC_Init>
 80006d2:	1e03      	subs	r3, r0, #0
 80006d4:	d001      	beq.n	80006da <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 80006d6:	f000 fc57 	bl	8000f88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2201      	movs	r2, #1
 80006de:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2201      	movs	r2, #1
 80006e4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e6:	1d3a      	adds	r2, r7, #4
 80006e8:	4b4d      	ldr	r3, [pc, #308]	; (8000820 <MX_ADC1_Init+0x1e0>)
 80006ea:	0011      	movs	r1, r2
 80006ec:	0018      	movs	r0, r3
 80006ee:	f001 fbd1 	bl	8001e94 <HAL_ADC_ConfigChannel>
 80006f2:	1e03      	subs	r3, r0, #0
 80006f4:	d001      	beq.n	80006fa <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 80006f6:	f000 fc47 	bl	8000f88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	4a4a      	ldr	r2, [pc, #296]	; (8000828 <MX_ADC1_Init+0x1e8>)
 80006fe:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000700:	1d3a      	adds	r2, r7, #4
 8000702:	4b47      	ldr	r3, [pc, #284]	; (8000820 <MX_ADC1_Init+0x1e0>)
 8000704:	0011      	movs	r1, r2
 8000706:	0018      	movs	r0, r3
 8000708:	f001 fbc4 	bl	8001e94 <HAL_ADC_ConfigChannel>
 800070c:	1e03      	subs	r3, r0, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000710:	f000 fc3a 	bl	8000f88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	4a45      	ldr	r2, [pc, #276]	; (800082c <MX_ADC1_Init+0x1ec>)
 8000718:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800071a:	1d3a      	adds	r2, r7, #4
 800071c:	4b40      	ldr	r3, [pc, #256]	; (8000820 <MX_ADC1_Init+0x1e0>)
 800071e:	0011      	movs	r1, r2
 8000720:	0018      	movs	r0, r3
 8000722:	f001 fbb7 	bl	8001e94 <HAL_ADC_ConfigChannel>
 8000726:	1e03      	subs	r3, r0, #0
 8000728:	d001      	beq.n	800072e <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800072a:	f000 fc2d 	bl	8000f88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	4a3f      	ldr	r2, [pc, #252]	; (8000830 <MX_ADC1_Init+0x1f0>)
 8000732:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000734:	1d3a      	adds	r2, r7, #4
 8000736:	4b3a      	ldr	r3, [pc, #232]	; (8000820 <MX_ADC1_Init+0x1e0>)
 8000738:	0011      	movs	r1, r2
 800073a:	0018      	movs	r0, r3
 800073c:	f001 fbaa 	bl	8001e94 <HAL_ADC_ConfigChannel>
 8000740:	1e03      	subs	r3, r0, #0
 8000742:	d001      	beq.n	8000748 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8000744:	f000 fc20 	bl	8000f88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	4a3a      	ldr	r2, [pc, #232]	; (8000834 <MX_ADC1_Init+0x1f4>)
 800074c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074e:	1d3a      	adds	r2, r7, #4
 8000750:	4b33      	ldr	r3, [pc, #204]	; (8000820 <MX_ADC1_Init+0x1e0>)
 8000752:	0011      	movs	r1, r2
 8000754:	0018      	movs	r0, r3
 8000756:	f001 fb9d 	bl	8001e94 <HAL_ADC_ConfigChannel>
 800075a:	1e03      	subs	r3, r0, #0
 800075c:	d001      	beq.n	8000762 <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 800075e:	f000 fc13 	bl	8000f88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	4a34      	ldr	r2, [pc, #208]	; (8000838 <MX_ADC1_Init+0x1f8>)
 8000766:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000768:	1d3a      	adds	r2, r7, #4
 800076a:	4b2d      	ldr	r3, [pc, #180]	; (8000820 <MX_ADC1_Init+0x1e0>)
 800076c:	0011      	movs	r1, r2
 800076e:	0018      	movs	r0, r3
 8000770:	f001 fb90 	bl	8001e94 <HAL_ADC_ConfigChannel>
 8000774:	1e03      	subs	r3, r0, #0
 8000776:	d001      	beq.n	800077c <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 8000778:	f000 fc06 	bl	8000f88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	4a2f      	ldr	r2, [pc, #188]	; (800083c <MX_ADC1_Init+0x1fc>)
 8000780:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000782:	1d3a      	adds	r2, r7, #4
 8000784:	4b26      	ldr	r3, [pc, #152]	; (8000820 <MX_ADC1_Init+0x1e0>)
 8000786:	0011      	movs	r1, r2
 8000788:	0018      	movs	r0, r3
 800078a:	f001 fb83 	bl	8001e94 <HAL_ADC_ConfigChannel>
 800078e:	1e03      	subs	r3, r0, #0
 8000790:	d001      	beq.n	8000796 <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 8000792:	f000 fbf9 	bl	8000f88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	4a29      	ldr	r2, [pc, #164]	; (8000840 <MX_ADC1_Init+0x200>)
 800079a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079c:	1d3a      	adds	r2, r7, #4
 800079e:	4b20      	ldr	r3, [pc, #128]	; (8000820 <MX_ADC1_Init+0x1e0>)
 80007a0:	0011      	movs	r1, r2
 80007a2:	0018      	movs	r0, r3
 80007a4:	f001 fb76 	bl	8001e94 <HAL_ADC_ConfigChannel>
 80007a8:	1e03      	subs	r3, r0, #0
 80007aa:	d001      	beq.n	80007b0 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80007ac:	f000 fbec 	bl	8000f88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	4a24      	ldr	r2, [pc, #144]	; (8000844 <MX_ADC1_Init+0x204>)
 80007b4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b6:	1d3a      	adds	r2, r7, #4
 80007b8:	4b19      	ldr	r3, [pc, #100]	; (8000820 <MX_ADC1_Init+0x1e0>)
 80007ba:	0011      	movs	r1, r2
 80007bc:	0018      	movs	r0, r3
 80007be:	f001 fb69 	bl	8001e94 <HAL_ADC_ConfigChannel>
 80007c2:	1e03      	subs	r3, r0, #0
 80007c4:	d001      	beq.n	80007ca <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 80007c6:	f000 fbdf 	bl	8000f88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	4a1e      	ldr	r2, [pc, #120]	; (8000848 <MX_ADC1_Init+0x208>)
 80007ce:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d0:	1d3a      	adds	r2, r7, #4
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <MX_ADC1_Init+0x1e0>)
 80007d4:	0011      	movs	r1, r2
 80007d6:	0018      	movs	r0, r3
 80007d8:	f001 fb5c 	bl	8001e94 <HAL_ADC_ConfigChannel>
 80007dc:	1e03      	subs	r3, r0, #0
 80007de:	d001      	beq.n	80007e4 <MX_ADC1_Init+0x1a4>
  {
    Error_Handler();
 80007e0:	f000 fbd2 	bl	8000f88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	4a19      	ldr	r2, [pc, #100]	; (800084c <MX_ADC1_Init+0x20c>)
 80007e8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ea:	1d3a      	adds	r2, r7, #4
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_ADC1_Init+0x1e0>)
 80007ee:	0011      	movs	r1, r2
 80007f0:	0018      	movs	r0, r3
 80007f2:	f001 fb4f 	bl	8001e94 <HAL_ADC_ConfigChannel>
 80007f6:	1e03      	subs	r3, r0, #0
 80007f8:	d001      	beq.n	80007fe <MX_ADC1_Init+0x1be>
  {
    Error_Handler();
 80007fa:	f000 fbc5 	bl	8000f88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	4a13      	ldr	r2, [pc, #76]	; (8000850 <MX_ADC1_Init+0x210>)
 8000802:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000804:	1d3a      	adds	r2, r7, #4
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_ADC1_Init+0x1e0>)
 8000808:	0011      	movs	r1, r2
 800080a:	0018      	movs	r0, r3
 800080c:	f001 fb42 	bl	8001e94 <HAL_ADC_ConfigChannel>
 8000810:	1e03      	subs	r3, r0, #0
 8000812:	d001      	beq.n	8000818 <MX_ADC1_Init+0x1d8>
  {
    Error_Handler();
 8000814:	f000 fbb8 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	b004      	add	sp, #16
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000028 	.word	0x20000028
 8000824:	40012400 	.word	0x40012400
 8000828:	04000002 	.word	0x04000002
 800082c:	08000004 	.word	0x08000004
 8000830:	0c000008 	.word	0x0c000008
 8000834:	10000010 	.word	0x10000010
 8000838:	14000020 	.word	0x14000020
 800083c:	18000040 	.word	0x18000040
 8000840:	1c000080 	.word	0x1c000080
 8000844:	20000100 	.word	0x20000100
 8000848:	24000200 	.word	0x24000200
 800084c:	44020000 	.word	0x44020000
 8000850:	48040000 	.word	0x48040000

08000854 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000858:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <MX_I2C1_Init+0x74>)
 800085a:	4a1c      	ldr	r2, [pc, #112]	; (80008cc <MX_I2C1_Init+0x78>)
 800085c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 800085e:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000860:	4a1b      	ldr	r2, [pc, #108]	; (80008d0 <MX_I2C1_Init+0x7c>)
 8000862:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 2;
 8000864:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000866:	2202      	movs	r2, #2
 8000868:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800086a:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <MX_I2C1_Init+0x74>)
 800086c:	2201      	movs	r2, #1
 800086e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000870:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_I2C1_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_I2C1_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_I2C1_Init+0x74>)
 8000890:	0018      	movs	r0, r3
 8000892:	f002 fb51 	bl	8002f38 <HAL_I2C_Init>
 8000896:	1e03      	subs	r3, r0, #0
 8000898:	d001      	beq.n	800089e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800089a:	f000 fb75 	bl	8000f88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800089e:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <MX_I2C1_Init+0x74>)
 80008a0:	2100      	movs	r1, #0
 80008a2:	0018      	movs	r0, r3
 80008a4:	f003 ff3c 	bl	8004720 <HAL_I2CEx_ConfigAnalogFilter>
 80008a8:	1e03      	subs	r3, r0, #0
 80008aa:	d001      	beq.n	80008b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008ac:	f000 fb6c 	bl	8000f88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <MX_I2C1_Init+0x74>)
 80008b2:	2100      	movs	r1, #0
 80008b4:	0018      	movs	r0, r3
 80008b6:	f003 ff7f 	bl	80047b8 <HAL_I2CEx_ConfigDigitalFilter>
 80008ba:	1e03      	subs	r3, r0, #0
 80008bc:	d001      	beq.n	80008c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008be:	f000 fb63 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200000e8 	.word	0x200000e8
 80008cc:	40005400 	.word	0x40005400
 80008d0:	00602173 	.word	0x00602173

080008d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	; (8000948 <MX_I2C2_Init+0x74>)
 80008da:	4a1c      	ldr	r2, [pc, #112]	; (800094c <MX_I2C2_Init+0x78>)
 80008dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00602173;
 80008de:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <MX_I2C2_Init+0x74>)
 80008e0:	4a1b      	ldr	r2, [pc, #108]	; (8000950 <MX_I2C2_Init+0x7c>)
 80008e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 2;
 80008e4:	4b18      	ldr	r3, [pc, #96]	; (8000948 <MX_I2C2_Init+0x74>)
 80008e6:	2202      	movs	r2, #2
 80008e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ea:	4b17      	ldr	r3, [pc, #92]	; (8000948 <MX_I2C2_Init+0x74>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008f0:	4b15      	ldr	r3, [pc, #84]	; (8000948 <MX_I2C2_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008f6:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_I2C2_Init+0x74>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_I2C2_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_I2C2_Init+0x74>)
 8000904:	2200      	movs	r2, #0
 8000906:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_I2C2_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_I2C2_Init+0x74>)
 8000910:	0018      	movs	r0, r3
 8000912:	f002 fb11 	bl	8002f38 <HAL_I2C_Init>
 8000916:	1e03      	subs	r3, r0, #0
 8000918:	d001      	beq.n	800091e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800091a:	f000 fb35 	bl	8000f88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800091e:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <MX_I2C2_Init+0x74>)
 8000920:	2100      	movs	r1, #0
 8000922:	0018      	movs	r0, r3
 8000924:	f003 fefc 	bl	8004720 <HAL_I2CEx_ConfigAnalogFilter>
 8000928:	1e03      	subs	r3, r0, #0
 800092a:	d001      	beq.n	8000930 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800092c:	f000 fb2c 	bl	8000f88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <MX_I2C2_Init+0x74>)
 8000932:	2100      	movs	r1, #0
 8000934:	0018      	movs	r0, r3
 8000936:	f003 ff3f 	bl	80047b8 <HAL_I2CEx_ConfigDigitalFilter>
 800093a:	1e03      	subs	r3, r0, #0
 800093c:	d001      	beq.n	8000942 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800093e:	f000 fb23 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	2000016c 	.word	0x2000016c
 800094c:	40005800 	.word	0x40005800
 8000950:	00602173 	.word	0x00602173

08000954 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b09c      	sub	sp, #112	; 0x70
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800095a:	2360      	movs	r3, #96	; 0x60
 800095c:	18fb      	adds	r3, r7, r3
 800095e:	0018      	movs	r0, r3
 8000960:	2310      	movs	r3, #16
 8000962:	001a      	movs	r2, r3
 8000964:	2100      	movs	r1, #0
 8000966:	f005 ffb3 	bl	80068d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800096a:	2354      	movs	r3, #84	; 0x54
 800096c:	18fb      	adds	r3, r7, r3
 800096e:	0018      	movs	r0, r3
 8000970:	230c      	movs	r3, #12
 8000972:	001a      	movs	r2, r3
 8000974:	2100      	movs	r1, #0
 8000976:	f005 ffab 	bl	80068d0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800097a:	2338      	movs	r3, #56	; 0x38
 800097c:	18fb      	adds	r3, r7, r3
 800097e:	0018      	movs	r0, r3
 8000980:	231c      	movs	r3, #28
 8000982:	001a      	movs	r2, r3
 8000984:	2100      	movs	r1, #0
 8000986:	f005 ffa3 	bl	80068d0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	0018      	movs	r0, r3
 800098e:	2334      	movs	r3, #52	; 0x34
 8000990:	001a      	movs	r2, r3
 8000992:	2100      	movs	r1, #0
 8000994:	f005 ff9c 	bl	80068d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000998:	4b61      	ldr	r3, [pc, #388]	; (8000b20 <MX_TIM1_Init+0x1cc>)
 800099a:	4a62      	ldr	r2, [pc, #392]	; (8000b24 <MX_TIM1_Init+0x1d0>)
 800099c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800099e:	4b60      	ldr	r3, [pc, #384]	; (8000b20 <MX_TIM1_Init+0x1cc>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a4:	4b5e      	ldr	r3, [pc, #376]	; (8000b20 <MX_TIM1_Init+0x1cc>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009aa:	4b5d      	ldr	r3, [pc, #372]	; (8000b20 <MX_TIM1_Init+0x1cc>)
 80009ac:	4a5e      	ldr	r2, [pc, #376]	; (8000b28 <MX_TIM1_Init+0x1d4>)
 80009ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b0:	4b5b      	ldr	r3, [pc, #364]	; (8000b20 <MX_TIM1_Init+0x1cc>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009b6:	4b5a      	ldr	r3, [pc, #360]	; (8000b20 <MX_TIM1_Init+0x1cc>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009bc:	4b58      	ldr	r3, [pc, #352]	; (8000b20 <MX_TIM1_Init+0x1cc>)
 80009be:	2200      	movs	r2, #0
 80009c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009c2:	4b57      	ldr	r3, [pc, #348]	; (8000b20 <MX_TIM1_Init+0x1cc>)
 80009c4:	0018      	movs	r0, r3
 80009c6:	f004 fd51 	bl	800546c <HAL_TIM_Base_Init>
 80009ca:	1e03      	subs	r3, r0, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80009ce:	f000 fadb 	bl	8000f88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009d2:	2160      	movs	r1, #96	; 0x60
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2280      	movs	r2, #128	; 0x80
 80009d8:	0152      	lsls	r2, r2, #5
 80009da:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009dc:	187a      	adds	r2, r7, r1
 80009de:	4b50      	ldr	r3, [pc, #320]	; (8000b20 <MX_TIM1_Init+0x1cc>)
 80009e0:	0011      	movs	r1, r2
 80009e2:	0018      	movs	r0, r3
 80009e4:	f005 f95e 	bl	8005ca4 <HAL_TIM_ConfigClockSource>
 80009e8:	1e03      	subs	r3, r0, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80009ec:	f000 facc 	bl	8000f88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009f0:	4b4b      	ldr	r3, [pc, #300]	; (8000b20 <MX_TIM1_Init+0x1cc>)
 80009f2:	0018      	movs	r0, r3
 80009f4:	f004 fde8 	bl	80055c8 <HAL_TIM_PWM_Init>
 80009f8:	1e03      	subs	r3, r0, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80009fc:	f000 fac4 	bl	8000f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a00:	2154      	movs	r1, #84	; 0x54
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a14:	187a      	adds	r2, r7, r1
 8000a16:	4b42      	ldr	r3, [pc, #264]	; (8000b20 <MX_TIM1_Init+0x1cc>)
 8000a18:	0011      	movs	r1, r2
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f005 fe32 	bl	8006684 <HAL_TIMEx_MasterConfigSynchronization>
 8000a20:	1e03      	subs	r3, r0, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000a24:	f000 fab0 	bl	8000f88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a28:	2138      	movs	r1, #56	; 0x38
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2260      	movs	r2, #96	; 0x60
 8000a2e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2200      	movs	r2, #0
 8000a34:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a54:	1879      	adds	r1, r7, r1
 8000a56:	4b32      	ldr	r3, [pc, #200]	; (8000b20 <MX_TIM1_Init+0x1cc>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f005 f822 	bl	8005aa4 <HAL_TIM_PWM_ConfigChannel>
 8000a60:	1e03      	subs	r3, r0, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000a64:	f000 fa90 	bl	8000f88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a68:	2338      	movs	r3, #56	; 0x38
 8000a6a:	18f9      	adds	r1, r7, r3
 8000a6c:	4b2c      	ldr	r3, [pc, #176]	; (8000b20 <MX_TIM1_Init+0x1cc>)
 8000a6e:	2204      	movs	r2, #4
 8000a70:	0018      	movs	r0, r3
 8000a72:	f005 f817 	bl	8005aa4 <HAL_TIM_PWM_ConfigChannel>
 8000a76:	1e03      	subs	r3, r0, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000a7a:	f000 fa85 	bl	8000f88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a7e:	2338      	movs	r3, #56	; 0x38
 8000a80:	18f9      	adds	r1, r7, r3
 8000a82:	4b27      	ldr	r3, [pc, #156]	; (8000b20 <MX_TIM1_Init+0x1cc>)
 8000a84:	2208      	movs	r2, #8
 8000a86:	0018      	movs	r0, r3
 8000a88:	f005 f80c 	bl	8005aa4 <HAL_TIM_PWM_ConfigChannel>
 8000a8c:	1e03      	subs	r3, r0, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000a90:	f000 fa7a 	bl	8000f88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a94:	2338      	movs	r3, #56	; 0x38
 8000a96:	18f9      	adds	r1, r7, r3
 8000a98:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <MX_TIM1_Init+0x1cc>)
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f005 f801 	bl	8005aa4 <HAL_TIM_PWM_ConfigChannel>
 8000aa2:	1e03      	subs	r3, r0, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 8000aa6:	f000 fa6f 	bl	8000f88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2280      	movs	r2, #128	; 0x80
 8000acc:	0192      	lsls	r2, r2, #6
 8000ace:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2200      	movs	r2, #0
 8000ada:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	2200      	movs	r2, #0
 8000ae0:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2280      	movs	r2, #128	; 0x80
 8000ae6:	0492      	lsls	r2, r2, #18
 8000ae8:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	2200      	movs	r2, #0
 8000aee:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	2200      	movs	r2, #0
 8000af4:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2200      	movs	r2, #0
 8000afa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000afc:	1d3a      	adds	r2, r7, #4
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <MX_TIM1_Init+0x1cc>)
 8000b00:	0011      	movs	r1, r2
 8000b02:	0018      	movs	r0, r3
 8000b04:	f005 fe26 	bl	8006754 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b08:	1e03      	subs	r3, r0, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM1_Init+0x1bc>
  {
    Error_Handler();
 8000b0c:	f000 fa3c 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b10:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <MX_TIM1_Init+0x1cc>)
 8000b12:	0018      	movs	r0, r3
 8000b14:	f000 fc18 	bl	8001348 <HAL_TIM_MspPostInit>

}
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b01c      	add	sp, #112	; 0x70
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	200001f0 	.word	0x200001f0
 8000b24:	40012c00 	.word	0x40012c00
 8000b28:	0000ffff 	.word	0x0000ffff

08000b2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b088      	sub	sp, #32
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b32:	2310      	movs	r3, #16
 8000b34:	18fb      	adds	r3, r7, r3
 8000b36:	0018      	movs	r0, r3
 8000b38:	2310      	movs	r3, #16
 8000b3a:	001a      	movs	r2, r3
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	f005 fec7 	bl	80068d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	0018      	movs	r0, r3
 8000b46:	230c      	movs	r3, #12
 8000b48:	001a      	movs	r2, r3
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	f005 fec0 	bl	80068d0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b50:	4b1e      	ldr	r3, [pc, #120]	; (8000bcc <MX_TIM3_Init+0xa0>)
 8000b52:	4a1f      	ldr	r2, [pc, #124]	; (8000bd0 <MX_TIM3_Init+0xa4>)
 8000b54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b56:	4b1d      	ldr	r3, [pc, #116]	; (8000bcc <MX_TIM3_Init+0xa0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5c:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <MX_TIM3_Init+0xa0>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000b62:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <MX_TIM3_Init+0xa0>)
 8000b64:	4a1b      	ldr	r2, [pc, #108]	; (8000bd4 <MX_TIM3_Init+0xa8>)
 8000b66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b68:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <MX_TIM3_Init+0xa0>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6e:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <MX_TIM3_Init+0xa0>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b74:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <MX_TIM3_Init+0xa0>)
 8000b76:	0018      	movs	r0, r3
 8000b78:	f004 fc78 	bl	800546c <HAL_TIM_Base_Init>
 8000b7c:	1e03      	subs	r3, r0, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000b80:	f000 fa02 	bl	8000f88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b84:	2110      	movs	r1, #16
 8000b86:	187b      	adds	r3, r7, r1
 8000b88:	2280      	movs	r2, #128	; 0x80
 8000b8a:	0152      	lsls	r2, r2, #5
 8000b8c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b8e:	187a      	adds	r2, r7, r1
 8000b90:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <MX_TIM3_Init+0xa0>)
 8000b92:	0011      	movs	r1, r2
 8000b94:	0018      	movs	r0, r3
 8000b96:	f005 f885 	bl	8005ca4 <HAL_TIM_ConfigClockSource>
 8000b9a:	1e03      	subs	r3, r0, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000b9e:	f000 f9f3 	bl	8000f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bae:	1d3a      	adds	r2, r7, #4
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <MX_TIM3_Init+0xa0>)
 8000bb2:	0011      	movs	r1, r2
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f005 fd65 	bl	8006684 <HAL_TIMEx_MasterConfigSynchronization>
 8000bba:	1e03      	subs	r3, r0, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000bbe:	f000 f9e3 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b008      	add	sp, #32
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	2000023c 	.word	0x2000023c
 8000bd0:	40000400 	.word	0x40000400
 8000bd4:	00002710 	.word	0x00002710

08000bd8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b098      	sub	sp, #96	; 0x60
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bde:	2354      	movs	r3, #84	; 0x54
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	0018      	movs	r0, r3
 8000be4:	230c      	movs	r3, #12
 8000be6:	001a      	movs	r2, r3
 8000be8:	2100      	movs	r1, #0
 8000bea:	f005 fe71 	bl	80068d0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bee:	2338      	movs	r3, #56	; 0x38
 8000bf0:	18fb      	adds	r3, r7, r3
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	231c      	movs	r3, #28
 8000bf6:	001a      	movs	r2, r3
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	f005 fe69 	bl	80068d0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	0018      	movs	r0, r3
 8000c02:	2334      	movs	r3, #52	; 0x34
 8000c04:	001a      	movs	r2, r3
 8000c06:	2100      	movs	r1, #0
 8000c08:	f005 fe62 	bl	80068d0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000c0c:	4b41      	ldr	r3, [pc, #260]	; (8000d14 <MX_TIM15_Init+0x13c>)
 8000c0e:	4a42      	ldr	r2, [pc, #264]	; (8000d18 <MX_TIM15_Init+0x140>)
 8000c10:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000c12:	4b40      	ldr	r3, [pc, #256]	; (8000d14 <MX_TIM15_Init+0x13c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c18:	4b3e      	ldr	r3, [pc, #248]	; (8000d14 <MX_TIM15_Init+0x13c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000c1e:	4b3d      	ldr	r3, [pc, #244]	; (8000d14 <MX_TIM15_Init+0x13c>)
 8000c20:	4a3e      	ldr	r2, [pc, #248]	; (8000d1c <MX_TIM15_Init+0x144>)
 8000c22:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c24:	4b3b      	ldr	r3, [pc, #236]	; (8000d14 <MX_TIM15_Init+0x13c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000c2a:	4b3a      	ldr	r3, [pc, #232]	; (8000d14 <MX_TIM15_Init+0x13c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c30:	4b38      	ldr	r3, [pc, #224]	; (8000d14 <MX_TIM15_Init+0x13c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000c36:	4b37      	ldr	r3, [pc, #220]	; (8000d14 <MX_TIM15_Init+0x13c>)
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f004 fcc5 	bl	80055c8 <HAL_TIM_PWM_Init>
 8000c3e:	1e03      	subs	r3, r0, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000c42:	f000 f9a1 	bl	8000f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c46:	2154      	movs	r1, #84	; 0x54
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000c54:	187a      	adds	r2, r7, r1
 8000c56:	4b2f      	ldr	r3, [pc, #188]	; (8000d14 <MX_TIM15_Init+0x13c>)
 8000c58:	0011      	movs	r1, r2
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f005 fd12 	bl	8006684 <HAL_TIMEx_MasterConfigSynchronization>
 8000c60:	1e03      	subs	r3, r0, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8000c64:	f000 f990 	bl	8000f88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c68:	2138      	movs	r1, #56	; 0x38
 8000c6a:	187b      	adds	r3, r7, r1
 8000c6c:	2260      	movs	r2, #96	; 0x60
 8000c6e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	2200      	movs	r2, #0
 8000c74:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c76:	187b      	adds	r3, r7, r1
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c7c:	187b      	adds	r3, r7, r1
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c82:	187b      	adds	r3, r7, r1
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c88:	187b      	adds	r3, r7, r1
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c8e:	187b      	adds	r3, r7, r1
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c94:	1879      	adds	r1, r7, r1
 8000c96:	4b1f      	ldr	r3, [pc, #124]	; (8000d14 <MX_TIM15_Init+0x13c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f004 ff02 	bl	8005aa4 <HAL_TIM_PWM_ConfigChannel>
 8000ca0:	1e03      	subs	r3, r0, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8000ca4:	f000 f970 	bl	8000f88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ca8:	2338      	movs	r3, #56	; 0x38
 8000caa:	18f9      	adds	r1, r7, r3
 8000cac:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <MX_TIM15_Init+0x13c>)
 8000cae:	2204      	movs	r2, #4
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f004 fef7 	bl	8005aa4 <HAL_TIM_PWM_ConfigChannel>
 8000cb6:	1e03      	subs	r3, r0, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM15_Init+0xe6>
  {
    Error_Handler();
 8000cba:	f000 f965 	bl	8000f88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	2280      	movs	r2, #128	; 0x80
 8000ce0:	0192      	lsls	r2, r2, #6
 8000ce2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	2200      	movs	r2, #0
 8000cee:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000cf0:	1d3a      	adds	r2, r7, #4
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <MX_TIM15_Init+0x13c>)
 8000cf4:	0011      	movs	r1, r2
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f005 fd2c 	bl	8006754 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cfc:	1e03      	subs	r3, r0, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM15_Init+0x12c>
  {
    Error_Handler();
 8000d00:	f000 f942 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000d04:	4b03      	ldr	r3, [pc, #12]	; (8000d14 <MX_TIM15_Init+0x13c>)
 8000d06:	0018      	movs	r0, r3
 8000d08:	f000 fb1e 	bl	8001348 <HAL_TIM_MspPostInit>

}
 8000d0c:	46c0      	nop			; (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b018      	add	sp, #96	; 0x60
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000288 	.word	0x20000288
 8000d18:	40014000 	.word	0x40014000
 8000d1c:	0000ffff 	.word	0x0000ffff

08000d20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <MX_DMA_Init+0x38>)
 8000d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <MX_DMA_Init+0x38>)
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	639a      	str	r2, [r3, #56]	; 0x38
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <MX_DMA_Init+0x38>)
 8000d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d36:	2201      	movs	r2, #1
 8000d38:	4013      	ands	r3, r2
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2100      	movs	r1, #0
 8000d42:	2009      	movs	r0, #9
 8000d44:	f001 fc3e 	bl	80025c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d48:	2009      	movs	r0, #9
 8000d4a:	f001 fc50 	bl	80025ee <HAL_NVIC_EnableIRQ>

}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	46bd      	mov	sp, r7
 8000d52:	b002      	add	sp, #8
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	40021000 	.word	0x40021000

08000d5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d5c:	b590      	push	{r4, r7, lr}
 8000d5e:	b08b      	sub	sp, #44	; 0x2c
 8000d60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d62:	2414      	movs	r4, #20
 8000d64:	193b      	adds	r3, r7, r4
 8000d66:	0018      	movs	r0, r3
 8000d68:	2314      	movs	r3, #20
 8000d6a:	001a      	movs	r2, r3
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	f005 fdaf 	bl	80068d0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d72:	4b7d      	ldr	r3, [pc, #500]	; (8000f68 <MX_GPIO_Init+0x20c>)
 8000d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d76:	4b7c      	ldr	r3, [pc, #496]	; (8000f68 <MX_GPIO_Init+0x20c>)
 8000d78:	2104      	movs	r1, #4
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d7e:	4b7a      	ldr	r3, [pc, #488]	; (8000f68 <MX_GPIO_Init+0x20c>)
 8000d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d82:	2204      	movs	r2, #4
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	4b77      	ldr	r3, [pc, #476]	; (8000f68 <MX_GPIO_Init+0x20c>)
 8000d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d8e:	4b76      	ldr	r3, [pc, #472]	; (8000f68 <MX_GPIO_Init+0x20c>)
 8000d90:	2101      	movs	r1, #1
 8000d92:	430a      	orrs	r2, r1
 8000d94:	635a      	str	r2, [r3, #52]	; 0x34
 8000d96:	4b74      	ldr	r3, [pc, #464]	; (8000f68 <MX_GPIO_Init+0x20c>)
 8000d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da2:	4b71      	ldr	r3, [pc, #452]	; (8000f68 <MX_GPIO_Init+0x20c>)
 8000da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000da6:	4b70      	ldr	r3, [pc, #448]	; (8000f68 <MX_GPIO_Init+0x20c>)
 8000da8:	2102      	movs	r1, #2
 8000daa:	430a      	orrs	r2, r1
 8000dac:	635a      	str	r2, [r3, #52]	; 0x34
 8000dae:	4b6e      	ldr	r3, [pc, #440]	; (8000f68 <MX_GPIO_Init+0x20c>)
 8000db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000db2:	2202      	movs	r2, #2
 8000db4:	4013      	ands	r3, r2
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dba:	4b6b      	ldr	r3, [pc, #428]	; (8000f68 <MX_GPIO_Init+0x20c>)
 8000dbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dbe:	4b6a      	ldr	r3, [pc, #424]	; (8000f68 <MX_GPIO_Init+0x20c>)
 8000dc0:	2108      	movs	r1, #8
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	635a      	str	r2, [r3, #52]	; 0x34
 8000dc6:	4b68      	ldr	r3, [pc, #416]	; (8000f68 <MX_GPIO_Init+0x20c>)
 8000dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dca:	2208      	movs	r2, #8
 8000dcc:	4013      	ands	r3, r2
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CE_BOOST_Pin|OE_MUX_Pin, GPIO_PIN_RESET);
 8000dd2:	4966      	ldr	r1, [pc, #408]	; (8000f6c <MX_GPIO_Init+0x210>)
 8000dd4:	4b66      	ldr	r3, [pc, #408]	; (8000f70 <MX_GPIO_Init+0x214>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f002 f851 	bl	8002e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OTG1_Pin|S_MUX_Pin|NEOPIXEL_DI_Pin, GPIO_PIN_SET);
 8000dde:	4b64      	ldr	r3, [pc, #400]	; (8000f70 <MX_GPIO_Init+0x214>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	210d      	movs	r1, #13
 8000de4:	0018      	movs	r0, r3
 8000de6:	f002 f84b 	bl	8002e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STM_INT_OUT2_Pin|STM_INT_OUT1_Pin|LED_Pin|GPIO_PIN_3
 8000dea:	4962      	ldr	r1, [pc, #392]	; (8000f74 <MX_GPIO_Init+0x218>)
 8000dec:	4b62      	ldr	r3, [pc, #392]	; (8000f78 <MX_GPIO_Init+0x21c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	0018      	movs	r0, r3
 8000df2:	f002 f845 	bl	8002e80 <HAL_GPIO_WritePin>
                          |TRIG_SONAR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000df6:	4b61      	ldr	r3, [pc, #388]	; (8000f7c <MX_GPIO_Init+0x220>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	217f      	movs	r1, #127	; 0x7f
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f002 f83f 	bl	8002e80 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_ESP_Pin|nSLEEP_MOTORS_Pin, GPIO_PIN_SET);
 8000e02:	23c0      	movs	r3, #192	; 0xc0
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	485c      	ldr	r0, [pc, #368]	; (8000f78 <MX_GPIO_Init+0x21c>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	0019      	movs	r1, r3
 8000e0c:	f002 f838 	bl	8002e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CE_BOOST_Pin OTG1_Pin OE_MUX_Pin S_MUX_Pin */
  GPIO_InitStruct.Pin = CE_BOOST_Pin|OTG1_Pin|OE_MUX_Pin|S_MUX_Pin;
 8000e10:	193b      	adds	r3, r7, r4
 8000e12:	4a5b      	ldr	r2, [pc, #364]	; (8000f80 <MX_GPIO_Init+0x224>)
 8000e14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e16:	193b      	adds	r3, r7, r4
 8000e18:	2201      	movs	r2, #1
 8000e1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	193b      	adds	r3, r7, r4
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	193b      	adds	r3, r7, r4
 8000e24:	2200      	movs	r2, #0
 8000e26:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e28:	193b      	adds	r3, r7, r4
 8000e2a:	4a51      	ldr	r2, [pc, #324]	; (8000f70 <MX_GPIO_Init+0x214>)
 8000e2c:	0019      	movs	r1, r3
 8000e2e:	0010      	movs	r0, r2
 8000e30:	f001 fec2 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NEOPIXEL_DI_Pin */
  GPIO_InitStruct.Pin = NEOPIXEL_DI_Pin;
 8000e34:	193b      	adds	r3, r7, r4
 8000e36:	2208      	movs	r2, #8
 8000e38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e3a:	193b      	adds	r3, r7, r4
 8000e3c:	2211      	movs	r2, #17
 8000e3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	193b      	adds	r3, r7, r4
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	193b      	adds	r3, r7, r4
 8000e48:	2200      	movs	r2, #0
 8000e4a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NEOPIXEL_DI_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	193b      	adds	r3, r7, r4
 8000e4e:	4a48      	ldr	r2, [pc, #288]	; (8000f70 <MX_GPIO_Init+0x214>)
 8000e50:	0019      	movs	r1, r3
 8000e52:	0010      	movs	r0, r2
 8000e54:	f001 feb0 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STM_INT_OUT2_Pin STM_INT_OUT1_Pin LED_Pin PB3
                           EN_ESP_Pin nSLEEP_MOTORS_Pin TRIG_SONAR_Pin */
  GPIO_InitStruct.Pin = STM_INT_OUT2_Pin|STM_INT_OUT1_Pin|LED_Pin|GPIO_PIN_3
 8000e58:	193b      	adds	r3, r7, r4
 8000e5a:	4a4a      	ldr	r2, [pc, #296]	; (8000f84 <MX_GPIO_Init+0x228>)
 8000e5c:	601a      	str	r2, [r3, #0]
                          |EN_ESP_Pin|nSLEEP_MOTORS_Pin|TRIG_SONAR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5e:	193b      	adds	r3, r7, r4
 8000e60:	2201      	movs	r2, #1
 8000e62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	193b      	adds	r3, r7, r4
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	193b      	adds	r3, r7, r4
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e70:	193b      	adds	r3, r7, r4
 8000e72:	4a41      	ldr	r2, [pc, #260]	; (8000f78 <MX_GPIO_Init+0x21c>)
 8000e74:	0019      	movs	r1, r3
 8000e76:	0010      	movs	r0, r2
 8000e78:	f001 fe9e 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Hall1_1_Pin Hall1_2_Pin ECHO_SONAR_Pin */
  GPIO_InitStruct.Pin = Hall1_1_Pin|Hall1_2_Pin|ECHO_SONAR_Pin;
 8000e7c:	193b      	adds	r3, r7, r4
 8000e7e:	2298      	movs	r2, #152	; 0x98
 8000e80:	00d2      	lsls	r2, r2, #3
 8000e82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e84:	193b      	adds	r3, r7, r4
 8000e86:	2288      	movs	r2, #136	; 0x88
 8000e88:	0352      	lsls	r2, r2, #13
 8000e8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	193b      	adds	r3, r7, r4
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e92:	193b      	adds	r3, r7, r4
 8000e94:	4a36      	ldr	r2, [pc, #216]	; (8000f70 <MX_GPIO_Init+0x214>)
 8000e96:	0019      	movs	r1, r3
 8000e98:	0010      	movs	r0, r2
 8000e9a:	f001 fe8d 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Hall2_1_Pin Hall2_2_Pin */
  GPIO_InitStruct.Pin = Hall2_1_Pin|Hall2_2_Pin;
 8000e9e:	193b      	adds	r3, r7, r4
 8000ea0:	22c0      	movs	r2, #192	; 0xc0
 8000ea2:	0092      	lsls	r2, r2, #2
 8000ea4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ea6:	193b      	adds	r3, r7, r4
 8000ea8:	2288      	movs	r2, #136	; 0x88
 8000eaa:	0352      	lsls	r2, r2, #13
 8000eac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	193b      	adds	r3, r7, r4
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb4:	193b      	adds	r3, r7, r4
 8000eb6:	4a31      	ldr	r2, [pc, #196]	; (8000f7c <MX_GPIO_Init+0x220>)
 8000eb8:	0019      	movs	r1, r3
 8000eba:	0010      	movs	r0, r2
 8000ebc:	f001 fe7c 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ON_PRESS_Pin */
  GPIO_InitStruct.Pin = ON_PRESS_Pin;
 8000ec0:	193b      	adds	r3, r7, r4
 8000ec2:	2280      	movs	r2, #128	; 0x80
 8000ec4:	0212      	lsls	r2, r2, #8
 8000ec6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ec8:	193b      	adds	r3, r7, r4
 8000eca:	2288      	movs	r2, #136	; 0x88
 8000ecc:	0352      	lsls	r2, r2, #13
 8000ece:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	193b      	adds	r3, r7, r4
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ON_PRESS_GPIO_Port, &GPIO_InitStruct);
 8000ed6:	193a      	adds	r2, r7, r4
 8000ed8:	23a0      	movs	r3, #160	; 0xa0
 8000eda:	05db      	lsls	r3, r3, #23
 8000edc:	0011      	movs	r1, r2
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f001 fe6a 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_BUTTON_Pin */
  GPIO_InitStruct.Pin = INPUT_BUTTON_Pin;
 8000ee4:	0021      	movs	r1, r4
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	2280      	movs	r2, #128	; 0x80
 8000eea:	0052      	lsls	r2, r2, #1
 8000eec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eee:	000c      	movs	r4, r1
 8000ef0:	193b      	adds	r3, r7, r4
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	193b      	adds	r3, r7, r4
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(INPUT_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000efc:	193b      	adds	r3, r7, r4
 8000efe:	4a1c      	ldr	r2, [pc, #112]	; (8000f70 <MX_GPIO_Init+0x214>)
 8000f00:	0019      	movs	r1, r3
 8000f02:	0010      	movs	r0, r2
 8000f04:	f001 fe58 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f08:	193b      	adds	r3, r7, r4
 8000f0a:	227f      	movs	r2, #127	; 0x7f
 8000f0c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0e:	193b      	adds	r3, r7, r4
 8000f10:	2201      	movs	r2, #1
 8000f12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	193b      	adds	r3, r7, r4
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	193b      	adds	r3, r7, r4
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f20:	193b      	adds	r3, r7, r4
 8000f22:	4a16      	ldr	r2, [pc, #88]	; (8000f7c <MX_GPIO_Init+0x220>)
 8000f24:	0019      	movs	r1, r3
 8000f26:	0010      	movs	r0, r2
 8000f28:	f001 fe46 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_BOOST_Pin INT_ACCEL_Pin */
  GPIO_InitStruct.Pin = INT_BOOST_Pin|INT_ACCEL_Pin;
 8000f2c:	0021      	movs	r1, r4
 8000f2e:	187b      	adds	r3, r7, r1
 8000f30:	2230      	movs	r2, #48	; 0x30
 8000f32:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f34:	187b      	adds	r3, r7, r1
 8000f36:	2288      	movs	r2, #136	; 0x88
 8000f38:	0352      	lsls	r2, r2, #13
 8000f3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	187b      	adds	r3, r7, r1
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f42:	187b      	adds	r3, r7, r1
 8000f44:	4a0c      	ldr	r2, [pc, #48]	; (8000f78 <MX_GPIO_Init+0x21c>)
 8000f46:	0019      	movs	r1, r3
 8000f48:	0010      	movs	r0, r2
 8000f4a:	f001 fe35 	bl	8002bb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2100      	movs	r1, #0
 8000f52:	2007      	movs	r0, #7
 8000f54:	f001 fb36 	bl	80025c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000f58:	2007      	movs	r0, #7
 8000f5a:	f001 fb48 	bl	80025ee <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	46bd      	mov	sp, r7
 8000f62:	b00b      	add	sp, #44	; 0x2c
 8000f64:	bd90      	pop	{r4, r7, pc}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	00001002 	.word	0x00001002
 8000f70:	50000800 	.word	0x50000800
 8000f74:	0000320c 	.word	0x0000320c
 8000f78:	50000400 	.word	0x50000400
 8000f7c:	50000c00 	.word	0x50000c00
 8000f80:	00001007 	.word	0x00001007
 8000f84:	0000338c 	.word	0x0000338c

08000f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f8c:	b672      	cpsid	i
}
 8000f8e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <Error_Handler+0x8>
	...

08000f94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <HAL_MspInit+0x44>)
 8000f9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_MspInit+0x44>)
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	641a      	str	r2, [r3, #64]	; 0x40
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <HAL_MspInit+0x44>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	2201      	movs	r2, #1
 8000fac:	4013      	ands	r3, r2
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <HAL_MspInit+0x44>)
 8000fb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HAL_MspInit+0x44>)
 8000fb8:	2180      	movs	r1, #128	; 0x80
 8000fba:	0549      	lsls	r1, r1, #21
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <HAL_MspInit+0x44>)
 8000fc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	055b      	lsls	r3, r3, #21
 8000fc8:	4013      	ands	r3, r2
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	b002      	add	sp, #8
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	40021000 	.word	0x40021000

08000fdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fdc:	b590      	push	{r4, r7, lr}
 8000fde:	b08d      	sub	sp, #52	; 0x34
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	241c      	movs	r4, #28
 8000fe6:	193b      	adds	r3, r7, r4
 8000fe8:	0018      	movs	r0, r3
 8000fea:	2314      	movs	r3, #20
 8000fec:	001a      	movs	r2, r3
 8000fee:	2100      	movs	r1, #0
 8000ff0:	f005 fc6e 	bl	80068d0 <memset>
  if(hadc->Instance==ADC1)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a49      	ldr	r2, [pc, #292]	; (8001120 <HAL_ADC_MspInit+0x144>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d000      	beq.n	8001000 <HAL_ADC_MspInit+0x24>
 8000ffe:	e08b      	b.n	8001118 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001000:	4b48      	ldr	r3, [pc, #288]	; (8001124 <HAL_ADC_MspInit+0x148>)
 8001002:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001004:	4b47      	ldr	r3, [pc, #284]	; (8001124 <HAL_ADC_MspInit+0x148>)
 8001006:	2180      	movs	r1, #128	; 0x80
 8001008:	0349      	lsls	r1, r1, #13
 800100a:	430a      	orrs	r2, r1
 800100c:	641a      	str	r2, [r3, #64]	; 0x40
 800100e:	4b45      	ldr	r3, [pc, #276]	; (8001124 <HAL_ADC_MspInit+0x148>)
 8001010:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001012:	2380      	movs	r3, #128	; 0x80
 8001014:	035b      	lsls	r3, r3, #13
 8001016:	4013      	ands	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
 800101a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101c:	4b41      	ldr	r3, [pc, #260]	; (8001124 <HAL_ADC_MspInit+0x148>)
 800101e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001020:	4b40      	ldr	r3, [pc, #256]	; (8001124 <HAL_ADC_MspInit+0x148>)
 8001022:	2101      	movs	r1, #1
 8001024:	430a      	orrs	r2, r1
 8001026:	635a      	str	r2, [r3, #52]	; 0x34
 8001028:	4b3e      	ldr	r3, [pc, #248]	; (8001124 <HAL_ADC_MspInit+0x148>)
 800102a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800102c:	2201      	movs	r2, #1
 800102e:	4013      	ands	r3, r2
 8001030:	617b      	str	r3, [r7, #20]
 8001032:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001034:	4b3b      	ldr	r3, [pc, #236]	; (8001124 <HAL_ADC_MspInit+0x148>)
 8001036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001038:	4b3a      	ldr	r3, [pc, #232]	; (8001124 <HAL_ADC_MspInit+0x148>)
 800103a:	2104      	movs	r1, #4
 800103c:	430a      	orrs	r2, r1
 800103e:	635a      	str	r2, [r3, #52]	; 0x34
 8001040:	4b38      	ldr	r3, [pc, #224]	; (8001124 <HAL_ADC_MspInit+0x148>)
 8001042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001044:	2204      	movs	r2, #4
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104c:	4b35      	ldr	r3, [pc, #212]	; (8001124 <HAL_ADC_MspInit+0x148>)
 800104e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001050:	4b34      	ldr	r3, [pc, #208]	; (8001124 <HAL_ADC_MspInit+0x148>)
 8001052:	2102      	movs	r1, #2
 8001054:	430a      	orrs	r2, r1
 8001056:	635a      	str	r2, [r3, #52]	; 0x34
 8001058:	4b32      	ldr	r3, [pc, #200]	; (8001124 <HAL_ADC_MspInit+0x148>)
 800105a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800105c:	2202      	movs	r2, #2
 800105e:	4013      	ands	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN17
    PC5     ------> ADC1_IN18
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001064:	193b      	adds	r3, r7, r4
 8001066:	22ff      	movs	r2, #255	; 0xff
 8001068:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800106a:	193b      	adds	r3, r7, r4
 800106c:	2203      	movs	r2, #3
 800106e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	193b      	adds	r3, r7, r4
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001076:	193a      	adds	r2, r7, r4
 8001078:	23a0      	movs	r3, #160	; 0xa0
 800107a:	05db      	lsls	r3, r3, #23
 800107c:	0011      	movs	r1, r2
 800107e:	0018      	movs	r0, r3
 8001080:	f001 fd9a 	bl	8002bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_PMID_MEAS_Pin|ADC_3V3_MEAS_Pin;
 8001084:	193b      	adds	r3, r7, r4
 8001086:	2230      	movs	r2, #48	; 0x30
 8001088:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800108a:	193b      	adds	r3, r7, r4
 800108c:	2203      	movs	r2, #3
 800108e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	193b      	adds	r3, r7, r4
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001096:	193b      	adds	r3, r7, r4
 8001098:	4a23      	ldr	r2, [pc, #140]	; (8001128 <HAL_ADC_MspInit+0x14c>)
 800109a:	0019      	movs	r1, r3
 800109c:	0010      	movs	r0, r2
 800109e:	f001 fd8b 	bl	8002bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_VBUS_MEAS_Pin|ADC_VBAT_MEAS_Pin;
 80010a2:	0021      	movs	r1, r4
 80010a4:	187b      	adds	r3, r7, r1
 80010a6:	2203      	movs	r2, #3
 80010a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010aa:	187b      	adds	r3, r7, r1
 80010ac:	2203      	movs	r2, #3
 80010ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	187b      	adds	r3, r7, r1
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b6:	187b      	adds	r3, r7, r1
 80010b8:	4a1c      	ldr	r2, [pc, #112]	; (800112c <HAL_ADC_MspInit+0x150>)
 80010ba:	0019      	movs	r1, r3
 80010bc:	0010      	movs	r0, r2
 80010be:	f001 fd7b 	bl	8002bb8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80010c2:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <HAL_ADC_MspInit+0x154>)
 80010c4:	4a1b      	ldr	r2, [pc, #108]	; (8001134 <HAL_ADC_MspInit+0x158>)
 80010c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <HAL_ADC_MspInit+0x154>)
 80010ca:	2205      	movs	r2, #5
 80010cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010ce:	4b18      	ldr	r3, [pc, #96]	; (8001130 <HAL_ADC_MspInit+0x154>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d4:	4b16      	ldr	r3, [pc, #88]	; (8001130 <HAL_ADC_MspInit+0x154>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <HAL_ADC_MspInit+0x154>)
 80010dc:	2280      	movs	r2, #128	; 0x80
 80010de:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <HAL_ADC_MspInit+0x154>)
 80010e2:	2280      	movs	r2, #128	; 0x80
 80010e4:	0052      	lsls	r2, r2, #1
 80010e6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <HAL_ADC_MspInit+0x154>)
 80010ea:	2280      	movs	r2, #128	; 0x80
 80010ec:	00d2      	lsls	r2, r2, #3
 80010ee:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <HAL_ADC_MspInit+0x154>)
 80010f2:	2220      	movs	r2, #32
 80010f4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <HAL_ADC_MspInit+0x154>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <HAL_ADC_MspInit+0x154>)
 80010fe:	0018      	movs	r0, r3
 8001100:	f001 fa92 	bl	8002628 <HAL_DMA_Init>
 8001104:	1e03      	subs	r3, r0, #0
 8001106:	d001      	beq.n	800110c <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8001108:	f7ff ff3e 	bl	8000f88 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a08      	ldr	r2, [pc, #32]	; (8001130 <HAL_ADC_MspInit+0x154>)
 8001110:	651a      	str	r2, [r3, #80]	; 0x50
 8001112:	4b07      	ldr	r3, [pc, #28]	; (8001130 <HAL_ADC_MspInit+0x154>)
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001118:	46c0      	nop			; (mov r8, r8)
 800111a:	46bd      	mov	sp, r7
 800111c:	b00d      	add	sp, #52	; 0x34
 800111e:	bd90      	pop	{r4, r7, pc}
 8001120:	40012400 	.word	0x40012400
 8001124:	40021000 	.word	0x40021000
 8001128:	50000800 	.word	0x50000800
 800112c:	50000400 	.word	0x50000400
 8001130:	2000008c 	.word	0x2000008c
 8001134:	40020008 	.word	0x40020008

08001138 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b093      	sub	sp, #76	; 0x4c
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	2334      	movs	r3, #52	; 0x34
 8001142:	18fb      	adds	r3, r7, r3
 8001144:	0018      	movs	r0, r3
 8001146:	2314      	movs	r3, #20
 8001148:	001a      	movs	r2, r3
 800114a:	2100      	movs	r1, #0
 800114c:	f005 fbc0 	bl	80068d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001150:	2418      	movs	r4, #24
 8001152:	193b      	adds	r3, r7, r4
 8001154:	0018      	movs	r0, r3
 8001156:	231c      	movs	r3, #28
 8001158:	001a      	movs	r2, r3
 800115a:	2100      	movs	r1, #0
 800115c:	f005 fbb8 	bl	80068d0 <memset>
  if(hi2c->Instance==I2C1)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a46      	ldr	r2, [pc, #280]	; (8001280 <HAL_I2C_MspInit+0x148>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d148      	bne.n	80011fc <HAL_I2C_MspInit+0xc4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800116a:	193b      	adds	r3, r7, r4
 800116c:	2220      	movs	r2, #32
 800116e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001170:	193b      	adds	r3, r7, r4
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001176:	193b      	adds	r3, r7, r4
 8001178:	0018      	movs	r0, r3
 800117a:	f004 f843 	bl	8005204 <HAL_RCCEx_PeriphCLKConfig>
 800117e:	1e03      	subs	r3, r0, #0
 8001180:	d001      	beq.n	8001186 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001182:	f7ff ff01 	bl	8000f88 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	4b3f      	ldr	r3, [pc, #252]	; (8001284 <HAL_I2C_MspInit+0x14c>)
 8001188:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800118a:	4b3e      	ldr	r3, [pc, #248]	; (8001284 <HAL_I2C_MspInit+0x14c>)
 800118c:	2101      	movs	r1, #1
 800118e:	430a      	orrs	r2, r1
 8001190:	635a      	str	r2, [r3, #52]	; 0x34
 8001192:	4b3c      	ldr	r3, [pc, #240]	; (8001284 <HAL_I2C_MspInit+0x14c>)
 8001194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001196:	2201      	movs	r2, #1
 8001198:	4013      	ands	r3, r2
 800119a:	617b      	str	r3, [r7, #20]
 800119c:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SYS_SCL_Pin|SYS_SDA_Pin;
 800119e:	2134      	movs	r1, #52	; 0x34
 80011a0:	187b      	adds	r3, r7, r1
 80011a2:	22c0      	movs	r2, #192	; 0xc0
 80011a4:	00d2      	lsls	r2, r2, #3
 80011a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011a8:	187b      	adds	r3, r7, r1
 80011aa:	2212      	movs	r2, #18
 80011ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	187b      	adds	r3, r7, r1
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80011ba:	187b      	adds	r3, r7, r1
 80011bc:	2206      	movs	r2, #6
 80011be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c0:	187a      	adds	r2, r7, r1
 80011c2:	23a0      	movs	r3, #160	; 0xa0
 80011c4:	05db      	lsls	r3, r3, #23
 80011c6:	0011      	movs	r1, r2
 80011c8:	0018      	movs	r0, r3
 80011ca:	f001 fcf5 	bl	8002bb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011ce:	4b2d      	ldr	r3, [pc, #180]	; (8001284 <HAL_I2C_MspInit+0x14c>)
 80011d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011d2:	4b2c      	ldr	r3, [pc, #176]	; (8001284 <HAL_I2C_MspInit+0x14c>)
 80011d4:	2180      	movs	r1, #128	; 0x80
 80011d6:	0389      	lsls	r1, r1, #14
 80011d8:	430a      	orrs	r2, r1
 80011da:	63da      	str	r2, [r3, #60]	; 0x3c
 80011dc:	4b29      	ldr	r3, [pc, #164]	; (8001284 <HAL_I2C_MspInit+0x14c>)
 80011de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	039b      	lsls	r3, r3, #14
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	2017      	movs	r0, #23
 80011f0:	f001 f9e8 	bl	80025c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80011f4:	2017      	movs	r0, #23
 80011f6:	f001 f9fa 	bl	80025ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80011fa:	e03d      	b.n	8001278 <HAL_I2C_MspInit+0x140>
  else if(hi2c->Instance==I2C2)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a21      	ldr	r2, [pc, #132]	; (8001288 <HAL_I2C_MspInit+0x150>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d138      	bne.n	8001278 <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001206:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <HAL_I2C_MspInit+0x14c>)
 8001208:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800120a:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <HAL_I2C_MspInit+0x14c>)
 800120c:	2102      	movs	r1, #2
 800120e:	430a      	orrs	r2, r1
 8001210:	635a      	str	r2, [r3, #52]	; 0x34
 8001212:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <HAL_I2C_MspInit+0x14c>)
 8001214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001216:	2202      	movs	r2, #2
 8001218:	4013      	ands	r3, r2
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CTRL_SCL_Pin|CTRL_SDA_Pin;
 800121e:	2134      	movs	r1, #52	; 0x34
 8001220:	187b      	adds	r3, r7, r1
 8001222:	22c0      	movs	r2, #192	; 0xc0
 8001224:	0112      	lsls	r2, r2, #4
 8001226:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001228:	187b      	adds	r3, r7, r1
 800122a:	2212      	movs	r2, #18
 800122c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	187b      	adds	r3, r7, r1
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	187b      	adds	r3, r7, r1
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800123a:	187b      	adds	r3, r7, r1
 800123c:	2206      	movs	r2, #6
 800123e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001240:	187b      	adds	r3, r7, r1
 8001242:	4a12      	ldr	r2, [pc, #72]	; (800128c <HAL_I2C_MspInit+0x154>)
 8001244:	0019      	movs	r1, r3
 8001246:	0010      	movs	r0, r2
 8001248:	f001 fcb6 	bl	8002bb8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800124c:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <HAL_I2C_MspInit+0x14c>)
 800124e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <HAL_I2C_MspInit+0x14c>)
 8001252:	2180      	movs	r1, #128	; 0x80
 8001254:	03c9      	lsls	r1, r1, #15
 8001256:	430a      	orrs	r2, r1
 8001258:	63da      	str	r2, [r3, #60]	; 0x3c
 800125a:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <HAL_I2C_MspInit+0x14c>)
 800125c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800125e:	2380      	movs	r3, #128	; 0x80
 8001260:	03db      	lsls	r3, r3, #15
 8001262:	4013      	ands	r3, r2
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 8001268:	2200      	movs	r2, #0
 800126a:	2100      	movs	r1, #0
 800126c:	2018      	movs	r0, #24
 800126e:	f001 f9a9 	bl	80025c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 8001272:	2018      	movs	r0, #24
 8001274:	f001 f9bb 	bl	80025ee <HAL_NVIC_EnableIRQ>
}
 8001278:	46c0      	nop			; (mov r8, r8)
 800127a:	46bd      	mov	sp, r7
 800127c:	b013      	add	sp, #76	; 0x4c
 800127e:	bd90      	pop	{r4, r7, pc}
 8001280:	40005400 	.word	0x40005400
 8001284:	40021000 	.word	0x40021000
 8001288:	40005800 	.word	0x40005800
 800128c:	50000400 	.word	0x50000400

08001290 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a17      	ldr	r2, [pc, #92]	; (80012fc <HAL_TIM_Base_MspInit+0x6c>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d10e      	bne.n	80012c0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012a2:	4b17      	ldr	r3, [pc, #92]	; (8001300 <HAL_TIM_Base_MspInit+0x70>)
 80012a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012a6:	4b16      	ldr	r3, [pc, #88]	; (8001300 <HAL_TIM_Base_MspInit+0x70>)
 80012a8:	2180      	movs	r1, #128	; 0x80
 80012aa:	0109      	lsls	r1, r1, #4
 80012ac:	430a      	orrs	r2, r1
 80012ae:	641a      	str	r2, [r3, #64]	; 0x40
 80012b0:	4b13      	ldr	r3, [pc, #76]	; (8001300 <HAL_TIM_Base_MspInit+0x70>)
 80012b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012b4:	2380      	movs	r3, #128	; 0x80
 80012b6:	011b      	lsls	r3, r3, #4
 80012b8:	4013      	ands	r3, r2
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80012be:	e018      	b.n	80012f2 <HAL_TIM_Base_MspInit+0x62>
  else if(htim_base->Instance==TIM3)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0f      	ldr	r2, [pc, #60]	; (8001304 <HAL_TIM_Base_MspInit+0x74>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d113      	bne.n	80012f2 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012ca:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <HAL_TIM_Base_MspInit+0x70>)
 80012cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <HAL_TIM_Base_MspInit+0x70>)
 80012d0:	2102      	movs	r1, #2
 80012d2:	430a      	orrs	r2, r1
 80012d4:	63da      	str	r2, [r3, #60]	; 0x3c
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <HAL_TIM_Base_MspInit+0x70>)
 80012d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012da:	2202      	movs	r2, #2
 80012dc:	4013      	ands	r3, r2
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	2010      	movs	r0, #16
 80012e8:	f001 f96c 	bl	80025c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012ec:	2010      	movs	r0, #16
 80012ee:	f001 f97e 	bl	80025ee <HAL_NVIC_EnableIRQ>
}
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	46bd      	mov	sp, r7
 80012f6:	b004      	add	sp, #16
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	40012c00 	.word	0x40012c00
 8001300:	40021000 	.word	0x40021000
 8001304:	40000400 	.word	0x40000400

08001308 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <HAL_TIM_PWM_MspInit+0x38>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d10d      	bne.n	8001336 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <HAL_TIM_PWM_MspInit+0x3c>)
 800131c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_TIM_PWM_MspInit+0x3c>)
 8001320:	2180      	movs	r1, #128	; 0x80
 8001322:	0249      	lsls	r1, r1, #9
 8001324:	430a      	orrs	r2, r1
 8001326:	641a      	str	r2, [r3, #64]	; 0x40
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_TIM_PWM_MspInit+0x3c>)
 800132a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	025b      	lsls	r3, r3, #9
 8001330:	4013      	ands	r3, r2
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	46bd      	mov	sp, r7
 800133a:	b004      	add	sp, #16
 800133c:	bd80      	pop	{r7, pc}
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	40014000 	.word	0x40014000
 8001344:	40021000 	.word	0x40021000

08001348 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001348:	b590      	push	{r4, r7, lr}
 800134a:	b08d      	sub	sp, #52	; 0x34
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	241c      	movs	r4, #28
 8001352:	193b      	adds	r3, r7, r4
 8001354:	0018      	movs	r0, r3
 8001356:	2314      	movs	r3, #20
 8001358:	001a      	movs	r2, r3
 800135a:	2100      	movs	r1, #0
 800135c:	f005 fab8 	bl	80068d0 <memset>
  if(htim->Instance==TIM1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a4c      	ldr	r2, [pc, #304]	; (8001498 <HAL_TIM_MspPostInit+0x150>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d169      	bne.n	800143e <HAL_TIM_MspPostInit+0xf6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800136a:	4b4c      	ldr	r3, [pc, #304]	; (800149c <HAL_TIM_MspPostInit+0x154>)
 800136c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800136e:	4b4b      	ldr	r3, [pc, #300]	; (800149c <HAL_TIM_MspPostInit+0x154>)
 8001370:	2104      	movs	r1, #4
 8001372:	430a      	orrs	r2, r1
 8001374:	635a      	str	r2, [r3, #52]	; 0x34
 8001376:	4b49      	ldr	r3, [pc, #292]	; (800149c <HAL_TIM_MspPostInit+0x154>)
 8001378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800137a:	2204      	movs	r2, #4
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
 8001380:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001382:	4b46      	ldr	r3, [pc, #280]	; (800149c <HAL_TIM_MspPostInit+0x154>)
 8001384:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001386:	4b45      	ldr	r3, [pc, #276]	; (800149c <HAL_TIM_MspPostInit+0x154>)
 8001388:	2101      	movs	r1, #1
 800138a:	430a      	orrs	r2, r1
 800138c:	635a      	str	r2, [r3, #52]	; 0x34
 800138e:	4b43      	ldr	r3, [pc, #268]	; (800149c <HAL_TIM_MspPostInit+0x154>)
 8001390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001392:	2201      	movs	r2, #1
 8001394:	4013      	ands	r3, r2
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139a:	4b40      	ldr	r3, [pc, #256]	; (800149c <HAL_TIM_MspPostInit+0x154>)
 800139c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800139e:	4b3f      	ldr	r3, [pc, #252]	; (800149c <HAL_TIM_MspPostInit+0x154>)
 80013a0:	2102      	movs	r1, #2
 80013a2:	430a      	orrs	r2, r1
 80013a4:	635a      	str	r2, [r3, #52]	; 0x34
 80013a6:	4b3d      	ldr	r3, [pc, #244]	; (800149c <HAL_TIM_MspPostInit+0x154>)
 80013a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013aa:	2202      	movs	r2, #2
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]
    PC11     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    PC9     ------> TIM1_CH2
    PB6     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Motor2b_PWM_Pin|Motor1b_PWM_Pin;
 80013b2:	193b      	adds	r3, r7, r4
 80013b4:	22a0      	movs	r2, #160	; 0xa0
 80013b6:	0112      	lsls	r2, r2, #4
 80013b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	193b      	adds	r3, r7, r4
 80013bc:	2202      	movs	r2, #2
 80013be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	193b      	adds	r3, r7, r4
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	193b      	adds	r3, r7, r4
 80013c8:	2200      	movs	r2, #0
 80013ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80013cc:	193b      	adds	r3, r7, r4
 80013ce:	2202      	movs	r2, #2
 80013d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d2:	193b      	adds	r3, r7, r4
 80013d4:	4a32      	ldr	r2, [pc, #200]	; (80014a0 <HAL_TIM_MspPostInit+0x158>)
 80013d6:	0019      	movs	r1, r3
 80013d8:	0010      	movs	r0, r2
 80013da:	f001 fbed 	bl	8002bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Motor1a_PWM_Pin;
 80013de:	0021      	movs	r1, r4
 80013e0:	187b      	adds	r3, r7, r1
 80013e2:	2280      	movs	r2, #128	; 0x80
 80013e4:	0052      	lsls	r2, r2, #1
 80013e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	000c      	movs	r4, r1
 80013ea:	193b      	adds	r3, r7, r4
 80013ec:	2202      	movs	r2, #2
 80013ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	193b      	adds	r3, r7, r4
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f6:	193b      	adds	r3, r7, r4
 80013f8:	2200      	movs	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80013fc:	193b      	adds	r3, r7, r4
 80013fe:	2202      	movs	r2, #2
 8001400:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Motor1a_PWM_GPIO_Port, &GPIO_InitStruct);
 8001402:	193a      	adds	r2, r7, r4
 8001404:	23a0      	movs	r3, #160	; 0xa0
 8001406:	05db      	lsls	r3, r3, #23
 8001408:	0011      	movs	r1, r2
 800140a:	0018      	movs	r0, r3
 800140c:	f001 fbd4 	bl	8002bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Motor2a_PWM_Pin;
 8001410:	0021      	movs	r1, r4
 8001412:	187b      	adds	r3, r7, r1
 8001414:	2240      	movs	r2, #64	; 0x40
 8001416:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	187b      	adds	r3, r7, r1
 800141a:	2202      	movs	r2, #2
 800141c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	187b      	adds	r3, r7, r1
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	187b      	adds	r3, r7, r1
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800142a:	187b      	adds	r3, r7, r1
 800142c:	2201      	movs	r2, #1
 800142e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Motor2a_PWM_GPIO_Port, &GPIO_InitStruct);
 8001430:	187b      	adds	r3, r7, r1
 8001432:	4a1c      	ldr	r2, [pc, #112]	; (80014a4 <HAL_TIM_MspPostInit+0x15c>)
 8001434:	0019      	movs	r1, r3
 8001436:	0010      	movs	r0, r2
 8001438:	f001 fbbe 	bl	8002bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800143c:	e027      	b.n	800148e <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM15)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a19      	ldr	r2, [pc, #100]	; (80014a8 <HAL_TIM_MspPostInit+0x160>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d122      	bne.n	800148e <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001448:	4b14      	ldr	r3, [pc, #80]	; (800149c <HAL_TIM_MspPostInit+0x154>)
 800144a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800144c:	4b13      	ldr	r3, [pc, #76]	; (800149c <HAL_TIM_MspPostInit+0x154>)
 800144e:	2102      	movs	r1, #2
 8001450:	430a      	orrs	r2, r1
 8001452:	635a      	str	r2, [r3, #52]	; 0x34
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <HAL_TIM_MspPostInit+0x154>)
 8001456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001458:	2202      	movs	r2, #2
 800145a:	4013      	ands	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO1_Pin|SERVO2_Pin;
 8001460:	211c      	movs	r1, #28
 8001462:	187b      	adds	r3, r7, r1
 8001464:	22c0      	movs	r2, #192	; 0xc0
 8001466:	0212      	lsls	r2, r2, #8
 8001468:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	187b      	adds	r3, r7, r1
 800146c:	2202      	movs	r2, #2
 800146e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	187b      	adds	r3, r7, r1
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	187b      	adds	r3, r7, r1
 8001478:	2200      	movs	r2, #0
 800147a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 800147c:	187b      	adds	r3, r7, r1
 800147e:	2205      	movs	r2, #5
 8001480:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001482:	187b      	adds	r3, r7, r1
 8001484:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <HAL_TIM_MspPostInit+0x15c>)
 8001486:	0019      	movs	r1, r3
 8001488:	0010      	movs	r0, r2
 800148a:	f001 fb95 	bl	8002bb8 <HAL_GPIO_Init>
}
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	46bd      	mov	sp, r7
 8001492:	b00d      	add	sp, #52	; 0x34
 8001494:	bd90      	pop	{r4, r7, pc}
 8001496:	46c0      	nop			; (mov r8, r8)
 8001498:	40012c00 	.word	0x40012c00
 800149c:	40021000 	.word	0x40021000
 80014a0:	50000800 	.word	0x50000800
 80014a4:	50000400 	.word	0x50000400
 80014a8:	40014000 	.word	0x40014000

080014ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <NMI_Handler+0x4>

080014b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b6:	e7fe      	b.n	80014b6 <HardFault_Handler+0x4>

080014b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80014bc:	46c0      	nop			; (mov r8, r8)
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d0:	f000 f90a 	bl	80016e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d4:	46c0      	nop			; (mov r8, r8)
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_BOOST_Pin);
 80014de:	2010      	movs	r0, #16
 80014e0:	f001 fcec 	bl	8002ebc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT_ACCEL_Pin);
 80014e4:	2020      	movs	r0, #32
 80014e6:	f001 fce9 	bl	8002ebc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Hall1_1_Pin);
 80014ea:	2040      	movs	r0, #64	; 0x40
 80014ec:	f001 fce6 	bl	8002ebc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Hall1_2_Pin);
 80014f0:	2080      	movs	r0, #128	; 0x80
 80014f2:	f001 fce3 	bl	8002ebc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Hall2_1_Pin);
 80014f6:	2380      	movs	r3, #128	; 0x80
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	0018      	movs	r0, r3
 80014fc:	f001 fcde 	bl	8002ebc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Hall2_2_Pin);
 8001500:	2380      	movs	r3, #128	; 0x80
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	0018      	movs	r0, r3
 8001506:	f001 fcd9 	bl	8002ebc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ECHO_SONAR_Pin);
 800150a:	2380      	movs	r3, #128	; 0x80
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	0018      	movs	r0, r3
 8001510:	f001 fcd4 	bl	8002ebc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ON_PRESS_Pin);
 8001514:	2380      	movs	r3, #128	; 0x80
 8001516:	021b      	lsls	r3, r3, #8
 8001518:	0018      	movs	r0, r3
 800151a:	f001 fccf 	bl	8002ebc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <DMA1_Channel1_IRQHandler+0x14>)
 800152a:	0018      	movs	r0, r3
 800152c:	f001 f9f6 	bl	800291c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001530:	46c0      	nop			; (mov r8, r8)
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	2000008c 	.word	0x2000008c

0800153c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001540:	4b03      	ldr	r3, [pc, #12]	; (8001550 <TIM3_IRQHandler+0x14>)
 8001542:	0018      	movs	r0, r3
 8001544:	f004 f97c 	bl	8005840 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001548:	46c0      	nop			; (mov r8, r8)
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	2000023c 	.word	0x2000023c

08001554 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <I2C1_IRQHandler+0x2c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	699a      	ldr	r2, [r3, #24]
 800155e:	23e0      	movs	r3, #224	; 0xe0
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	4013      	ands	r3, r2
 8001564:	d004      	beq.n	8001570 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <I2C1_IRQHandler+0x2c>)
 8001568:	0018      	movs	r0, r3
 800156a:	f001 ff75 	bl	8003458 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800156e:	e003      	b.n	8001578 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8001570:	4b03      	ldr	r3, [pc, #12]	; (8001580 <I2C1_IRQHandler+0x2c>)
 8001572:	0018      	movs	r0, r3
 8001574:	f001 ff56 	bl	8003424 <HAL_I2C_EV_IRQHandler>
}
 8001578:	46c0      	nop			; (mov r8, r8)
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	200000e8 	.word	0x200000e8

08001584 <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 global interrupt.
  */
void I2C2_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <I2C2_IRQHandler+0x2c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	699a      	ldr	r2, [r3, #24]
 800158e:	23e0      	movs	r3, #224	; 0xe0
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	4013      	ands	r3, r2
 8001594:	d004      	beq.n	80015a0 <I2C2_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <I2C2_IRQHandler+0x2c>)
 8001598:	0018      	movs	r0, r3
 800159a:	f001 ff5d 	bl	8003458 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 800159e:	e003      	b.n	80015a8 <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <I2C2_IRQHandler+0x2c>)
 80015a2:	0018      	movs	r0, r3
 80015a4:	f001 ff3e 	bl	8003424 <HAL_I2C_EV_IRQHandler>
}
 80015a8:	46c0      	nop			; (mov r8, r8)
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	2000016c 	.word	0x2000016c

080015b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b8:	46c0      	nop			; (mov r8, r8)
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015c0:	480d      	ldr	r0, [pc, #52]	; (80015f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015c2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015c4:	f7ff fff6 	bl	80015b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015c8:	480c      	ldr	r0, [pc, #48]	; (80015fc <LoopForever+0x6>)
  ldr r1, =_edata
 80015ca:	490d      	ldr	r1, [pc, #52]	; (8001600 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015cc:	4a0d      	ldr	r2, [pc, #52]	; (8001604 <LoopForever+0xe>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d0:	e002      	b.n	80015d8 <LoopCopyDataInit>

080015d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d6:	3304      	adds	r3, #4

080015d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015dc:	d3f9      	bcc.n	80015d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015de:	4a0a      	ldr	r2, [pc, #40]	; (8001608 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015e0:	4c0a      	ldr	r4, [pc, #40]	; (800160c <LoopForever+0x16>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e4:	e001      	b.n	80015ea <LoopFillZerobss>

080015e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e8:	3204      	adds	r2, #4

080015ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ec:	d3fb      	bcc.n	80015e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015ee:	f005 f977 	bl	80068e0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80015f2:	f7fe ff7d 	bl	80004f0 <main>

080015f6 <LoopForever>:

LoopForever:
  b LoopForever
 80015f6:	e7fe      	b.n	80015f6 <LoopForever>
  ldr   r0, =_estack
 80015f8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80015fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001600:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001604:	08006a1c 	.word	0x08006a1c
  ldr r2, =_sbss
 8001608:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800160c:	20000330 	.word	0x20000330

08001610 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001610:	e7fe      	b.n	8001610 <ADC1_IRQHandler>
	...

08001614 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800161a:	1dfb      	adds	r3, r7, #7
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_Init+0x3c>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <HAL_Init+0x3c>)
 8001626:	2180      	movs	r1, #128	; 0x80
 8001628:	0049      	lsls	r1, r1, #1
 800162a:	430a      	orrs	r2, r1
 800162c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800162e:	2003      	movs	r0, #3
 8001630:	f000 f810 	bl	8001654 <HAL_InitTick>
 8001634:	1e03      	subs	r3, r0, #0
 8001636:	d003      	beq.n	8001640 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001638:	1dfb      	adds	r3, r7, #7
 800163a:	2201      	movs	r2, #1
 800163c:	701a      	strb	r2, [r3, #0]
 800163e:	e001      	b.n	8001644 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001640:	f7ff fca8 	bl	8000f94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001644:	1dfb      	adds	r3, r7, #7
 8001646:	781b      	ldrb	r3, [r3, #0]
}
 8001648:	0018      	movs	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	b002      	add	sp, #8
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40022000 	.word	0x40022000

08001654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001654:	b590      	push	{r4, r7, lr}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800165c:	230f      	movs	r3, #15
 800165e:	18fb      	adds	r3, r7, r3
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001664:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <HAL_InitTick+0x88>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d02b      	beq.n	80016c4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800166c:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <HAL_InitTick+0x8c>)
 800166e:	681c      	ldr	r4, [r3, #0]
 8001670:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <HAL_InitTick+0x88>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	0019      	movs	r1, r3
 8001676:	23fa      	movs	r3, #250	; 0xfa
 8001678:	0098      	lsls	r0, r3, #2
 800167a:	f7fe fd41 	bl	8000100 <__udivsi3>
 800167e:	0003      	movs	r3, r0
 8001680:	0019      	movs	r1, r3
 8001682:	0020      	movs	r0, r4
 8001684:	f7fe fd3c 	bl	8000100 <__udivsi3>
 8001688:	0003      	movs	r3, r0
 800168a:	0018      	movs	r0, r3
 800168c:	f000 ffbf 	bl	800260e <HAL_SYSTICK_Config>
 8001690:	1e03      	subs	r3, r0, #0
 8001692:	d112      	bne.n	80016ba <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b03      	cmp	r3, #3
 8001698:	d80a      	bhi.n	80016b0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	2301      	movs	r3, #1
 800169e:	425b      	negs	r3, r3
 80016a0:	2200      	movs	r2, #0
 80016a2:	0018      	movs	r0, r3
 80016a4:	f000 ff8e 	bl	80025c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016a8:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <HAL_InitTick+0x90>)
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	e00d      	b.n	80016cc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80016b0:	230f      	movs	r3, #15
 80016b2:	18fb      	adds	r3, r7, r3
 80016b4:	2201      	movs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]
 80016b8:	e008      	b.n	80016cc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016ba:	230f      	movs	r3, #15
 80016bc:	18fb      	adds	r3, r7, r3
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
 80016c2:	e003      	b.n	80016cc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016c4:	230f      	movs	r3, #15
 80016c6:	18fb      	adds	r3, r7, r3
 80016c8:	2201      	movs	r2, #1
 80016ca:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80016cc:	230f      	movs	r3, #15
 80016ce:	18fb      	adds	r3, r7, r3
 80016d0:	781b      	ldrb	r3, [r3, #0]
}
 80016d2:	0018      	movs	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b005      	add	sp, #20
 80016d8:	bd90      	pop	{r4, r7, pc}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	20000008 	.word	0x20000008
 80016e0:	20000000 	.word	0x20000000
 80016e4:	20000004 	.word	0x20000004

080016e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <HAL_IncTick+0x1c>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	001a      	movs	r2, r3
 80016f2:	4b05      	ldr	r3, [pc, #20]	; (8001708 <HAL_IncTick+0x20>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	18d2      	adds	r2, r2, r3
 80016f8:	4b03      	ldr	r3, [pc, #12]	; (8001708 <HAL_IncTick+0x20>)
 80016fa:	601a      	str	r2, [r3, #0]
}
 80016fc:	46c0      	nop			; (mov r8, r8)
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	20000008 	.word	0x20000008
 8001708:	2000032c 	.word	0x2000032c

0800170c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  return uwTick;
 8001710:	4b02      	ldr	r3, [pc, #8]	; (800171c <HAL_GetTick+0x10>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	0018      	movs	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	2000032c 	.word	0x2000032c

08001720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001728:	f7ff fff0 	bl	800170c <HAL_GetTick>
 800172c:	0003      	movs	r3, r0
 800172e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	3301      	adds	r3, #1
 8001738:	d005      	beq.n	8001746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800173a:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <HAL_Delay+0x44>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	001a      	movs	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	189b      	adds	r3, r3, r2
 8001744:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001746:	46c0      	nop			; (mov r8, r8)
 8001748:	f7ff ffe0 	bl	800170c <HAL_GetTick>
 800174c:	0002      	movs	r2, r0
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	429a      	cmp	r2, r3
 8001756:	d8f7      	bhi.n	8001748 <HAL_Delay+0x28>
  {
  }
}
 8001758:	46c0      	nop			; (mov r8, r8)
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	46bd      	mov	sp, r7
 800175e:	b004      	add	sp, #16
 8001760:	bd80      	pop	{r7, pc}
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	20000008 	.word	0x20000008

08001768 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a05      	ldr	r2, [pc, #20]	; (800178c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001778:	401a      	ands	r2, r3
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	431a      	orrs	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	601a      	str	r2, [r3, #0]
}
 8001782:	46c0      	nop			; (mov r8, r8)
 8001784:	46bd      	mov	sp, r7
 8001786:	b002      	add	sp, #8
 8001788:	bd80      	pop	{r7, pc}
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	fe3fffff 	.word	0xfe3fffff

08001790 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	23e0      	movs	r3, #224	; 0xe0
 800179e:	045b      	lsls	r3, r3, #17
 80017a0:	4013      	ands	r3, r2
}
 80017a2:	0018      	movs	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	b002      	add	sp, #8
 80017a8:	bd80      	pop	{r7, pc}

080017aa <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b084      	sub	sp, #16
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	60f8      	str	r0, [r7, #12]
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	2104      	movs	r1, #4
 80017be:	400a      	ands	r2, r1
 80017c0:	2107      	movs	r1, #7
 80017c2:	4091      	lsls	r1, r2
 80017c4:	000a      	movs	r2, r1
 80017c6:	43d2      	mvns	r2, r2
 80017c8:	401a      	ands	r2, r3
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	2104      	movs	r1, #4
 80017ce:	400b      	ands	r3, r1
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	4099      	lsls	r1, r3
 80017d4:	000b      	movs	r3, r1
 80017d6:	431a      	orrs	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80017dc:	46c0      	nop			; (mov r8, r8)
 80017de:	46bd      	mov	sp, r7
 80017e0:	b004      	add	sp, #16
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	2104      	movs	r1, #4
 80017f6:	400a      	ands	r2, r1
 80017f8:	2107      	movs	r1, #7
 80017fa:	4091      	lsls	r1, r2
 80017fc:	000a      	movs	r2, r1
 80017fe:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	2104      	movs	r1, #4
 8001804:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001806:	40da      	lsrs	r2, r3
 8001808:	0013      	movs	r3, r2
}
 800180a:	0018      	movs	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	b002      	add	sp, #8
 8001810:	bd80      	pop	{r7, pc}

08001812 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	23c0      	movs	r3, #192	; 0xc0
 8001820:	011b      	lsls	r3, r3, #4
 8001822:	4013      	ands	r3, r2
 8001824:	d101      	bne.n	800182a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001826:	2301      	movs	r3, #1
 8001828:	e000      	b.n	800182c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800182a:	2300      	movs	r3, #0
}
 800182c:	0018      	movs	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	b002      	add	sp, #8
 8001832:	bd80      	pop	{r7, pc}

08001834 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	211f      	movs	r1, #31
 8001848:	400a      	ands	r2, r1
 800184a:	210f      	movs	r1, #15
 800184c:	4091      	lsls	r1, r2
 800184e:	000a      	movs	r2, r1
 8001850:	43d2      	mvns	r2, r2
 8001852:	401a      	ands	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	0e9b      	lsrs	r3, r3, #26
 8001858:	210f      	movs	r1, #15
 800185a:	4019      	ands	r1, r3
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	201f      	movs	r0, #31
 8001860:	4003      	ands	r3, r0
 8001862:	4099      	lsls	r1, r3
 8001864:	000b      	movs	r3, r1
 8001866:	431a      	orrs	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800186c:	46c0      	nop			; (mov r8, r8)
 800186e:	46bd      	mov	sp, r7
 8001870:	b004      	add	sp, #16
 8001872:	bd80      	pop	{r7, pc}

08001874 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	035b      	lsls	r3, r3, #13
 8001886:	0b5b      	lsrs	r3, r3, #13
 8001888:	431a      	orrs	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	46bd      	mov	sp, r7
 8001892:	b002      	add	sp, #8
 8001894:	bd80      	pop	{r7, pc}

08001896 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
 800189e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	0352      	lsls	r2, r2, #13
 80018a8:	0b52      	lsrs	r2, r2, #13
 80018aa:	43d2      	mvns	r2, r2
 80018ac:	401a      	ands	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	46bd      	mov	sp, r7
 80018b6:	b002      	add	sp, #8
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	68ba      	ldr	r2, [r7, #8]
 80018ce:	0212      	lsls	r2, r2, #8
 80018d0:	43d2      	mvns	r2, r2
 80018d2:	401a      	ands	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	400b      	ands	r3, r1
 80018dc:	4904      	ldr	r1, [pc, #16]	; (80018f0 <LL_ADC_SetChannelSamplingTime+0x34>)
 80018de:	400b      	ands	r3, r1
 80018e0:	431a      	orrs	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	46bd      	mov	sp, r7
 80018ea:	b004      	add	sp, #16
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	07ffff00 	.word	0x07ffff00

080018f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	4a05      	ldr	r2, [pc, #20]	; (8001918 <LL_ADC_EnableInternalRegulator+0x24>)
 8001902:	4013      	ands	r3, r2
 8001904:	2280      	movs	r2, #128	; 0x80
 8001906:	0552      	lsls	r2, r2, #21
 8001908:	431a      	orrs	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	46bd      	mov	sp, r7
 8001912:	b002      	add	sp, #8
 8001914:	bd80      	pop	{r7, pc}
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	6fffffe8 	.word	0x6fffffe8

0800191c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	055b      	lsls	r3, r3, #21
 800192c:	401a      	ands	r2, r3
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	055b      	lsls	r3, r3, #21
 8001932:	429a      	cmp	r2, r3
 8001934:	d101      	bne.n	800193a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800193a:	2300      	movs	r3, #0
}
 800193c:	0018      	movs	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	b002      	add	sp, #8
 8001942:	bd80      	pop	{r7, pc}

08001944 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	4a04      	ldr	r2, [pc, #16]	; (8001964 <LL_ADC_Enable+0x20>)
 8001952:	4013      	ands	r3, r2
 8001954:	2201      	movs	r2, #1
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800195c:	46c0      	nop			; (mov r8, r8)
 800195e:	46bd      	mov	sp, r7
 8001960:	b002      	add	sp, #8
 8001962:	bd80      	pop	{r7, pc}
 8001964:	7fffffe8 	.word	0x7fffffe8

08001968 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	4a04      	ldr	r2, [pc, #16]	; (8001988 <LL_ADC_Disable+0x20>)
 8001976:	4013      	ands	r3, r2
 8001978:	2202      	movs	r2, #2
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001980:	46c0      	nop			; (mov r8, r8)
 8001982:	46bd      	mov	sp, r7
 8001984:	b002      	add	sp, #8
 8001986:	bd80      	pop	{r7, pc}
 8001988:	7fffffe8 	.word	0x7fffffe8

0800198c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2201      	movs	r2, #1
 800199a:	4013      	ands	r3, r2
 800199c:	2b01      	cmp	r3, #1
 800199e:	d101      	bne.n	80019a4 <LL_ADC_IsEnabled+0x18>
 80019a0:	2301      	movs	r3, #1
 80019a2:	e000      	b.n	80019a6 <LL_ADC_IsEnabled+0x1a>
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	0018      	movs	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	b002      	add	sp, #8
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <LL_ADC_REG_StartConversion+0x20>)
 80019be:	4013      	ands	r3, r2
 80019c0:	2204      	movs	r2, #4
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80019c8:	46c0      	nop			; (mov r8, r8)
 80019ca:	46bd      	mov	sp, r7
 80019cc:	b002      	add	sp, #8
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	7fffffe8 	.word	0x7fffffe8

080019d4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	2204      	movs	r2, #4
 80019e2:	4013      	ands	r3, r2
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d101      	bne.n	80019ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80019e8:	2301      	movs	r3, #1
 80019ea:	e000      	b.n	80019ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	0018      	movs	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	b002      	add	sp, #8
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a00:	231f      	movs	r3, #31
 8001a02:	18fb      	adds	r3, r7, r3
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e17f      	b.n	8001d1e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10a      	bne.n	8001a3c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	0018      	movs	r0, r3
 8001a2a:	f7ff fad7 	bl	8000fdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2254      	movs	r2, #84	; 0x54
 8001a38:	2100      	movs	r1, #0
 8001a3a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	0018      	movs	r0, r3
 8001a42:	f7ff ff6b 	bl	800191c <LL_ADC_IsInternalRegulatorEnabled>
 8001a46:	1e03      	subs	r3, r0, #0
 8001a48:	d115      	bne.n	8001a76 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f7ff ff50 	bl	80018f4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a54:	4bb4      	ldr	r3, [pc, #720]	; (8001d28 <HAL_ADC_Init+0x330>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	49b4      	ldr	r1, [pc, #720]	; (8001d2c <HAL_ADC_Init+0x334>)
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f7fe fb50 	bl	8000100 <__udivsi3>
 8001a60:	0003      	movs	r3, r0
 8001a62:	3301      	adds	r3, #1
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a68:	e002      	b.n	8001a70 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f9      	bne.n	8001a6a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f7ff ff4e 	bl	800191c <LL_ADC_IsInternalRegulatorEnabled>
 8001a80:	1e03      	subs	r3, r0, #0
 8001a82:	d10f      	bne.n	8001aa4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a88:	2210      	movs	r2, #16
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a94:	2201      	movs	r2, #1
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001a9c:	231f      	movs	r3, #31
 8001a9e:	18fb      	adds	r3, r7, r3
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f7ff ff93 	bl	80019d4 <LL_ADC_REG_IsConversionOngoing>
 8001aae:	0003      	movs	r3, r0
 8001ab0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab6:	2210      	movs	r2, #16
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d000      	beq.n	8001abe <HAL_ADC_Init+0xc6>
 8001abc:	e122      	b.n	8001d04 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d000      	beq.n	8001ac6 <HAL_ADC_Init+0xce>
 8001ac4:	e11e      	b.n	8001d04 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aca:	4a99      	ldr	r2, [pc, #612]	; (8001d30 <HAL_ADC_Init+0x338>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	2202      	movs	r2, #2
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	0018      	movs	r0, r3
 8001adc:	f7ff ff56 	bl	800198c <LL_ADC_IsEnabled>
 8001ae0:	1e03      	subs	r3, r0, #0
 8001ae2:	d000      	beq.n	8001ae6 <HAL_ADC_Init+0xee>
 8001ae4:	e0ad      	b.n	8001c42 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	7e1b      	ldrb	r3, [r3, #24]
 8001aee:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001af0:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	7e5b      	ldrb	r3, [r3, #25]
 8001af6:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001af8:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	7e9b      	ldrb	r3, [r3, #26]
 8001afe:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001b00:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d002      	beq.n	8001b10 <HAL_ADC_Init+0x118>
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	015b      	lsls	r3, r3, #5
 8001b0e:	e000      	b.n	8001b12 <HAL_ADC_Init+0x11a>
 8001b10:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001b12:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001b18:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	da04      	bge.n	8001b2c <HAL_ADC_Init+0x134>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	085b      	lsrs	r3, r3, #1
 8001b2a:	e001      	b.n	8001b30 <HAL_ADC_Init+0x138>
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001b30:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	212c      	movs	r1, #44	; 0x2c
 8001b36:	5c5b      	ldrb	r3, [r3, r1]
 8001b38:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001b3a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2220      	movs	r2, #32
 8001b46:	5c9b      	ldrb	r3, [r3, r2]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d115      	bne.n	8001b78 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	7e9b      	ldrb	r3, [r3, #26]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d105      	bne.n	8001b60 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	2280      	movs	r2, #128	; 0x80
 8001b58:	0252      	lsls	r2, r2, #9
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
 8001b5e:	e00b      	b.n	8001b78 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b64:	2220      	movs	r2, #32
 8001b66:	431a      	orrs	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b70:	2201      	movs	r2, #1
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00a      	beq.n	8001b96 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b84:	23e0      	movs	r3, #224	; 0xe0
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	4a65      	ldr	r2, [pc, #404]	; (8001d34 <HAL_ADC_Init+0x33c>)
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	0019      	movs	r1, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	0f9b      	lsrs	r3, r3, #30
 8001bb2:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	223c      	movs	r2, #60	; 0x3c
 8001bc4:	5c9b      	ldrb	r3, [r3, r2]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d111      	bne.n	8001bee <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	0f9b      	lsrs	r3, r3, #30
 8001bd0:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001bd6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001bdc:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001be2:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	2201      	movs	r2, #1
 8001bea:	4313      	orrs	r3, r2
 8001bec:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	4a50      	ldr	r2, [pc, #320]	; (8001d38 <HAL_ADC_Init+0x340>)
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	0019      	movs	r1, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	23c0      	movs	r3, #192	; 0xc0
 8001c0a:	061b      	lsls	r3, r3, #24
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d018      	beq.n	8001c42 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	05db      	lsls	r3, r3, #23
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d012      	beq.n	8001c42 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	061b      	lsls	r3, r3, #24
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d00c      	beq.n	8001c42 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001c28:	4b44      	ldr	r3, [pc, #272]	; (8001d3c <HAL_ADC_Init+0x344>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a44      	ldr	r2, [pc, #272]	; (8001d40 <HAL_ADC_Init+0x348>)
 8001c2e:	4013      	ands	r3, r2
 8001c30:	0019      	movs	r1, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	23f0      	movs	r3, #240	; 0xf0
 8001c38:	039b      	lsls	r3, r3, #14
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	4b3f      	ldr	r3, [pc, #252]	; (8001d3c <HAL_ADC_Init+0x344>)
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c4a:	001a      	movs	r2, r3
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	f7ff fdac 	bl	80017aa <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6818      	ldr	r0, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c5a:	493a      	ldr	r1, [pc, #232]	; (8001d44 <HAL_ADC_Init+0x34c>)
 8001c5c:	001a      	movs	r2, r3
 8001c5e:	f7ff fda4 	bl	80017aa <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d109      	bne.n	8001c7e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2110      	movs	r1, #16
 8001c76:	4249      	negs	r1, r1
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	629a      	str	r2, [r3, #40]	; 0x28
 8001c7c:	e018      	b.n	8001cb0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	691a      	ldr	r2, [r3, #16]
 8001c82:	2380      	movs	r3, #128	; 0x80
 8001c84:	039b      	lsls	r3, r3, #14
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d112      	bne.n	8001cb0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	3b01      	subs	r3, #1
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	221c      	movs	r2, #28
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	2210      	movs	r2, #16
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	409a      	lsls	r2, r3
 8001ca2:	0011      	movs	r1, r2
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	f7ff fd94 	bl	80017e4 <LL_ADC_GetSamplingTimeCommonChannels>
 8001cbc:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d10b      	bne.n	8001cde <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	4393      	bics	r3, r2
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001cdc:	e01c      	b.n	8001d18 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce2:	2212      	movs	r2, #18
 8001ce4:	4393      	bics	r3, r2
 8001ce6:	2210      	movs	r2, #16
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001cfa:	231f      	movs	r3, #31
 8001cfc:	18fb      	adds	r3, r7, r3
 8001cfe:	2201      	movs	r2, #1
 8001d00:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001d02:	e009      	b.n	8001d18 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d08:	2210      	movs	r2, #16
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d10:	231f      	movs	r3, #31
 8001d12:	18fb      	adds	r3, r7, r3
 8001d14:	2201      	movs	r2, #1
 8001d16:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001d18:	231f      	movs	r3, #31
 8001d1a:	18fb      	adds	r3, r7, r3
 8001d1c:	781b      	ldrb	r3, [r3, #0]
}
 8001d1e:	0018      	movs	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	b008      	add	sp, #32
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	20000000 	.word	0x20000000
 8001d2c:	00030d40 	.word	0x00030d40
 8001d30:	fffffefd 	.word	0xfffffefd
 8001d34:	fffe0201 	.word	0xfffe0201
 8001d38:	1ffffc02 	.word	0x1ffffc02
 8001d3c:	40012708 	.word	0x40012708
 8001d40:	ffc3ffff 	.word	0xffc3ffff
 8001d44:	07ffff04 	.word	0x07ffff04

08001d48 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001d48:	b5b0      	push	{r4, r5, r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f7ff fe3b 	bl	80019d4 <LL_ADC_REG_IsConversionOngoing>
 8001d5e:	1e03      	subs	r3, r0, #0
 8001d60:	d16c      	bne.n	8001e3c <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2254      	movs	r2, #84	; 0x54
 8001d66:	5c9b      	ldrb	r3, [r3, r2]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d101      	bne.n	8001d70 <HAL_ADC_Start_DMA+0x28>
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	e06c      	b.n	8001e4a <HAL_ADC_Start_DMA+0x102>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2254      	movs	r2, #84	; 0x54
 8001d74:	2101      	movs	r1, #1
 8001d76:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	4013      	ands	r3, r2
 8001d82:	d113      	bne.n	8001dac <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f7ff fdff 	bl	800198c <LL_ADC_IsEnabled>
 8001d8e:	1e03      	subs	r3, r0, #0
 8001d90:	d004      	beq.n	8001d9c <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	0018      	movs	r0, r3
 8001d98:	f7ff fde6 	bl	8001968 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68da      	ldr	r2, [r3, #12]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2101      	movs	r1, #1
 8001da8:	430a      	orrs	r2, r1
 8001daa:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001dac:	2517      	movs	r5, #23
 8001dae:	197c      	adds	r4, r7, r5
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	0018      	movs	r0, r3
 8001db4:	f000 fa46 	bl	8002244 <ADC_Enable>
 8001db8:	0003      	movs	r3, r0
 8001dba:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001dbc:	002c      	movs	r4, r5
 8001dbe:	193b      	adds	r3, r7, r4
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d13e      	bne.n	8001e44 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dca:	4a22      	ldr	r2, [pc, #136]	; (8001e54 <HAL_ADC_Start_DMA+0x10c>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	2280      	movs	r2, #128	; 0x80
 8001dd0:	0052      	lsls	r2, r2, #1
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001de2:	4a1d      	ldr	r2, [pc, #116]	; (8001e58 <HAL_ADC_Start_DMA+0x110>)
 8001de4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dea:	4a1c      	ldr	r2, [pc, #112]	; (8001e5c <HAL_ADC_Start_DMA+0x114>)
 8001dec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001df2:	4a1b      	ldr	r2, [pc, #108]	; (8001e60 <HAL_ADC_Start_DMA+0x118>)
 8001df4:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	221c      	movs	r2, #28
 8001dfc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2254      	movs	r2, #84	; 0x54
 8001e02:	2100      	movs	r1, #0
 8001e04:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2110      	movs	r1, #16
 8001e12:	430a      	orrs	r2, r1
 8001e14:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	3340      	adds	r3, #64	; 0x40
 8001e20:	0019      	movs	r1, r3
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	193c      	adds	r4, r7, r4
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f000 fc88 	bl	800273c <HAL_DMA_Start_IT>
 8001e2c:	0003      	movs	r3, r0
 8001e2e:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	0018      	movs	r0, r3
 8001e36:	f7ff fdbb 	bl	80019b0 <LL_ADC_REG_StartConversion>
 8001e3a:	e003      	b.n	8001e44 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e3c:	2317      	movs	r3, #23
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	2202      	movs	r2, #2
 8001e42:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001e44:	2317      	movs	r3, #23
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	781b      	ldrb	r3, [r3, #0]
}
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	b006      	add	sp, #24
 8001e50:	bdb0      	pop	{r4, r5, r7, pc}
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	fffff0fe 	.word	0xfffff0fe
 8001e58:	08002351 	.word	0x08002351
 8001e5c:	08002419 	.word	0x08002419
 8001e60:	08002437 	.word	0x08002437

08001e64 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001e6c:	46c0      	nop			; (mov r8, r8)
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	b002      	add	sp, #8
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e7c:	46c0      	nop			; (mov r8, r8)
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b002      	add	sp, #8
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e8c:	46c0      	nop			; (mov r8, r8)
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	b002      	add	sp, #8
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e9e:	2317      	movs	r3, #23
 8001ea0:	18fb      	adds	r3, r7, r3
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2254      	movs	r2, #84	; 0x54
 8001eae:	5c9b      	ldrb	r3, [r3, r2]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d101      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x24>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e1c0      	b.n	800223a <HAL_ADC_ConfigChannel+0x3a6>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2254      	movs	r2, #84	; 0x54
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	f7ff fd85 	bl	80019d4 <LL_ADC_REG_IsConversionOngoing>
 8001eca:	1e03      	subs	r3, r0, #0
 8001ecc:	d000      	beq.n	8001ed0 <HAL_ADC_ConfigChannel+0x3c>
 8001ece:	e1a3      	b.n	8002218 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d100      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x46>
 8001ed8:	e143      	b.n	8002162 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691a      	ldr	r2, [r3, #16]
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	061b      	lsls	r3, r3, #24
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d004      	beq.n	8001ef0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001eea:	4ac1      	ldr	r2, [pc, #772]	; (80021f0 <HAL_ADC_ConfigChannel+0x35c>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d108      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	0019      	movs	r1, r3
 8001efa:	0010      	movs	r0, r2
 8001efc:	f7ff fcba 	bl	8001874 <LL_ADC_REG_SetSequencerChAdd>
 8001f00:	e0c9      	b.n	8002096 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	211f      	movs	r1, #31
 8001f0c:	400b      	ands	r3, r1
 8001f0e:	210f      	movs	r1, #15
 8001f10:	4099      	lsls	r1, r3
 8001f12:	000b      	movs	r3, r1
 8001f14:	43db      	mvns	r3, r3
 8001f16:	4013      	ands	r3, r2
 8001f18:	0019      	movs	r1, r3
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	035b      	lsls	r3, r3, #13
 8001f20:	0b5b      	lsrs	r3, r3, #13
 8001f22:	d105      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x9c>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	0e9b      	lsrs	r3, r3, #26
 8001f2a:	221f      	movs	r2, #31
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	e098      	b.n	8002062 <HAL_ADC_ConfigChannel+0x1ce>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2201      	movs	r2, #1
 8001f36:	4013      	ands	r3, r2
 8001f38:	d000      	beq.n	8001f3c <HAL_ADC_ConfigChannel+0xa8>
 8001f3a:	e091      	b.n	8002060 <HAL_ADC_ConfigChannel+0x1cc>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2202      	movs	r2, #2
 8001f42:	4013      	ands	r3, r2
 8001f44:	d000      	beq.n	8001f48 <HAL_ADC_ConfigChannel+0xb4>
 8001f46:	e089      	b.n	800205c <HAL_ADC_ConfigChannel+0x1c8>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2204      	movs	r2, #4
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d000      	beq.n	8001f54 <HAL_ADC_ConfigChannel+0xc0>
 8001f52:	e081      	b.n	8002058 <HAL_ADC_ConfigChannel+0x1c4>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2208      	movs	r2, #8
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	d000      	beq.n	8001f60 <HAL_ADC_ConfigChannel+0xcc>
 8001f5e:	e079      	b.n	8002054 <HAL_ADC_ConfigChannel+0x1c0>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2210      	movs	r2, #16
 8001f66:	4013      	ands	r3, r2
 8001f68:	d000      	beq.n	8001f6c <HAL_ADC_ConfigChannel+0xd8>
 8001f6a:	e071      	b.n	8002050 <HAL_ADC_ConfigChannel+0x1bc>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2220      	movs	r2, #32
 8001f72:	4013      	ands	r3, r2
 8001f74:	d000      	beq.n	8001f78 <HAL_ADC_ConfigChannel+0xe4>
 8001f76:	e069      	b.n	800204c <HAL_ADC_ConfigChannel+0x1b8>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2240      	movs	r2, #64	; 0x40
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d000      	beq.n	8001f84 <HAL_ADC_ConfigChannel+0xf0>
 8001f82:	e061      	b.n	8002048 <HAL_ADC_ConfigChannel+0x1b4>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2280      	movs	r2, #128	; 0x80
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d000      	beq.n	8001f90 <HAL_ADC_ConfigChannel+0xfc>
 8001f8e:	e059      	b.n	8002044 <HAL_ADC_ConfigChannel+0x1b0>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	2380      	movs	r3, #128	; 0x80
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d151      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x1ac>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d149      	bne.n	800203c <HAL_ADC_ConfigChannel+0x1a8>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	2380      	movs	r3, #128	; 0x80
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d141      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x1a4>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	2380      	movs	r3, #128	; 0x80
 8001fba:	011b      	lsls	r3, r3, #4
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	d139      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x1a0>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	2380      	movs	r3, #128	; 0x80
 8001fc6:	015b      	lsls	r3, r3, #5
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d131      	bne.n	8002030 <HAL_ADC_ConfigChannel+0x19c>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	2380      	movs	r3, #128	; 0x80
 8001fd2:	019b      	lsls	r3, r3, #6
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d129      	bne.n	800202c <HAL_ADC_ConfigChannel+0x198>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	2380      	movs	r3, #128	; 0x80
 8001fde:	01db      	lsls	r3, r3, #7
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d121      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x194>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	2380      	movs	r3, #128	; 0x80
 8001fea:	021b      	lsls	r3, r3, #8
 8001fec:	4013      	ands	r3, r2
 8001fee:	d119      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x190>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	2380      	movs	r3, #128	; 0x80
 8001ff6:	025b      	lsls	r3, r3, #9
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d111      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x18c>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	2380      	movs	r3, #128	; 0x80
 8002002:	029b      	lsls	r3, r3, #10
 8002004:	4013      	ands	r3, r2
 8002006:	d109      	bne.n	800201c <HAL_ADC_ConfigChannel+0x188>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	2380      	movs	r3, #128	; 0x80
 800200e:	02db      	lsls	r3, r3, #11
 8002010:	4013      	ands	r3, r2
 8002012:	d001      	beq.n	8002018 <HAL_ADC_ConfigChannel+0x184>
 8002014:	2312      	movs	r3, #18
 8002016:	e024      	b.n	8002062 <HAL_ADC_ConfigChannel+0x1ce>
 8002018:	2300      	movs	r3, #0
 800201a:	e022      	b.n	8002062 <HAL_ADC_ConfigChannel+0x1ce>
 800201c:	2311      	movs	r3, #17
 800201e:	e020      	b.n	8002062 <HAL_ADC_ConfigChannel+0x1ce>
 8002020:	2310      	movs	r3, #16
 8002022:	e01e      	b.n	8002062 <HAL_ADC_ConfigChannel+0x1ce>
 8002024:	230f      	movs	r3, #15
 8002026:	e01c      	b.n	8002062 <HAL_ADC_ConfigChannel+0x1ce>
 8002028:	230e      	movs	r3, #14
 800202a:	e01a      	b.n	8002062 <HAL_ADC_ConfigChannel+0x1ce>
 800202c:	230d      	movs	r3, #13
 800202e:	e018      	b.n	8002062 <HAL_ADC_ConfigChannel+0x1ce>
 8002030:	230c      	movs	r3, #12
 8002032:	e016      	b.n	8002062 <HAL_ADC_ConfigChannel+0x1ce>
 8002034:	230b      	movs	r3, #11
 8002036:	e014      	b.n	8002062 <HAL_ADC_ConfigChannel+0x1ce>
 8002038:	230a      	movs	r3, #10
 800203a:	e012      	b.n	8002062 <HAL_ADC_ConfigChannel+0x1ce>
 800203c:	2309      	movs	r3, #9
 800203e:	e010      	b.n	8002062 <HAL_ADC_ConfigChannel+0x1ce>
 8002040:	2308      	movs	r3, #8
 8002042:	e00e      	b.n	8002062 <HAL_ADC_ConfigChannel+0x1ce>
 8002044:	2307      	movs	r3, #7
 8002046:	e00c      	b.n	8002062 <HAL_ADC_ConfigChannel+0x1ce>
 8002048:	2306      	movs	r3, #6
 800204a:	e00a      	b.n	8002062 <HAL_ADC_ConfigChannel+0x1ce>
 800204c:	2305      	movs	r3, #5
 800204e:	e008      	b.n	8002062 <HAL_ADC_ConfigChannel+0x1ce>
 8002050:	2304      	movs	r3, #4
 8002052:	e006      	b.n	8002062 <HAL_ADC_ConfigChannel+0x1ce>
 8002054:	2303      	movs	r3, #3
 8002056:	e004      	b.n	8002062 <HAL_ADC_ConfigChannel+0x1ce>
 8002058:	2302      	movs	r3, #2
 800205a:	e002      	b.n	8002062 <HAL_ADC_ConfigChannel+0x1ce>
 800205c:	2301      	movs	r3, #1
 800205e:	e000      	b.n	8002062 <HAL_ADC_ConfigChannel+0x1ce>
 8002060:	2300      	movs	r3, #0
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	6852      	ldr	r2, [r2, #4]
 8002066:	201f      	movs	r0, #31
 8002068:	4002      	ands	r2, r0
 800206a:	4093      	lsls	r3, r2
 800206c:	000a      	movs	r2, r1
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	089b      	lsrs	r3, r3, #2
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	429a      	cmp	r2, r3
 8002082:	d808      	bhi.n	8002096 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	6859      	ldr	r1, [r3, #4]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	001a      	movs	r2, r3
 8002092:	f7ff fbcf 	bl	8001834 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6818      	ldr	r0, [r3, #0]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	6819      	ldr	r1, [r3, #0]
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	001a      	movs	r2, r3
 80020a4:	f7ff fc0a 	bl	80018bc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	db00      	blt.n	80020b2 <HAL_ADC_ConfigChannel+0x21e>
 80020b0:	e0bc      	b.n	800222c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020b2:	4b50      	ldr	r3, [pc, #320]	; (80021f4 <HAL_ADC_ConfigChannel+0x360>)
 80020b4:	0018      	movs	r0, r3
 80020b6:	f7ff fb6b 	bl	8001790 <LL_ADC_GetCommonPathInternalCh>
 80020ba:	0003      	movs	r3, r0
 80020bc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a4d      	ldr	r2, [pc, #308]	; (80021f8 <HAL_ADC_ConfigChannel+0x364>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d122      	bne.n	800210e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	2380      	movs	r3, #128	; 0x80
 80020cc:	041b      	lsls	r3, r3, #16
 80020ce:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80020d0:	d11d      	bne.n	800210e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	2280      	movs	r2, #128	; 0x80
 80020d6:	0412      	lsls	r2, r2, #16
 80020d8:	4313      	orrs	r3, r2
 80020da:	4a46      	ldr	r2, [pc, #280]	; (80021f4 <HAL_ADC_ConfigChannel+0x360>)
 80020dc:	0019      	movs	r1, r3
 80020de:	0010      	movs	r0, r2
 80020e0:	f7ff fb42 	bl	8001768 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020e4:	4b45      	ldr	r3, [pc, #276]	; (80021fc <HAL_ADC_ConfigChannel+0x368>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4945      	ldr	r1, [pc, #276]	; (8002200 <HAL_ADC_ConfigChannel+0x36c>)
 80020ea:	0018      	movs	r0, r3
 80020ec:	f7fe f808 	bl	8000100 <__udivsi3>
 80020f0:	0003      	movs	r3, r0
 80020f2:	1c5a      	adds	r2, r3, #1
 80020f4:	0013      	movs	r3, r2
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	189b      	adds	r3, r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80020fe:	e002      	b.n	8002106 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	3b01      	subs	r3, #1
 8002104:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1f9      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800210c:	e08e      	b.n	800222c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a3c      	ldr	r2, [pc, #240]	; (8002204 <HAL_ADC_ConfigChannel+0x370>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d10e      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	2380      	movs	r3, #128	; 0x80
 800211c:	045b      	lsls	r3, r3, #17
 800211e:	4013      	ands	r3, r2
 8002120:	d109      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	2280      	movs	r2, #128	; 0x80
 8002126:	0452      	lsls	r2, r2, #17
 8002128:	4313      	orrs	r3, r2
 800212a:	4a32      	ldr	r2, [pc, #200]	; (80021f4 <HAL_ADC_ConfigChannel+0x360>)
 800212c:	0019      	movs	r1, r3
 800212e:	0010      	movs	r0, r2
 8002130:	f7ff fb1a 	bl	8001768 <LL_ADC_SetCommonPathInternalCh>
 8002134:	e07a      	b.n	800222c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a33      	ldr	r2, [pc, #204]	; (8002208 <HAL_ADC_ConfigChannel+0x374>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d000      	beq.n	8002142 <HAL_ADC_ConfigChannel+0x2ae>
 8002140:	e074      	b.n	800222c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	2380      	movs	r3, #128	; 0x80
 8002146:	03db      	lsls	r3, r3, #15
 8002148:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800214a:	d000      	beq.n	800214e <HAL_ADC_ConfigChannel+0x2ba>
 800214c:	e06e      	b.n	800222c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	2280      	movs	r2, #128	; 0x80
 8002152:	03d2      	lsls	r2, r2, #15
 8002154:	4313      	orrs	r3, r2
 8002156:	4a27      	ldr	r2, [pc, #156]	; (80021f4 <HAL_ADC_ConfigChannel+0x360>)
 8002158:	0019      	movs	r1, r3
 800215a:	0010      	movs	r0, r2
 800215c:	f7ff fb04 	bl	8001768 <LL_ADC_SetCommonPathInternalCh>
 8002160:	e064      	b.n	800222c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691a      	ldr	r2, [r3, #16]
 8002166:	2380      	movs	r3, #128	; 0x80
 8002168:	061b      	lsls	r3, r3, #24
 800216a:	429a      	cmp	r2, r3
 800216c:	d004      	beq.n	8002178 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002172:	4a1f      	ldr	r2, [pc, #124]	; (80021f0 <HAL_ADC_ConfigChannel+0x35c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d107      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	0019      	movs	r1, r3
 8002182:	0010      	movs	r0, r2
 8002184:	f7ff fb87 	bl	8001896 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	da4d      	bge.n	800222c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002190:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <HAL_ADC_ConfigChannel+0x360>)
 8002192:	0018      	movs	r0, r3
 8002194:	f7ff fafc 	bl	8001790 <LL_ADC_GetCommonPathInternalCh>
 8002198:	0003      	movs	r3, r0
 800219a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a15      	ldr	r2, [pc, #84]	; (80021f8 <HAL_ADC_ConfigChannel+0x364>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d108      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4a18      	ldr	r2, [pc, #96]	; (800220c <HAL_ADC_ConfigChannel+0x378>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	4a11      	ldr	r2, [pc, #68]	; (80021f4 <HAL_ADC_ConfigChannel+0x360>)
 80021ae:	0019      	movs	r1, r3
 80021b0:	0010      	movs	r0, r2
 80021b2:	f7ff fad9 	bl	8001768 <LL_ADC_SetCommonPathInternalCh>
 80021b6:	e039      	b.n	800222c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a11      	ldr	r2, [pc, #68]	; (8002204 <HAL_ADC_ConfigChannel+0x370>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d108      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4a12      	ldr	r2, [pc, #72]	; (8002210 <HAL_ADC_ConfigChannel+0x37c>)
 80021c6:	4013      	ands	r3, r2
 80021c8:	4a0a      	ldr	r2, [pc, #40]	; (80021f4 <HAL_ADC_ConfigChannel+0x360>)
 80021ca:	0019      	movs	r1, r3
 80021cc:	0010      	movs	r0, r2
 80021ce:	f7ff facb 	bl	8001768 <LL_ADC_SetCommonPathInternalCh>
 80021d2:	e02b      	b.n	800222c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a0b      	ldr	r2, [pc, #44]	; (8002208 <HAL_ADC_ConfigChannel+0x374>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d126      	bne.n	800222c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4a0c      	ldr	r2, [pc, #48]	; (8002214 <HAL_ADC_ConfigChannel+0x380>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	4a03      	ldr	r2, [pc, #12]	; (80021f4 <HAL_ADC_ConfigChannel+0x360>)
 80021e6:	0019      	movs	r1, r3
 80021e8:	0010      	movs	r0, r2
 80021ea:	f7ff fabd 	bl	8001768 <LL_ADC_SetCommonPathInternalCh>
 80021ee:	e01d      	b.n	800222c <HAL_ADC_ConfigChannel+0x398>
 80021f0:	80000004 	.word	0x80000004
 80021f4:	40012708 	.word	0x40012708
 80021f8:	b0001000 	.word	0xb0001000
 80021fc:	20000000 	.word	0x20000000
 8002200:	00030d40 	.word	0x00030d40
 8002204:	b8004000 	.word	0xb8004000
 8002208:	b4002000 	.word	0xb4002000
 800220c:	ff7fffff 	.word	0xff7fffff
 8002210:	feffffff 	.word	0xfeffffff
 8002214:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221c:	2220      	movs	r2, #32
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002224:	2317      	movs	r3, #23
 8002226:	18fb      	adds	r3, r7, r3
 8002228:	2201      	movs	r2, #1
 800222a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2254      	movs	r2, #84	; 0x54
 8002230:	2100      	movs	r1, #0
 8002232:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002234:	2317      	movs	r3, #23
 8002236:	18fb      	adds	r3, r7, r3
 8002238:	781b      	ldrb	r3, [r3, #0]
}
 800223a:	0018      	movs	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	b006      	add	sp, #24
 8002240:	bd80      	pop	{r7, pc}
 8002242:	46c0      	nop			; (mov r8, r8)

08002244 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800224c:	2300      	movs	r3, #0
 800224e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	0018      	movs	r0, r3
 8002256:	f7ff fb99 	bl	800198c <LL_ADC_IsEnabled>
 800225a:	1e03      	subs	r3, r0, #0
 800225c:	d000      	beq.n	8002260 <ADC_Enable+0x1c>
 800225e:	e069      	b.n	8002334 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	4a36      	ldr	r2, [pc, #216]	; (8002340 <ADC_Enable+0xfc>)
 8002268:	4013      	ands	r3, r2
 800226a:	d00d      	beq.n	8002288 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002270:	2210      	movs	r2, #16
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227c:	2201      	movs	r2, #1
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e056      	b.n	8002336 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	0018      	movs	r0, r3
 800228e:	f7ff fb59 	bl	8001944 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8002292:	4b2c      	ldr	r3, [pc, #176]	; (8002344 <ADC_Enable+0x100>)
 8002294:	0018      	movs	r0, r3
 8002296:	f7ff fa7b 	bl	8001790 <LL_ADC_GetCommonPathInternalCh>
 800229a:	0002      	movs	r2, r0
 800229c:	2380      	movs	r3, #128	; 0x80
 800229e:	041b      	lsls	r3, r3, #16
 80022a0:	4013      	ands	r3, r2
 80022a2:	d00f      	beq.n	80022c4 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022a4:	4b28      	ldr	r3, [pc, #160]	; (8002348 <ADC_Enable+0x104>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4928      	ldr	r1, [pc, #160]	; (800234c <ADC_Enable+0x108>)
 80022aa:	0018      	movs	r0, r3
 80022ac:	f7fd ff28 	bl	8000100 <__udivsi3>
 80022b0:	0003      	movs	r3, r0
 80022b2:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80022b4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80022b6:	e002      	b.n	80022be <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1f9      	bne.n	80022b8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	7e5b      	ldrb	r3, [r3, #25]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d033      	beq.n	8002334 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80022cc:	f7ff fa1e 	bl	800170c <HAL_GetTick>
 80022d0:	0003      	movs	r3, r0
 80022d2:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022d4:	e027      	b.n	8002326 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	0018      	movs	r0, r3
 80022dc:	f7ff fb56 	bl	800198c <LL_ADC_IsEnabled>
 80022e0:	1e03      	subs	r3, r0, #0
 80022e2:	d104      	bne.n	80022ee <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	0018      	movs	r0, r3
 80022ea:	f7ff fb2b 	bl	8001944 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022ee:	f7ff fa0d 	bl	800170c <HAL_GetTick>
 80022f2:	0002      	movs	r2, r0
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d914      	bls.n	8002326 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2201      	movs	r2, #1
 8002304:	4013      	ands	r3, r2
 8002306:	2b01      	cmp	r3, #1
 8002308:	d00d      	beq.n	8002326 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230e:	2210      	movs	r2, #16
 8002310:	431a      	orrs	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231a:	2201      	movs	r2, #1
 800231c:	431a      	orrs	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e007      	b.n	8002336 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2201      	movs	r2, #1
 800232e:	4013      	ands	r3, r2
 8002330:	2b01      	cmp	r3, #1
 8002332:	d1d0      	bne.n	80022d6 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	0018      	movs	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	b004      	add	sp, #16
 800233c:	bd80      	pop	{r7, pc}
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	80000017 	.word	0x80000017
 8002344:	40012708 	.word	0x40012708
 8002348:	20000000 	.word	0x20000000
 800234c:	00030d40 	.word	0x00030d40

08002350 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002362:	2250      	movs	r2, #80	; 0x50
 8002364:	4013      	ands	r3, r2
 8002366:	d141      	bne.n	80023ec <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236c:	2280      	movs	r2, #128	; 0x80
 800236e:	0092      	lsls	r2, r2, #2
 8002370:	431a      	orrs	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	0018      	movs	r0, r3
 800237c:	f7ff fa49 	bl	8001812 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002380:	1e03      	subs	r3, r0, #0
 8002382:	d02e      	beq.n	80023e2 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	7e9b      	ldrb	r3, [r3, #26]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d12a      	bne.n	80023e2 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2208      	movs	r2, #8
 8002394:	4013      	ands	r3, r2
 8002396:	2b08      	cmp	r3, #8
 8002398:	d123      	bne.n	80023e2 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	0018      	movs	r0, r3
 80023a0:	f7ff fb18 	bl	80019d4 <LL_ADC_REG_IsConversionOngoing>
 80023a4:	1e03      	subs	r3, r0, #0
 80023a6:	d110      	bne.n	80023ca <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	210c      	movs	r1, #12
 80023b4:	438a      	bics	r2, r1
 80023b6:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023bc:	4a15      	ldr	r2, [pc, #84]	; (8002414 <ADC_DMAConvCplt+0xc4>)
 80023be:	4013      	ands	r3, r2
 80023c0:	2201      	movs	r2, #1
 80023c2:	431a      	orrs	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	659a      	str	r2, [r3, #88]	; 0x58
 80023c8:	e00b      	b.n	80023e2 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ce:	2220      	movs	r2, #32
 80023d0:	431a      	orrs	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023da:	2201      	movs	r2, #1
 80023dc:	431a      	orrs	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	0018      	movs	r0, r3
 80023e6:	f7ff fd3d 	bl	8001e64 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80023ea:	e00f      	b.n	800240c <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f0:	2210      	movs	r2, #16
 80023f2:	4013      	ands	r3, r2
 80023f4:	d004      	beq.n	8002400 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	0018      	movs	r0, r3
 80023fa:	f7ff fd43 	bl	8001e84 <HAL_ADC_ErrorCallback>
}
 80023fe:	e005      	b.n	800240c <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	0010      	movs	r0, r2
 800240a:	4798      	blx	r3
}
 800240c:	46c0      	nop			; (mov r8, r8)
 800240e:	46bd      	mov	sp, r7
 8002410:	b004      	add	sp, #16
 8002412:	bd80      	pop	{r7, pc}
 8002414:	fffffefe 	.word	0xfffffefe

08002418 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002424:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	0018      	movs	r0, r3
 800242a:	f7ff fd23 	bl	8001e74 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	46bd      	mov	sp, r7
 8002432:	b004      	add	sp, #16
 8002434:	bd80      	pop	{r7, pc}

08002436 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b084      	sub	sp, #16
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002442:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002448:	2240      	movs	r2, #64	; 0x40
 800244a:	431a      	orrs	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002454:	2204      	movs	r2, #4
 8002456:	431a      	orrs	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	0018      	movs	r0, r3
 8002460:	f7ff fd10 	bl	8001e84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002464:	46c0      	nop			; (mov r8, r8)
 8002466:	46bd      	mov	sp, r7
 8002468:	b004      	add	sp, #16
 800246a:	bd80      	pop	{r7, pc}

0800246c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	0002      	movs	r2, r0
 8002474:	1dfb      	adds	r3, r7, #7
 8002476:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002478:	1dfb      	adds	r3, r7, #7
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b7f      	cmp	r3, #127	; 0x7f
 800247e:	d809      	bhi.n	8002494 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002480:	1dfb      	adds	r3, r7, #7
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	001a      	movs	r2, r3
 8002486:	231f      	movs	r3, #31
 8002488:	401a      	ands	r2, r3
 800248a:	4b04      	ldr	r3, [pc, #16]	; (800249c <__NVIC_EnableIRQ+0x30>)
 800248c:	2101      	movs	r1, #1
 800248e:	4091      	lsls	r1, r2
 8002490:	000a      	movs	r2, r1
 8002492:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002494:	46c0      	nop			; (mov r8, r8)
 8002496:	46bd      	mov	sp, r7
 8002498:	b002      	add	sp, #8
 800249a:	bd80      	pop	{r7, pc}
 800249c:	e000e100 	.word	0xe000e100

080024a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024a0:	b590      	push	{r4, r7, lr}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	0002      	movs	r2, r0
 80024a8:	6039      	str	r1, [r7, #0]
 80024aa:	1dfb      	adds	r3, r7, #7
 80024ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80024ae:	1dfb      	adds	r3, r7, #7
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b7f      	cmp	r3, #127	; 0x7f
 80024b4:	d828      	bhi.n	8002508 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024b6:	4a2f      	ldr	r2, [pc, #188]	; (8002574 <__NVIC_SetPriority+0xd4>)
 80024b8:	1dfb      	adds	r3, r7, #7
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	b25b      	sxtb	r3, r3
 80024be:	089b      	lsrs	r3, r3, #2
 80024c0:	33c0      	adds	r3, #192	; 0xc0
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	589b      	ldr	r3, [r3, r2]
 80024c6:	1dfa      	adds	r2, r7, #7
 80024c8:	7812      	ldrb	r2, [r2, #0]
 80024ca:	0011      	movs	r1, r2
 80024cc:	2203      	movs	r2, #3
 80024ce:	400a      	ands	r2, r1
 80024d0:	00d2      	lsls	r2, r2, #3
 80024d2:	21ff      	movs	r1, #255	; 0xff
 80024d4:	4091      	lsls	r1, r2
 80024d6:	000a      	movs	r2, r1
 80024d8:	43d2      	mvns	r2, r2
 80024da:	401a      	ands	r2, r3
 80024dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	019b      	lsls	r3, r3, #6
 80024e2:	22ff      	movs	r2, #255	; 0xff
 80024e4:	401a      	ands	r2, r3
 80024e6:	1dfb      	adds	r3, r7, #7
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	0018      	movs	r0, r3
 80024ec:	2303      	movs	r3, #3
 80024ee:	4003      	ands	r3, r0
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024f4:	481f      	ldr	r0, [pc, #124]	; (8002574 <__NVIC_SetPriority+0xd4>)
 80024f6:	1dfb      	adds	r3, r7, #7
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	b25b      	sxtb	r3, r3
 80024fc:	089b      	lsrs	r3, r3, #2
 80024fe:	430a      	orrs	r2, r1
 8002500:	33c0      	adds	r3, #192	; 0xc0
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002506:	e031      	b.n	800256c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002508:	4a1b      	ldr	r2, [pc, #108]	; (8002578 <__NVIC_SetPriority+0xd8>)
 800250a:	1dfb      	adds	r3, r7, #7
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	0019      	movs	r1, r3
 8002510:	230f      	movs	r3, #15
 8002512:	400b      	ands	r3, r1
 8002514:	3b08      	subs	r3, #8
 8002516:	089b      	lsrs	r3, r3, #2
 8002518:	3306      	adds	r3, #6
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	18d3      	adds	r3, r2, r3
 800251e:	3304      	adds	r3, #4
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	1dfa      	adds	r2, r7, #7
 8002524:	7812      	ldrb	r2, [r2, #0]
 8002526:	0011      	movs	r1, r2
 8002528:	2203      	movs	r2, #3
 800252a:	400a      	ands	r2, r1
 800252c:	00d2      	lsls	r2, r2, #3
 800252e:	21ff      	movs	r1, #255	; 0xff
 8002530:	4091      	lsls	r1, r2
 8002532:	000a      	movs	r2, r1
 8002534:	43d2      	mvns	r2, r2
 8002536:	401a      	ands	r2, r3
 8002538:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	019b      	lsls	r3, r3, #6
 800253e:	22ff      	movs	r2, #255	; 0xff
 8002540:	401a      	ands	r2, r3
 8002542:	1dfb      	adds	r3, r7, #7
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	0018      	movs	r0, r3
 8002548:	2303      	movs	r3, #3
 800254a:	4003      	ands	r3, r0
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002550:	4809      	ldr	r0, [pc, #36]	; (8002578 <__NVIC_SetPriority+0xd8>)
 8002552:	1dfb      	adds	r3, r7, #7
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	001c      	movs	r4, r3
 8002558:	230f      	movs	r3, #15
 800255a:	4023      	ands	r3, r4
 800255c:	3b08      	subs	r3, #8
 800255e:	089b      	lsrs	r3, r3, #2
 8002560:	430a      	orrs	r2, r1
 8002562:	3306      	adds	r3, #6
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	18c3      	adds	r3, r0, r3
 8002568:	3304      	adds	r3, #4
 800256a:	601a      	str	r2, [r3, #0]
}
 800256c:	46c0      	nop			; (mov r8, r8)
 800256e:	46bd      	mov	sp, r7
 8002570:	b003      	add	sp, #12
 8002572:	bd90      	pop	{r4, r7, pc}
 8002574:	e000e100 	.word	0xe000e100
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	1e5a      	subs	r2, r3, #1
 8002588:	2380      	movs	r3, #128	; 0x80
 800258a:	045b      	lsls	r3, r3, #17
 800258c:	429a      	cmp	r2, r3
 800258e:	d301      	bcc.n	8002594 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002590:	2301      	movs	r3, #1
 8002592:	e010      	b.n	80025b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002594:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <SysTick_Config+0x44>)
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	3a01      	subs	r2, #1
 800259a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800259c:	2301      	movs	r3, #1
 800259e:	425b      	negs	r3, r3
 80025a0:	2103      	movs	r1, #3
 80025a2:	0018      	movs	r0, r3
 80025a4:	f7ff ff7c 	bl	80024a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025a8:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <SysTick_Config+0x44>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ae:	4b04      	ldr	r3, [pc, #16]	; (80025c0 <SysTick_Config+0x44>)
 80025b0:	2207      	movs	r2, #7
 80025b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	0018      	movs	r0, r3
 80025b8:	46bd      	mov	sp, r7
 80025ba:	b002      	add	sp, #8
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	e000e010 	.word	0xe000e010

080025c4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	607a      	str	r2, [r7, #4]
 80025ce:	210f      	movs	r1, #15
 80025d0:	187b      	adds	r3, r7, r1
 80025d2:	1c02      	adds	r2, r0, #0
 80025d4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	187b      	adds	r3, r7, r1
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	b25b      	sxtb	r3, r3
 80025de:	0011      	movs	r1, r2
 80025e0:	0018      	movs	r0, r3
 80025e2:	f7ff ff5d 	bl	80024a0 <__NVIC_SetPriority>
}
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	46bd      	mov	sp, r7
 80025ea:	b004      	add	sp, #16
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b082      	sub	sp, #8
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	0002      	movs	r2, r0
 80025f6:	1dfb      	adds	r3, r7, #7
 80025f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025fa:	1dfb      	adds	r3, r7, #7
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	b25b      	sxtb	r3, r3
 8002600:	0018      	movs	r0, r3
 8002602:	f7ff ff33 	bl	800246c <__NVIC_EnableIRQ>
}
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	46bd      	mov	sp, r7
 800260a:	b002      	add	sp, #8
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b082      	sub	sp, #8
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	0018      	movs	r0, r3
 800261a:	f7ff ffaf 	bl	800257c <SysTick_Config>
 800261e:	0003      	movs	r3, r0
}
 8002620:	0018      	movs	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	b002      	add	sp, #8
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e077      	b.n	800272a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a3d      	ldr	r2, [pc, #244]	; (8002734 <HAL_DMA_Init+0x10c>)
 8002640:	4694      	mov	ip, r2
 8002642:	4463      	add	r3, ip
 8002644:	2114      	movs	r1, #20
 8002646:	0018      	movs	r0, r3
 8002648:	f7fd fd5a 	bl	8000100 <__udivsi3>
 800264c:	0003      	movs	r3, r0
 800264e:	009a      	lsls	r2, r3, #2
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2225      	movs	r2, #37	; 0x25
 8002658:	2102      	movs	r1, #2
 800265a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4934      	ldr	r1, [pc, #208]	; (8002738 <HAL_DMA_Init+0x110>)
 8002668:	400a      	ands	r2, r1
 800266a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6819      	ldr	r1, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	431a      	orrs	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	431a      	orrs	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	431a      	orrs	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	0018      	movs	r0, r3
 80026a6:	f000 fa37 	bl	8002b18 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	2380      	movs	r3, #128	; 0x80
 80026b0:	01db      	lsls	r3, r3, #7
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d102      	bne.n	80026bc <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c4:	213f      	movs	r1, #63	; 0x3f
 80026c6:	400a      	ands	r2, r1
 80026c8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80026d2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d011      	beq.n	8002700 <HAL_DMA_Init+0xd8>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d80d      	bhi.n	8002700 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	0018      	movs	r0, r3
 80026e8:	f000 fa42 	bl	8002b70 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	e008      	b.n	8002712 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2225      	movs	r2, #37	; 0x25
 800271c:	2101      	movs	r1, #1
 800271e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2224      	movs	r2, #36	; 0x24
 8002724:	2100      	movs	r1, #0
 8002726:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	0018      	movs	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	b002      	add	sp, #8
 8002730:	bd80      	pop	{r7, pc}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	bffdfff8 	.word	0xbffdfff8
 8002738:	ffff800f 	.word	0xffff800f

0800273c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
 8002748:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800274a:	2317      	movs	r3, #23
 800274c:	18fb      	adds	r3, r7, r3
 800274e:	2200      	movs	r2, #0
 8002750:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2224      	movs	r2, #36	; 0x24
 8002756:	5c9b      	ldrb	r3, [r3, r2]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_DMA_Start_IT+0x24>
 800275c:	2302      	movs	r3, #2
 800275e:	e06f      	b.n	8002840 <HAL_DMA_Start_IT+0x104>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2224      	movs	r2, #36	; 0x24
 8002764:	2101      	movs	r1, #1
 8002766:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2225      	movs	r2, #37	; 0x25
 800276c:	5c9b      	ldrb	r3, [r3, r2]
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b01      	cmp	r3, #1
 8002772:	d157      	bne.n	8002824 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2225      	movs	r2, #37	; 0x25
 8002778:	2102      	movs	r1, #2
 800277a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2101      	movs	r1, #1
 800278e:	438a      	bics	r2, r1
 8002790:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	68b9      	ldr	r1, [r7, #8]
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 f97d 	bl	8002a98 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d008      	beq.n	80027b8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	210e      	movs	r1, #14
 80027b2:	430a      	orrs	r2, r1
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	e00f      	b.n	80027d8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2104      	movs	r1, #4
 80027c4:	438a      	bics	r2, r1
 80027c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	210a      	movs	r1, #10
 80027d4:	430a      	orrs	r2, r1
 80027d6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	2380      	movs	r3, #128	; 0x80
 80027e0:	025b      	lsls	r3, r3, #9
 80027e2:	4013      	ands	r3, r2
 80027e4:	d008      	beq.n	80027f8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f0:	2180      	movs	r1, #128	; 0x80
 80027f2:	0049      	lsls	r1, r1, #1
 80027f4:	430a      	orrs	r2, r1
 80027f6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d008      	beq.n	8002812 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800280a:	2180      	movs	r1, #128	; 0x80
 800280c:	0049      	lsls	r1, r1, #1
 800280e:	430a      	orrs	r2, r1
 8002810:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2101      	movs	r1, #1
 800281e:	430a      	orrs	r2, r1
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	e00a      	b.n	800283a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2280      	movs	r2, #128	; 0x80
 8002828:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2224      	movs	r2, #36	; 0x24
 800282e:	2100      	movs	r1, #0
 8002830:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8002832:	2317      	movs	r3, #23
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	2201      	movs	r2, #1
 8002838:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800283a:	2317      	movs	r3, #23
 800283c:	18fb      	adds	r3, r7, r3
 800283e:	781b      	ldrb	r3, [r3, #0]
}
 8002840:	0018      	movs	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	b006      	add	sp, #24
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002850:	210f      	movs	r1, #15
 8002852:	187b      	adds	r3, r7, r1
 8002854:	2200      	movs	r2, #0
 8002856:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2225      	movs	r2, #37	; 0x25
 800285c:	5c9b      	ldrb	r3, [r3, r2]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d006      	beq.n	8002872 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2204      	movs	r2, #4
 8002868:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800286a:	187b      	adds	r3, r7, r1
 800286c:	2201      	movs	r2, #1
 800286e:	701a      	strb	r2, [r3, #0]
 8002870:	e049      	b.n	8002906 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	210e      	movs	r1, #14
 800287e:	438a      	bics	r2, r1
 8002880:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2101      	movs	r1, #1
 800288e:	438a      	bics	r2, r1
 8002890:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289c:	491d      	ldr	r1, [pc, #116]	; (8002914 <HAL_DMA_Abort_IT+0xcc>)
 800289e:	400a      	ands	r2, r1
 80028a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80028a2:	4b1d      	ldr	r3, [pc, #116]	; (8002918 <HAL_DMA_Abort_IT+0xd0>)
 80028a4:	6859      	ldr	r1, [r3, #4]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	221c      	movs	r2, #28
 80028ac:	4013      	ands	r3, r2
 80028ae:	2201      	movs	r2, #1
 80028b0:	409a      	lsls	r2, r3
 80028b2:	4b19      	ldr	r3, [pc, #100]	; (8002918 <HAL_DMA_Abort_IT+0xd0>)
 80028b4:	430a      	orrs	r2, r1
 80028b6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80028c0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00c      	beq.n	80028e4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d4:	490f      	ldr	r1, [pc, #60]	; (8002914 <HAL_DMA_Abort_IT+0xcc>)
 80028d6:	400a      	ands	r2, r1
 80028d8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80028e2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2225      	movs	r2, #37	; 0x25
 80028e8:	2101      	movs	r1, #1
 80028ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2224      	movs	r2, #36	; 0x24
 80028f0:	2100      	movs	r1, #0
 80028f2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d004      	beq.n	8002906 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	0010      	movs	r0, r2
 8002904:	4798      	blx	r3
    }
  }
  return status;
 8002906:	230f      	movs	r3, #15
 8002908:	18fb      	adds	r3, r7, r3
 800290a:	781b      	ldrb	r3, [r3, #0]
}
 800290c:	0018      	movs	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	b004      	add	sp, #16
 8002912:	bd80      	pop	{r7, pc}
 8002914:	fffffeff 	.word	0xfffffeff
 8002918:	40020000 	.word	0x40020000

0800291c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002924:	4b55      	ldr	r3, [pc, #340]	; (8002a7c <HAL_DMA_IRQHandler+0x160>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	221c      	movs	r2, #28
 8002938:	4013      	ands	r3, r2
 800293a:	2204      	movs	r2, #4
 800293c:	409a      	lsls	r2, r3
 800293e:	0013      	movs	r3, r2
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	4013      	ands	r3, r2
 8002944:	d027      	beq.n	8002996 <HAL_DMA_IRQHandler+0x7a>
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2204      	movs	r2, #4
 800294a:	4013      	ands	r3, r2
 800294c:	d023      	beq.n	8002996 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2220      	movs	r2, #32
 8002956:	4013      	ands	r3, r2
 8002958:	d107      	bne.n	800296a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2104      	movs	r1, #4
 8002966:	438a      	bics	r2, r1
 8002968:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800296a:	4b44      	ldr	r3, [pc, #272]	; (8002a7c <HAL_DMA_IRQHandler+0x160>)
 800296c:	6859      	ldr	r1, [r3, #4]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	221c      	movs	r2, #28
 8002974:	4013      	ands	r3, r2
 8002976:	2204      	movs	r2, #4
 8002978:	409a      	lsls	r2, r3
 800297a:	4b40      	ldr	r3, [pc, #256]	; (8002a7c <HAL_DMA_IRQHandler+0x160>)
 800297c:	430a      	orrs	r2, r1
 800297e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	2b00      	cmp	r3, #0
 8002986:	d100      	bne.n	800298a <HAL_DMA_IRQHandler+0x6e>
 8002988:	e073      	b.n	8002a72 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	0010      	movs	r0, r2
 8002992:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002994:	e06d      	b.n	8002a72 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	221c      	movs	r2, #28
 800299c:	4013      	ands	r3, r2
 800299e:	2202      	movs	r2, #2
 80029a0:	409a      	lsls	r2, r3
 80029a2:	0013      	movs	r3, r2
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	4013      	ands	r3, r2
 80029a8:	d02e      	beq.n	8002a08 <HAL_DMA_IRQHandler+0xec>
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2202      	movs	r2, #2
 80029ae:	4013      	ands	r3, r2
 80029b0:	d02a      	beq.n	8002a08 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2220      	movs	r2, #32
 80029ba:	4013      	ands	r3, r2
 80029bc:	d10b      	bne.n	80029d6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	210a      	movs	r1, #10
 80029ca:	438a      	bics	r2, r1
 80029cc:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2225      	movs	r2, #37	; 0x25
 80029d2:	2101      	movs	r1, #1
 80029d4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80029d6:	4b29      	ldr	r3, [pc, #164]	; (8002a7c <HAL_DMA_IRQHandler+0x160>)
 80029d8:	6859      	ldr	r1, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	221c      	movs	r2, #28
 80029e0:	4013      	ands	r3, r2
 80029e2:	2202      	movs	r2, #2
 80029e4:	409a      	lsls	r2, r3
 80029e6:	4b25      	ldr	r3, [pc, #148]	; (8002a7c <HAL_DMA_IRQHandler+0x160>)
 80029e8:	430a      	orrs	r2, r1
 80029ea:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2224      	movs	r2, #36	; 0x24
 80029f0:	2100      	movs	r1, #0
 80029f2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d03a      	beq.n	8002a72 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	0010      	movs	r0, r2
 8002a04:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002a06:	e034      	b.n	8002a72 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	221c      	movs	r2, #28
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2208      	movs	r2, #8
 8002a12:	409a      	lsls	r2, r3
 8002a14:	0013      	movs	r3, r2
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d02b      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x158>
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2208      	movs	r2, #8
 8002a20:	4013      	ands	r3, r2
 8002a22:	d027      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	210e      	movs	r1, #14
 8002a30:	438a      	bics	r2, r1
 8002a32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002a34:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <HAL_DMA_IRQHandler+0x160>)
 8002a36:	6859      	ldr	r1, [r3, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	221c      	movs	r2, #28
 8002a3e:	4013      	ands	r3, r2
 8002a40:	2201      	movs	r2, #1
 8002a42:	409a      	lsls	r2, r3
 8002a44:	4b0d      	ldr	r3, [pc, #52]	; (8002a7c <HAL_DMA_IRQHandler+0x160>)
 8002a46:	430a      	orrs	r2, r1
 8002a48:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2225      	movs	r2, #37	; 0x25
 8002a54:	2101      	movs	r1, #1
 8002a56:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2224      	movs	r2, #36	; 0x24
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	0010      	movs	r0, r2
 8002a70:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	46c0      	nop			; (mov r8, r8)
}
 8002a76:	46bd      	mov	sp, r7
 8002a78:	b004      	add	sp, #16
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40020000 	.word	0x40020000

08002a80 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2225      	movs	r2, #37	; 0x25
 8002a8c:	5c9b      	ldrb	r3, [r3, r2]
 8002a8e:	b2db      	uxtb	r3, r3
}
 8002a90:	0018      	movs	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	b002      	add	sp, #8
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002aae:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d004      	beq.n	8002ac2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002ac0:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002ac2:	4b14      	ldr	r3, [pc, #80]	; (8002b14 <DMA_SetConfig+0x7c>)
 8002ac4:	6859      	ldr	r1, [r3, #4]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	221c      	movs	r2, #28
 8002acc:	4013      	ands	r3, r2
 8002ace:	2201      	movs	r2, #1
 8002ad0:	409a      	lsls	r2, r3
 8002ad2:	4b10      	ldr	r3, [pc, #64]	; (8002b14 <DMA_SetConfig+0x7c>)
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	2b10      	cmp	r3, #16
 8002ae6:	d108      	bne.n	8002afa <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002af8:	e007      	b.n	8002b0a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	60da      	str	r2, [r3, #12]
}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	b004      	add	sp, #16
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	40020000 	.word	0x40020000

08002b18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	089b      	lsrs	r3, r3, #2
 8002b26:	4a10      	ldr	r2, [pc, #64]	; (8002b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002b28:	4694      	mov	ip, r2
 8002b2a:	4463      	add	r3, ip
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	001a      	movs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	001a      	movs	r2, r3
 8002b3a:	23ff      	movs	r3, #255	; 0xff
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	3b08      	subs	r3, #8
 8002b40:	2114      	movs	r1, #20
 8002b42:	0018      	movs	r0, r3
 8002b44:	f7fd fadc 	bl	8000100 <__udivsi3>
 8002b48:	0003      	movs	r3, r0
 8002b4a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a07      	ldr	r2, [pc, #28]	; (8002b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002b50:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	221f      	movs	r2, #31
 8002b56:	4013      	ands	r3, r2
 8002b58:	2201      	movs	r2, #1
 8002b5a:	409a      	lsls	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002b60:	46c0      	nop			; (mov r8, r8)
 8002b62:	46bd      	mov	sp, r7
 8002b64:	b004      	add	sp, #16
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	10008200 	.word	0x10008200
 8002b6c:	40020880 	.word	0x40020880

08002b70 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	223f      	movs	r2, #63	; 0x3f
 8002b7e:	4013      	ands	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4a0a      	ldr	r2, [pc, #40]	; (8002bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002b86:	4694      	mov	ip, r2
 8002b88:	4463      	add	r3, ip
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	001a      	movs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a07      	ldr	r2, [pc, #28]	; (8002bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002b96:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	2203      	movs	r2, #3
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	409a      	lsls	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002ba8:	46c0      	nop			; (mov r8, r8)
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b004      	add	sp, #16
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	1000823f 	.word	0x1000823f
 8002bb4:	40020940 	.word	0x40020940

08002bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bc6:	e147      	b.n	8002e58 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2101      	movs	r1, #1
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	4091      	lsls	r1, r2
 8002bd2:	000a      	movs	r2, r1
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d100      	bne.n	8002be0 <HAL_GPIO_Init+0x28>
 8002bde:	e138      	b.n	8002e52 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	2203      	movs	r2, #3
 8002be6:	4013      	ands	r3, r2
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d005      	beq.n	8002bf8 <HAL_GPIO_Init+0x40>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2203      	movs	r2, #3
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d130      	bne.n	8002c5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	2203      	movs	r2, #3
 8002c04:	409a      	lsls	r2, r3
 8002c06:	0013      	movs	r3, r2
 8002c08:	43da      	mvns	r2, r3
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	68da      	ldr	r2, [r3, #12]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	409a      	lsls	r2, r3
 8002c1a:	0013      	movs	r3, r2
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c2e:	2201      	movs	r2, #1
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	409a      	lsls	r2, r3
 8002c34:	0013      	movs	r3, r2
 8002c36:	43da      	mvns	r2, r3
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	091b      	lsrs	r3, r3, #4
 8002c44:	2201      	movs	r2, #1
 8002c46:	401a      	ands	r2, r3
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	0013      	movs	r3, r2
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2203      	movs	r2, #3
 8002c60:	4013      	ands	r3, r2
 8002c62:	2b03      	cmp	r3, #3
 8002c64:	d017      	beq.n	8002c96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	2203      	movs	r2, #3
 8002c72:	409a      	lsls	r2, r3
 8002c74:	0013      	movs	r3, r2
 8002c76:	43da      	mvns	r2, r3
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	409a      	lsls	r2, r3
 8002c88:	0013      	movs	r3, r2
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d123      	bne.n	8002cea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	08da      	lsrs	r2, r3, #3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	3208      	adds	r2, #8
 8002caa:	0092      	lsls	r2, r2, #2
 8002cac:	58d3      	ldr	r3, [r2, r3]
 8002cae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2207      	movs	r2, #7
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	220f      	movs	r2, #15
 8002cba:	409a      	lsls	r2, r3
 8002cbc:	0013      	movs	r3, r2
 8002cbe:	43da      	mvns	r2, r3
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	691a      	ldr	r2, [r3, #16]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2107      	movs	r1, #7
 8002cce:	400b      	ands	r3, r1
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	409a      	lsls	r2, r3
 8002cd4:	0013      	movs	r3, r2
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	08da      	lsrs	r2, r3, #3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3208      	adds	r2, #8
 8002ce4:	0092      	lsls	r2, r2, #2
 8002ce6:	6939      	ldr	r1, [r7, #16]
 8002ce8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	2203      	movs	r2, #3
 8002cf6:	409a      	lsls	r2, r3
 8002cf8:	0013      	movs	r3, r2
 8002cfa:	43da      	mvns	r2, r3
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2203      	movs	r2, #3
 8002d08:	401a      	ands	r2, r3
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	409a      	lsls	r2, r3
 8002d10:	0013      	movs	r3, r2
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	23c0      	movs	r3, #192	; 0xc0
 8002d24:	029b      	lsls	r3, r3, #10
 8002d26:	4013      	ands	r3, r2
 8002d28:	d100      	bne.n	8002d2c <HAL_GPIO_Init+0x174>
 8002d2a:	e092      	b.n	8002e52 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002d2c:	4a50      	ldr	r2, [pc, #320]	; (8002e70 <HAL_GPIO_Init+0x2b8>)
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	089b      	lsrs	r3, r3, #2
 8002d32:	3318      	adds	r3, #24
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	589b      	ldr	r3, [r3, r2]
 8002d38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	4013      	ands	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	220f      	movs	r2, #15
 8002d44:	409a      	lsls	r2, r3
 8002d46:	0013      	movs	r3, r2
 8002d48:	43da      	mvns	r2, r3
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	23a0      	movs	r3, #160	; 0xa0
 8002d54:	05db      	lsls	r3, r3, #23
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d013      	beq.n	8002d82 <HAL_GPIO_Init+0x1ca>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a45      	ldr	r2, [pc, #276]	; (8002e74 <HAL_GPIO_Init+0x2bc>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00d      	beq.n	8002d7e <HAL_GPIO_Init+0x1c6>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a44      	ldr	r2, [pc, #272]	; (8002e78 <HAL_GPIO_Init+0x2c0>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d007      	beq.n	8002d7a <HAL_GPIO_Init+0x1c2>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a43      	ldr	r2, [pc, #268]	; (8002e7c <HAL_GPIO_Init+0x2c4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d101      	bne.n	8002d76 <HAL_GPIO_Init+0x1be>
 8002d72:	2303      	movs	r3, #3
 8002d74:	e006      	b.n	8002d84 <HAL_GPIO_Init+0x1cc>
 8002d76:	2305      	movs	r3, #5
 8002d78:	e004      	b.n	8002d84 <HAL_GPIO_Init+0x1cc>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e002      	b.n	8002d84 <HAL_GPIO_Init+0x1cc>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <HAL_GPIO_Init+0x1cc>
 8002d82:	2300      	movs	r3, #0
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	2103      	movs	r1, #3
 8002d88:	400a      	ands	r2, r1
 8002d8a:	00d2      	lsls	r2, r2, #3
 8002d8c:	4093      	lsls	r3, r2
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002d94:	4936      	ldr	r1, [pc, #216]	; (8002e70 <HAL_GPIO_Init+0x2b8>)
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	089b      	lsrs	r3, r3, #2
 8002d9a:	3318      	adds	r3, #24
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002da2:	4b33      	ldr	r3, [pc, #204]	; (8002e70 <HAL_GPIO_Init+0x2b8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	43da      	mvns	r2, r3
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	4013      	ands	r3, r2
 8002db0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	2380      	movs	r3, #128	; 0x80
 8002db8:	035b      	lsls	r3, r3, #13
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d003      	beq.n	8002dc6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002dc6:	4b2a      	ldr	r3, [pc, #168]	; (8002e70 <HAL_GPIO_Init+0x2b8>)
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002dcc:	4b28      	ldr	r3, [pc, #160]	; (8002e70 <HAL_GPIO_Init+0x2b8>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	43da      	mvns	r2, r3
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	2380      	movs	r3, #128	; 0x80
 8002de2:	039b      	lsls	r3, r3, #14
 8002de4:	4013      	ands	r3, r2
 8002de6:	d003      	beq.n	8002df0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002df0:	4b1f      	ldr	r3, [pc, #124]	; (8002e70 <HAL_GPIO_Init+0x2b8>)
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002df6:	4a1e      	ldr	r2, [pc, #120]	; (8002e70 <HAL_GPIO_Init+0x2b8>)
 8002df8:	2384      	movs	r3, #132	; 0x84
 8002dfa:	58d3      	ldr	r3, [r2, r3]
 8002dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	43da      	mvns	r2, r3
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	4013      	ands	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	2380      	movs	r3, #128	; 0x80
 8002e0e:	029b      	lsls	r3, r3, #10
 8002e10:	4013      	ands	r3, r2
 8002e12:	d003      	beq.n	8002e1c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e1c:	4914      	ldr	r1, [pc, #80]	; (8002e70 <HAL_GPIO_Init+0x2b8>)
 8002e1e:	2284      	movs	r2, #132	; 0x84
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002e24:	4a12      	ldr	r2, [pc, #72]	; (8002e70 <HAL_GPIO_Init+0x2b8>)
 8002e26:	2380      	movs	r3, #128	; 0x80
 8002e28:	58d3      	ldr	r3, [r2, r3]
 8002e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	43da      	mvns	r2, r3
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	4013      	ands	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	2380      	movs	r3, #128	; 0x80
 8002e3c:	025b      	lsls	r3, r3, #9
 8002e3e:	4013      	ands	r3, r2
 8002e40:	d003      	beq.n	8002e4a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e4a:	4909      	ldr	r1, [pc, #36]	; (8002e70 <HAL_GPIO_Init+0x2b8>)
 8002e4c:	2280      	movs	r2, #128	; 0x80
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	3301      	adds	r3, #1
 8002e56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	40da      	lsrs	r2, r3
 8002e60:	1e13      	subs	r3, r2, #0
 8002e62:	d000      	beq.n	8002e66 <HAL_GPIO_Init+0x2ae>
 8002e64:	e6b0      	b.n	8002bc8 <HAL_GPIO_Init+0x10>
  }
}
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	46c0      	nop			; (mov r8, r8)
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	b006      	add	sp, #24
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40021800 	.word	0x40021800
 8002e74:	50000400 	.word	0x50000400
 8002e78:	50000800 	.word	0x50000800
 8002e7c:	50000c00 	.word	0x50000c00

08002e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	0008      	movs	r0, r1
 8002e8a:	0011      	movs	r1, r2
 8002e8c:	1cbb      	adds	r3, r7, #2
 8002e8e:	1c02      	adds	r2, r0, #0
 8002e90:	801a      	strh	r2, [r3, #0]
 8002e92:	1c7b      	adds	r3, r7, #1
 8002e94:	1c0a      	adds	r2, r1, #0
 8002e96:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e98:	1c7b      	adds	r3, r7, #1
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d004      	beq.n	8002eaa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ea0:	1cbb      	adds	r3, r7, #2
 8002ea2:	881a      	ldrh	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ea8:	e003      	b.n	8002eb2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002eaa:	1cbb      	adds	r3, r7, #2
 8002eac:	881a      	ldrh	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	b002      	add	sp, #8
 8002eb8:	bd80      	pop	{r7, pc}
	...

08002ebc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	0002      	movs	r2, r0
 8002ec4:	1dbb      	adds	r3, r7, #6
 8002ec6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002ec8:	4b10      	ldr	r3, [pc, #64]	; (8002f0c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	1dba      	adds	r2, r7, #6
 8002ece:	8812      	ldrh	r2, [r2, #0]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	d008      	beq.n	8002ee6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002ed4:	4b0d      	ldr	r3, [pc, #52]	; (8002f0c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002ed6:	1dba      	adds	r2, r7, #6
 8002ed8:	8812      	ldrh	r2, [r2, #0]
 8002eda:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002edc:	1dbb      	adds	r3, r7, #6
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f000 f815 	bl	8002f10 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002ee6:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	1dba      	adds	r2, r7, #6
 8002eec:	8812      	ldrh	r2, [r2, #0]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d008      	beq.n	8002f04 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002ef2:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002ef4:	1dba      	adds	r2, r7, #6
 8002ef6:	8812      	ldrh	r2, [r2, #0]
 8002ef8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002efa:	1dbb      	adds	r3, r7, #6
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	0018      	movs	r0, r3
 8002f00:	f000 f810 	bl	8002f24 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002f04:	46c0      	nop			; (mov r8, r8)
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b002      	add	sp, #8
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40021800 	.word	0x40021800

08002f10 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	0002      	movs	r2, r0
 8002f18:	1dbb      	adds	r3, r7, #6
 8002f1a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002f1c:	46c0      	nop			; (mov r8, r8)
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b002      	add	sp, #8
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	0002      	movs	r2, r0
 8002f2c:	1dbb      	adds	r3, r7, #6
 8002f2e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002f30:	46c0      	nop			; (mov r8, r8)
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b002      	add	sp, #8
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e0a8      	b.n	800309c <HAL_I2C_Init+0x164>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2241      	movs	r2, #65	; 0x41
 8002f4e:	5c9b      	ldrb	r3, [r3, r2]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d12d      	bne.n	8002fb2 <HAL_I2C_Init+0x7a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2240      	movs	r2, #64	; 0x40
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a50      	ldr	r2, [pc, #320]	; (80030a4 <HAL_I2C_Init+0x16c>)
 8002f62:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a50      	ldr	r2, [pc, #320]	; (80030a8 <HAL_I2C_Init+0x170>)
 8002f68:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a4f      	ldr	r2, [pc, #316]	; (80030ac <HAL_I2C_Init+0x174>)
 8002f6e:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a4f      	ldr	r2, [pc, #316]	; (80030b0 <HAL_I2C_Init+0x178>)
 8002f74:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a4e      	ldr	r2, [pc, #312]	; (80030b4 <HAL_I2C_Init+0x17c>)
 8002f7a:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a4e      	ldr	r2, [pc, #312]	; (80030b8 <HAL_I2C_Init+0x180>)
 8002f80:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a4d      	ldr	r2, [pc, #308]	; (80030bc <HAL_I2C_Init+0x184>)
 8002f86:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a4d      	ldr	r2, [pc, #308]	; (80030c0 <HAL_I2C_Init+0x188>)
 8002f8c:	671a      	str	r2, [r3, #112]	; 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a4c      	ldr	r2, [pc, #304]	; (80030c4 <HAL_I2C_Init+0x18c>)
 8002f92:	675a      	str	r2, [r3, #116]	; 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a4c      	ldr	r2, [pc, #304]	; (80030c8 <HAL_I2C_Init+0x190>)
 8002f98:	679a      	str	r2, [r3, #120]	; 0x78

    if (hi2c->MspInitCallback == NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d102      	bne.n	8002fa8 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a49      	ldr	r2, [pc, #292]	; (80030cc <HAL_I2C_Init+0x194>)
 8002fa6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	0010      	movs	r0, r2
 8002fb0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2241      	movs	r2, #65	; 0x41
 8002fb6:	2124      	movs	r1, #36	; 0x24
 8002fb8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	438a      	bics	r2, r1
 8002fc8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	493f      	ldr	r1, [pc, #252]	; (80030d0 <HAL_I2C_Init+0x198>)
 8002fd4:	400a      	ands	r2, r1
 8002fd6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689a      	ldr	r2, [r3, #8]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	493c      	ldr	r1, [pc, #240]	; (80030d4 <HAL_I2C_Init+0x19c>)
 8002fe4:	400a      	ands	r2, r1
 8002fe6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d108      	bne.n	8003002 <HAL_I2C_Init+0xca>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2180      	movs	r1, #128	; 0x80
 8002ffa:	0209      	lsls	r1, r1, #8
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	609a      	str	r2, [r3, #8]
 8003000:	e007      	b.n	8003012 <HAL_I2C_Init+0xda>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2184      	movs	r1, #132	; 0x84
 800300c:	0209      	lsls	r1, r1, #8
 800300e:	430a      	orrs	r2, r1
 8003010:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	2b02      	cmp	r3, #2
 8003018:	d104      	bne.n	8003024 <HAL_I2C_Init+0xec>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2280      	movs	r2, #128	; 0x80
 8003020:	0112      	lsls	r2, r2, #4
 8003022:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685a      	ldr	r2, [r3, #4]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	492a      	ldr	r1, [pc, #168]	; (80030d8 <HAL_I2C_Init+0x1a0>)
 8003030:	430a      	orrs	r2, r1
 8003032:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4925      	ldr	r1, [pc, #148]	; (80030d4 <HAL_I2C_Init+0x19c>)
 8003040:	400a      	ands	r2, r1
 8003042:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	431a      	orrs	r2, r3
 800304e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69d9      	ldr	r1, [r3, #28]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1a      	ldr	r2, [r3, #32]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2101      	movs	r1, #1
 800307a:	430a      	orrs	r2, r1
 800307c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2241      	movs	r2, #65	; 0x41
 8003088:	2120      	movs	r1, #32
 800308a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2242      	movs	r2, #66	; 0x42
 8003096:	2100      	movs	r1, #0
 8003098:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	0018      	movs	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	b002      	add	sp, #8
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	0800350b 	.word	0x0800350b
 80030a8:	0800351b 	.word	0x0800351b
 80030ac:	0800352b 	.word	0x0800352b
 80030b0:	080002a9 	.word	0x080002a9
 80030b4:	080002e5 	.word	0x080002e5
 80030b8:	0800353b 	.word	0x0800353b
 80030bc:	0800354b 	.word	0x0800354b
 80030c0:	080002fd 	.word	0x080002fd
 80030c4:	0800355b 	.word	0x0800355b
 80030c8:	08000219 	.word	0x08000219
 80030cc:	08001139 	.word	0x08001139
 80030d0:	f0ffffff 	.word	0xf0ffffff
 80030d4:	ffff7fff 	.word	0xffff7fff
 80030d8:	02008000 	.word	0x02008000

080030dc <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	1dbb      	adds	r3, r7, #6
 80030ea:	801a      	strh	r2, [r3, #0]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2241      	movs	r2, #65	; 0x41
 80030f0:	5c9b      	ldrb	r3, [r3, r2]
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	001a      	movs	r2, r3
 80030f6:	2328      	movs	r3, #40	; 0x28
 80030f8:	4013      	ands	r3, r2
 80030fa:	2b28      	cmp	r3, #40	; 0x28
 80030fc:	d000      	beq.n	8003100 <HAL_I2C_Slave_Seq_Transmit_IT+0x24>
 80030fe:	e09f      	b.n	8003240 <HAL_I2C_Slave_Seq_Transmit_IT+0x164>
  {
    if ((pData == NULL) || (Size == 0U))
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_I2C_Slave_Seq_Transmit_IT+0x32>
 8003106:	1dbb      	adds	r3, r7, #6
 8003108:	881b      	ldrh	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d105      	bne.n	800311a <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2280      	movs	r2, #128	; 0x80
 8003112:	0092      	lsls	r2, r2, #2
 8003114:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e093      	b.n	8003242 <HAL_I2C_Slave_Seq_Transmit_IT+0x166>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800311a:	4a4c      	ldr	r2, [pc, #304]	; (800324c <HAL_I2C_Slave_Seq_Transmit_IT+0x170>)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	0011      	movs	r1, r2
 8003120:	0018      	movs	r0, r3
 8003122:	f001 fa99 	bl	8004658 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2240      	movs	r2, #64	; 0x40
 800312a:	5c9b      	ldrb	r3, [r3, r2]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_I2C_Slave_Seq_Transmit_IT+0x58>
 8003130:	2302      	movs	r3, #2
 8003132:	e086      	b.n	8003242 <HAL_I2C_Slave_Seq_Transmit_IT+0x166>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2240      	movs	r2, #64	; 0x40
 8003138:	2101      	movs	r1, #1
 800313a:	5499      	strb	r1, [r3, r2]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2241      	movs	r2, #65	; 0x41
 8003140:	5c9b      	ldrb	r3, [r3, r2]
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b2a      	cmp	r3, #42	; 0x2a
 8003146:	d12c      	bne.n	80031a2 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2102      	movs	r1, #2
 800314c:	0018      	movs	r0, r3
 800314e:	f001 fa83 	bl	8004658 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	2380      	movs	r3, #128	; 0x80
 800315a:	021b      	lsls	r3, r3, #8
 800315c:	401a      	ands	r2, r3
 800315e:	2380      	movs	r3, #128	; 0x80
 8003160:	021b      	lsls	r3, r3, #8
 8003162:	429a      	cmp	r2, r3
 8003164:	d11d      	bne.n	80031a2 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4937      	ldr	r1, [pc, #220]	; (8003250 <HAL_I2C_Slave_Seq_Transmit_IT+0x174>)
 8003172:	400a      	ands	r2, r1
 8003174:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317a:	2b00      	cmp	r3, #0
 800317c:	d011      	beq.n	80031a2 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003182:	4a34      	ldr	r2, [pc, #208]	; (8003254 <HAL_I2C_Slave_Seq_Transmit_IT+0x178>)
 8003184:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318a:	0018      	movs	r0, r3
 800318c:	f7ff fb5c 	bl	8002848 <HAL_DMA_Abort_IT>
 8003190:	1e03      	subs	r3, r0, #0
 8003192:	d006      	beq.n	80031a2 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003198:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319e:	0018      	movs	r0, r3
 80031a0:	4790      	blx	r2
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2241      	movs	r2, #65	; 0x41
 80031a6:	2129      	movs	r1, #41	; 0x29
 80031a8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2242      	movs	r2, #66	; 0x42
 80031ae:	2120      	movs	r1, #32
 80031b0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4923      	ldr	r1, [pc, #140]	; (8003250 <HAL_I2C_Slave_Seq_Transmit_IT+0x174>)
 80031c4:	400a      	ands	r2, r1
 80031c6:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	1dba      	adds	r2, r7, #6
 80031d2:	8812      	ldrh	r2, [r2, #0]
 80031d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	4a1b      	ldr	r2, [pc, #108]	; (8003258 <HAL_I2C_Slave_Seq_Transmit_IT+0x17c>)
 80031ea:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	2208      	movs	r2, #8
 80031f4:	4013      	ands	r3, r2
 80031f6:	3b08      	subs	r3, #8
 80031f8:	425a      	negs	r2, r3
 80031fa:	4153      	adcs	r3, r2
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	2117      	movs	r1, #23
 8003200:	187b      	adds	r3, r7, r1
 8003202:	701a      	strb	r2, [r3, #0]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	0c1b      	lsrs	r3, r3, #16
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2201      	movs	r2, #1
 8003210:	4013      	ands	r3, r2
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b01      	cmp	r3, #1
 8003216:	d107      	bne.n	8003228 <HAL_I2C_Slave_Seq_Transmit_IT+0x14c>
 8003218:	187b      	adds	r3, r7, r1
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_I2C_Slave_Seq_Transmit_IT+0x14c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2208      	movs	r2, #8
 8003226:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2240      	movs	r2, #64	; 0x40
 800322c:	2100      	movs	r1, #0
 800322e:	5499      	strb	r1, [r3, r2]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8003230:	4a06      	ldr	r2, [pc, #24]	; (800324c <HAL_I2C_Slave_Seq_Transmit_IT+0x170>)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	0011      	movs	r1, r2
 8003236:	0018      	movs	r0, r3
 8003238:	f001 f99e 	bl	8004578 <I2C_Enable_IRQ>

    return HAL_OK;
 800323c:	2300      	movs	r3, #0
 800323e:	e000      	b.n	8003242 <HAL_I2C_Slave_Seq_Transmit_IT+0x166>
  }
  else
  {
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
  }
}
 8003242:	0018      	movs	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	b006      	add	sp, #24
 8003248:	bd80      	pop	{r7, pc}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	00008001 	.word	0x00008001
 8003250:	ffff7fff 	.word	0xffff7fff
 8003254:	080044c7 	.word	0x080044c7
 8003258:	0800356d 	.word	0x0800356d

0800325c <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	603b      	str	r3, [r7, #0]
 8003268:	1dbb      	adds	r3, r7, #6
 800326a:	801a      	strh	r2, [r3, #0]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2241      	movs	r2, #65	; 0x41
 8003270:	5c9b      	ldrb	r3, [r3, r2]
 8003272:	b2db      	uxtb	r3, r3
 8003274:	001a      	movs	r2, r3
 8003276:	2328      	movs	r3, #40	; 0x28
 8003278:	4013      	ands	r3, r2
 800327a:	2b28      	cmp	r3, #40	; 0x28
 800327c:	d000      	beq.n	8003280 <HAL_I2C_Slave_Seq_Receive_IT+0x24>
 800327e:	e09f      	b.n	80033c0 <HAL_I2C_Slave_Seq_Receive_IT+0x164>
  {
    if ((pData == NULL) || (Size == 0U))
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_I2C_Slave_Seq_Receive_IT+0x32>
 8003286:	1dbb      	adds	r3, r7, #6
 8003288:	881b      	ldrh	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d105      	bne.n	800329a <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2280      	movs	r2, #128	; 0x80
 8003292:	0092      	lsls	r2, r2, #2
 8003294:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e093      	b.n	80033c2 <HAL_I2C_Slave_Seq_Receive_IT+0x166>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800329a:	4a4c      	ldr	r2, [pc, #304]	; (80033cc <HAL_I2C_Slave_Seq_Receive_IT+0x170>)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	0011      	movs	r1, r2
 80032a0:	0018      	movs	r0, r3
 80032a2:	f001 f9d9 	bl	8004658 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2240      	movs	r2, #64	; 0x40
 80032aa:	5c9b      	ldrb	r3, [r3, r2]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <HAL_I2C_Slave_Seq_Receive_IT+0x58>
 80032b0:	2302      	movs	r3, #2
 80032b2:	e086      	b.n	80033c2 <HAL_I2C_Slave_Seq_Receive_IT+0x166>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2240      	movs	r2, #64	; 0x40
 80032b8:	2101      	movs	r1, #1
 80032ba:	5499      	strb	r1, [r3, r2]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2241      	movs	r2, #65	; 0x41
 80032c0:	5c9b      	ldrb	r3, [r3, r2]
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b29      	cmp	r3, #41	; 0x29
 80032c6:	d12c      	bne.n	8003322 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2101      	movs	r1, #1
 80032cc:	0018      	movs	r0, r3
 80032ce:	f001 f9c3 	bl	8004658 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	2380      	movs	r3, #128	; 0x80
 80032da:	01db      	lsls	r3, r3, #7
 80032dc:	401a      	ands	r2, r3
 80032de:	2380      	movs	r3, #128	; 0x80
 80032e0:	01db      	lsls	r3, r3, #7
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d11d      	bne.n	8003322 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4937      	ldr	r1, [pc, #220]	; (80033d0 <HAL_I2C_Slave_Seq_Receive_IT+0x174>)
 80032f2:	400a      	ands	r2, r1
 80032f4:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d011      	beq.n	8003322 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003302:	4a34      	ldr	r2, [pc, #208]	; (80033d4 <HAL_I2C_Slave_Seq_Receive_IT+0x178>)
 8003304:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330a:	0018      	movs	r0, r3
 800330c:	f7ff fa9c 	bl	8002848 <HAL_DMA_Abort_IT>
 8003310:	1e03      	subs	r3, r0, #0
 8003312:	d006      	beq.n	8003322 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331e:	0018      	movs	r0, r3
 8003320:	4790      	blx	r2
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2241      	movs	r2, #65	; 0x41
 8003326:	212a      	movs	r1, #42	; 0x2a
 8003328:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2242      	movs	r2, #66	; 0x42
 800332e:	2120      	movs	r1, #32
 8003330:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4925      	ldr	r1, [pc, #148]	; (80033d8 <HAL_I2C_Slave_Seq_Receive_IT+0x17c>)
 8003344:	400a      	ands	r2, r1
 8003346:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	1dba      	adds	r2, r7, #6
 8003352:	8812      	ldrh	r2, [r2, #0]
 8003354:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335a:	b29a      	uxth	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4a1c      	ldr	r2, [pc, #112]	; (80033dc <HAL_I2C_Slave_Seq_Receive_IT+0x180>)
 800336a:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	2208      	movs	r2, #8
 8003374:	4013      	ands	r3, r2
 8003376:	3b08      	subs	r3, #8
 8003378:	425a      	negs	r2, r3
 800337a:	4153      	adcs	r3, r2
 800337c:	b2da      	uxtb	r2, r3
 800337e:	2117      	movs	r1, #23
 8003380:	187b      	adds	r3, r7, r1
 8003382:	701a      	strb	r2, [r3, #0]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	0c1b      	lsrs	r3, r3, #16
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2201      	movs	r2, #1
 8003390:	4013      	ands	r3, r2
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d107      	bne.n	80033a8 <HAL_I2C_Slave_Seq_Receive_IT+0x14c>
 8003398:	187b      	adds	r3, r7, r1
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_I2C_Slave_Seq_Receive_IT+0x14c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2208      	movs	r2, #8
 80033a6:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2240      	movs	r2, #64	; 0x40
 80033ac:	2100      	movs	r1, #0
 80033ae:	5499      	strb	r1, [r3, r2]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 80033b0:	4a06      	ldr	r2, [pc, #24]	; (80033cc <HAL_I2C_Slave_Seq_Receive_IT+0x170>)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	0011      	movs	r1, r2
 80033b6:	0018      	movs	r0, r3
 80033b8:	f001 f8de 	bl	8004578 <I2C_Enable_IRQ>

    return HAL_OK;
 80033bc:	2300      	movs	r3, #0
 80033be:	e000      	b.n	80033c2 <HAL_I2C_Slave_Seq_Receive_IT+0x166>
  }
  else
  {
    return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
  }
}
 80033c2:	0018      	movs	r0, r3
 80033c4:	46bd      	mov	sp, r7
 80033c6:	b006      	add	sp, #24
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	00008002 	.word	0x00008002
 80033d0:	ffffbfff 	.word	0xffffbfff
 80033d4:	080044c7 	.word	0x080044c7
 80033d8:	ffff7fff 	.word	0xffff7fff
 80033dc:	0800356d 	.word	0x0800356d

080033e0 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2241      	movs	r2, #65	; 0x41
 80033ec:	5c9b      	ldrb	r3, [r3, r2]
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d10f      	bne.n	8003414 <HAL_I2C_EnableListen_IT+0x34>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2241      	movs	r2, #65	; 0x41
 80033f8:	2128      	movs	r1, #40	; 0x28
 80033fa:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR = I2C_Slave_ISR_IT;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a08      	ldr	r2, [pc, #32]	; (8003420 <HAL_I2C_EnableListen_IT+0x40>)
 8003400:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003402:	2380      	movs	r3, #128	; 0x80
 8003404:	021a      	lsls	r2, r3, #8
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	0011      	movs	r1, r2
 800340a:	0018      	movs	r0, r3
 800340c:	f001 f8b4 	bl	8004578 <I2C_Enable_IRQ>

    return HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	e000      	b.n	8003416 <HAL_I2C_EnableListen_IT+0x36>
  }
  else
  {
    return HAL_BUSY;
 8003414:	2302      	movs	r3, #2
  }
}
 8003416:	0018      	movs	r0, r3
 8003418:	46bd      	mov	sp, r7
 800341a:	b002      	add	sp, #8
 800341c:	bd80      	pop	{r7, pc}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	0800356d 	.word	0x0800356d

08003424 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	68f9      	ldr	r1, [r7, #12]
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	4798      	blx	r3
  }
}
 8003450:	46c0      	nop			; (mov r8, r8)
 8003452:	46bd      	mov	sp, r7
 8003454:	b004      	add	sp, #16
 8003456:	bd80      	pop	{r7, pc}

08003458 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	2380      	movs	r3, #128	; 0x80
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	4013      	ands	r3, r2
 8003478:	d00e      	beq.n	8003498 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	2280      	movs	r2, #128	; 0x80
 800347e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003480:	d00a      	beq.n	8003498 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003486:	2201      	movs	r2, #1
 8003488:	431a      	orrs	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2280      	movs	r2, #128	; 0x80
 8003494:	0052      	lsls	r2, r2, #1
 8003496:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	2380      	movs	r3, #128	; 0x80
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	4013      	ands	r3, r2
 80034a0:	d00e      	beq.n	80034c0 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	2280      	movs	r2, #128	; 0x80
 80034a6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80034a8:	d00a      	beq.n	80034c0 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ae:	2208      	movs	r2, #8
 80034b0:	431a      	orrs	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2280      	movs	r2, #128	; 0x80
 80034bc:	00d2      	lsls	r2, r2, #3
 80034be:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	2380      	movs	r3, #128	; 0x80
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4013      	ands	r3, r2
 80034c8:	d00e      	beq.n	80034e8 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	2280      	movs	r2, #128	; 0x80
 80034ce:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80034d0:	d00a      	beq.n	80034e8 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d6:	2202      	movs	r2, #2
 80034d8:	431a      	orrs	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2280      	movs	r2, #128	; 0x80
 80034e4:	0092      	lsls	r2, r2, #2
 80034e6:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ec:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	220b      	movs	r2, #11
 80034f2:	4013      	ands	r3, r2
 80034f4:	d005      	beq.n	8003502 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	0011      	movs	r1, r2
 80034fc:	0018      	movs	r0, r3
 80034fe:	f000 feb3 	bl	8004268 <I2C_ITError>
  }
}
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	46bd      	mov	sp, r7
 8003506:	b006      	add	sp, #24
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b082      	sub	sp, #8
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	46bd      	mov	sp, r7
 8003516:	b002      	add	sp, #8
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	46bd      	mov	sp, r7
 8003526:	b002      	add	sp, #8
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b082      	sub	sp, #8
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003532:	46c0      	nop			; (mov r8, r8)
 8003534:	46bd      	mov	sp, r7
 8003536:	b002      	add	sp, #8
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003542:	46c0      	nop			; (mov r8, r8)
 8003544:	46bd      	mov	sp, r7
 8003546:	b002      	add	sp, #8
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b082      	sub	sp, #8
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	46bd      	mov	sp, r7
 8003556:	b002      	add	sp, #8
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b082      	sub	sp, #8
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	46bd      	mov	sp, r7
 8003566:	b002      	add	sp, #8
 8003568:	bd80      	pop	{r7, pc}
	...

0800356c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2240      	movs	r2, #64	; 0x40
 8003586:	5c9b      	ldrb	r3, [r3, r2]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <I2C_Slave_ISR_IT+0x24>
 800358c:	2302      	movs	r3, #2
 800358e:	e0e6      	b.n	800375e <I2C_Slave_ISR_IT+0x1f2>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2240      	movs	r2, #64	; 0x40
 8003594:	2101      	movs	r1, #1
 8003596:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	2220      	movs	r2, #32
 800359c:	4013      	ands	r3, r2
 800359e:	d009      	beq.n	80035b4 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2220      	movs	r2, #32
 80035a4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80035a6:	d005      	beq.n	80035b4 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	0011      	movs	r1, r2
 80035ae:	0018      	movs	r0, r3
 80035b0:	f000 fce0 	bl	8003f74 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	2210      	movs	r2, #16
 80035b8:	4013      	ands	r3, r2
 80035ba:	d052      	beq.n	8003662 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2210      	movs	r2, #16
 80035c0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80035c2:	d04e      	beq.n	8003662 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d12d      	bne.n	800362a <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2241      	movs	r2, #65	; 0x41
 80035d2:	5c9b      	ldrb	r3, [r3, r2]
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b28      	cmp	r3, #40	; 0x28
 80035d8:	d10b      	bne.n	80035f2 <I2C_Slave_ISR_IT+0x86>
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	2380      	movs	r3, #128	; 0x80
 80035de:	049b      	lsls	r3, r3, #18
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d106      	bne.n	80035f2 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	0011      	movs	r1, r2
 80035ea:	0018      	movs	r0, r3
 80035ec:	f000 fde4 	bl	80041b8 <I2C_ITListenCplt>
 80035f0:	e036      	b.n	8003660 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2241      	movs	r2, #65	; 0x41
 80035f6:	5c9b      	ldrb	r3, [r3, r2]
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b29      	cmp	r3, #41	; 0x29
 80035fc:	d110      	bne.n	8003620 <I2C_Slave_ISR_IT+0xb4>
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	4a59      	ldr	r2, [pc, #356]	; (8003768 <I2C_Slave_ISR_IT+0x1fc>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00c      	beq.n	8003620 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2210      	movs	r2, #16
 800360c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	0018      	movs	r0, r3
 8003612:	f000 ff36 	bl	8004482 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	0018      	movs	r0, r3
 800361a:	f000 fb73 	bl	8003d04 <I2C_ITSlaveSeqCplt>
 800361e:	e01f      	b.n	8003660 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2210      	movs	r2, #16
 8003626:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003628:	e091      	b.n	800374e <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2210      	movs	r2, #16
 8003630:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003636:	2204      	movs	r2, #4
 8003638:	431a      	orrs	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d005      	beq.n	8003650 <I2C_Slave_ISR_IT+0xe4>
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	2380      	movs	r3, #128	; 0x80
 8003648:	045b      	lsls	r3, r3, #17
 800364a:	429a      	cmp	r2, r3
 800364c:	d000      	beq.n	8003650 <I2C_Slave_ISR_IT+0xe4>
 800364e:	e07e      	b.n	800374e <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	0011      	movs	r1, r2
 8003658:	0018      	movs	r0, r3
 800365a:	f000 fe05 	bl	8004268 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800365e:	e076      	b.n	800374e <I2C_Slave_ISR_IT+0x1e2>
 8003660:	e075      	b.n	800374e <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	2204      	movs	r2, #4
 8003666:	4013      	ands	r3, r2
 8003668:	d02f      	beq.n	80036ca <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2204      	movs	r2, #4
 800366e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003670:	d02b      	beq.n	80036ca <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003676:	b29b      	uxth	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	d018      	beq.n	80036ae <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d14c      	bne.n	8003752 <I2C_Slave_ISR_IT+0x1e6>
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	4a2b      	ldr	r2, [pc, #172]	; (8003768 <I2C_Slave_ISR_IT+0x1fc>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d048      	beq.n	8003752 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	0018      	movs	r0, r3
 80036c4:	f000 fb1e 	bl	8003d04 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80036c8:	e043      	b.n	8003752 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	2208      	movs	r2, #8
 80036ce:	4013      	ands	r3, r2
 80036d0:	d00a      	beq.n	80036e8 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2208      	movs	r2, #8
 80036d6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80036d8:	d006      	beq.n	80036e8 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	0011      	movs	r1, r2
 80036e0:	0018      	movs	r0, r3
 80036e2:	f000 fa25 	bl	8003b30 <I2C_ITAddrCplt>
 80036e6:	e035      	b.n	8003754 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	2202      	movs	r2, #2
 80036ec:	4013      	ands	r3, r2
 80036ee:	d031      	beq.n	8003754 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80036f6:	d02d      	beq.n	8003754 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d018      	beq.n	8003734 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	781a      	ldrb	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	1c5a      	adds	r2, r3, #1
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371c:	b29b      	uxth	r3, r3
 800371e:	3b01      	subs	r3, #1
 8003720:	b29a      	uxth	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372a:	3b01      	subs	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	851a      	strh	r2, [r3, #40]	; 0x28
 8003732:	e00f      	b.n	8003754 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	2380      	movs	r3, #128	; 0x80
 8003738:	045b      	lsls	r3, r3, #17
 800373a:	429a      	cmp	r2, r3
 800373c:	d002      	beq.n	8003744 <I2C_Slave_ISR_IT+0x1d8>
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d107      	bne.n	8003754 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	0018      	movs	r0, r3
 8003748:	f000 fadc 	bl	8003d04 <I2C_ITSlaveSeqCplt>
 800374c:	e002      	b.n	8003754 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	e000      	b.n	8003754 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8003752:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2240      	movs	r2, #64	; 0x40
 8003758:	2100      	movs	r1, #0
 800375a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	0018      	movs	r0, r3
 8003760:	46bd      	mov	sp, r7
 8003762:	b006      	add	sp, #24
 8003764:	bd80      	pop	{r7, pc}
 8003766:	46c0      	nop			; (mov r8, r8)
 8003768:	ffff0000 	.word	0xffff0000

0800376c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800376c:	b590      	push	{r4, r7, lr}
 800376e:	b089      	sub	sp, #36	; 0x24
 8003770:	af02      	add	r7, sp, #8
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2240      	movs	r2, #64	; 0x40
 800377c:	5c9b      	ldrb	r3, [r3, r2]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d101      	bne.n	8003786 <I2C_Master_ISR_DMA+0x1a>
 8003782:	2302      	movs	r3, #2
 8003784:	e0e7      	b.n	8003956 <I2C_Master_ISR_DMA+0x1ea>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2240      	movs	r2, #64	; 0x40
 800378a:	2101      	movs	r1, #1
 800378c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2210      	movs	r2, #16
 8003792:	4013      	ands	r3, r2
 8003794:	d017      	beq.n	80037c6 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2210      	movs	r2, #16
 800379a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800379c:	d013      	beq.n	80037c6 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2210      	movs	r2, #16
 80037a4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037aa:	2204      	movs	r2, #4
 80037ac:	431a      	orrs	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2120      	movs	r1, #32
 80037b6:	0018      	movs	r0, r3
 80037b8:	f000 fede 	bl	8004578 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	0018      	movs	r0, r3
 80037c0:	f000 fe5f 	bl	8004482 <I2C_Flush_TXDR>
 80037c4:	e0c2      	b.n	800394c <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	2280      	movs	r2, #128	; 0x80
 80037ca:	4013      	ands	r3, r2
 80037cc:	d100      	bne.n	80037d0 <I2C_Master_ISR_DMA+0x64>
 80037ce:	e07c      	b.n	80038ca <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2240      	movs	r2, #64	; 0x40
 80037d4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80037d6:	d100      	bne.n	80037da <I2C_Master_ISR_DMA+0x6e>
 80037d8:	e077      	b.n	80038ca <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2140      	movs	r1, #64	; 0x40
 80037e6:	438a      	bics	r2, r1
 80037e8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d055      	beq.n	80038a0 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	2312      	movs	r3, #18
 80037fe:	18fb      	adds	r3, r7, r3
 8003800:	0592      	lsls	r2, r2, #22
 8003802:	0d92      	lsrs	r2, r2, #22
 8003804:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380a:	b29b      	uxth	r3, r3
 800380c:	2bff      	cmp	r3, #255	; 0xff
 800380e:	d906      	bls.n	800381e <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	22ff      	movs	r2, #255	; 0xff
 8003814:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003816:	2380      	movs	r3, #128	; 0x80
 8003818:	045b      	lsls	r3, r3, #17
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	e010      	b.n	8003840 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003822:	b29a      	uxth	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382c:	4a4c      	ldr	r2, [pc, #304]	; (8003960 <I2C_Master_ISR_DMA+0x1f4>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d003      	beq.n	800383a <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003836:	617b      	str	r3, [r7, #20]
 8003838:	e002      	b.n	8003840 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800383a:	2380      	movs	r3, #128	; 0x80
 800383c:	049b      	lsls	r3, r3, #18
 800383e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003844:	b2da      	uxtb	r2, r3
 8003846:	697c      	ldr	r4, [r7, #20]
 8003848:	2312      	movs	r3, #18
 800384a:	18fb      	adds	r3, r7, r3
 800384c:	8819      	ldrh	r1, [r3, #0]
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	2300      	movs	r3, #0
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	0023      	movs	r3, r4
 8003856:	f000 fe55 	bl	8004504 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385e:	b29a      	uxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	b29a      	uxth	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2241      	movs	r2, #65	; 0x41
 8003870:	5c9b      	ldrb	r3, [r3, r2]
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b22      	cmp	r3, #34	; 0x22
 8003876:	d109      	bne.n	800388c <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2180      	movs	r1, #128	; 0x80
 8003884:	0209      	lsls	r1, r1, #8
 8003886:	430a      	orrs	r2, r1
 8003888:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800388a:	e05f      	b.n	800394c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2180      	movs	r1, #128	; 0x80
 8003898:	01c9      	lsls	r1, r1, #7
 800389a:	430a      	orrs	r2, r1
 800389c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800389e:	e055      	b.n	800394c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	2380      	movs	r3, #128	; 0x80
 80038a8:	049b      	lsls	r3, r3, #18
 80038aa:	401a      	ands	r2, r3
 80038ac:	2380      	movs	r3, #128	; 0x80
 80038ae:	049b      	lsls	r3, r3, #18
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d004      	beq.n	80038be <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	0018      	movs	r0, r3
 80038b8:	f000 f9e1 	bl	8003c7e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80038bc:	e046      	b.n	800394c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2140      	movs	r1, #64	; 0x40
 80038c2:	0018      	movs	r0, r3
 80038c4:	f000 fcd0 	bl	8004268 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80038c8:	e040      	b.n	800394c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2240      	movs	r2, #64	; 0x40
 80038ce:	4013      	ands	r3, r2
 80038d0:	d02c      	beq.n	800392c <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2240      	movs	r2, #64	; 0x40
 80038d6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80038d8:	d028      	beq.n	800392c <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038de:	b29b      	uxth	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d11d      	bne.n	8003920 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	2380      	movs	r3, #128	; 0x80
 80038ec:	049b      	lsls	r3, r3, #18
 80038ee:	401a      	ands	r2, r3
 80038f0:	2380      	movs	r3, #128	; 0x80
 80038f2:	049b      	lsls	r3, r3, #18
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d028      	beq.n	800394a <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	4a18      	ldr	r2, [pc, #96]	; (8003960 <I2C_Master_ISR_DMA+0x1f4>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d109      	bne.n	8003916 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2180      	movs	r1, #128	; 0x80
 800390e:	01c9      	lsls	r1, r1, #7
 8003910:	430a      	orrs	r2, r1
 8003912:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003914:	e019      	b.n	800394a <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	0018      	movs	r0, r3
 800391a:	f000 f9b0 	bl	8003c7e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800391e:	e014      	b.n	800394a <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2140      	movs	r1, #64	; 0x40
 8003924:	0018      	movs	r0, r3
 8003926:	f000 fc9f 	bl	8004268 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800392a:	e00e      	b.n	800394a <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2220      	movs	r2, #32
 8003930:	4013      	ands	r3, r2
 8003932:	d00b      	beq.n	800394c <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2220      	movs	r2, #32
 8003938:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800393a:	d007      	beq.n	800394c <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	0011      	movs	r1, r2
 8003942:	0018      	movs	r0, r3
 8003944:	f000 fa44 	bl	8003dd0 <I2C_ITMasterCplt>
 8003948:	e000      	b.n	800394c <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800394a:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2240      	movs	r2, #64	; 0x40
 8003950:	2100      	movs	r1, #0
 8003952:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	0018      	movs	r0, r3
 8003958:	46bd      	mov	sp, r7
 800395a:	b007      	add	sp, #28
 800395c:	bd90      	pop	{r4, r7, pc}
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	ffff0000 	.word	0xffff0000

08003964 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b088      	sub	sp, #32
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003976:	2300      	movs	r3, #0
 8003978:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2240      	movs	r2, #64	; 0x40
 800397e:	5c9b      	ldrb	r3, [r3, r2]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d101      	bne.n	8003988 <I2C_Slave_ISR_DMA+0x24>
 8003984:	2302      	movs	r3, #2
 8003986:	e0cd      	b.n	8003b24 <I2C_Slave_ISR_DMA+0x1c0>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2240      	movs	r2, #64	; 0x40
 800398c:	2101      	movs	r1, #1
 800398e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2220      	movs	r2, #32
 8003994:	4013      	ands	r3, r2
 8003996:	d009      	beq.n	80039ac <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2220      	movs	r2, #32
 800399c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800399e:	d005      	beq.n	80039ac <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	0011      	movs	r1, r2
 80039a6:	0018      	movs	r0, r3
 80039a8:	f000 fae4 	bl	8003f74 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	2210      	movs	r2, #16
 80039b0:	4013      	ands	r3, r2
 80039b2:	d100      	bne.n	80039b6 <I2C_Slave_ISR_DMA+0x52>
 80039b4:	e0a3      	b.n	8003afe <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2210      	movs	r2, #16
 80039ba:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80039bc:	d100      	bne.n	80039c0 <I2C_Slave_ISR_DMA+0x5c>
 80039be:	e09e      	b.n	8003afe <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	2380      	movs	r3, #128	; 0x80
 80039c4:	01db      	lsls	r3, r3, #7
 80039c6:	4013      	ands	r3, r2
 80039c8:	d105      	bne.n	80039d6 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	2380      	movs	r3, #128	; 0x80
 80039ce:	021b      	lsls	r3, r3, #8
 80039d0:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80039d2:	d100      	bne.n	80039d6 <I2C_Slave_ISR_DMA+0x72>
 80039d4:	e08c      	b.n	8003af0 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00c      	beq.n	80039f8 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	2380      	movs	r3, #128	; 0x80
 80039e2:	021b      	lsls	r3, r3, #8
 80039e4:	4013      	ands	r3, r2
 80039e6:	d007      	beq.n	80039f8 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 80039f4:	2301      	movs	r3, #1
 80039f6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00c      	beq.n	8003a1a <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	2380      	movs	r3, #128	; 0x80
 8003a04:	01db      	lsls	r3, r3, #7
 8003a06:	4013      	ands	r3, r2
 8003a08:	d007      	beq.n	8003a1a <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8003a16:	2301      	movs	r3, #1
 8003a18:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d12d      	bne.n	8003a7c <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2241      	movs	r2, #65	; 0x41
 8003a24:	5c9b      	ldrb	r3, [r3, r2]
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b28      	cmp	r3, #40	; 0x28
 8003a2a:	d10b      	bne.n	8003a44 <I2C_Slave_ISR_DMA+0xe0>
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	2380      	movs	r3, #128	; 0x80
 8003a30:	049b      	lsls	r3, r3, #18
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d106      	bne.n	8003a44 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	0011      	movs	r1, r2
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f000 fbbb 	bl	80041b8 <I2C_ITListenCplt>
 8003a42:	e054      	b.n	8003aee <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2241      	movs	r2, #65	; 0x41
 8003a48:	5c9b      	ldrb	r3, [r3, r2]
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b29      	cmp	r3, #41	; 0x29
 8003a4e:	d110      	bne.n	8003a72 <I2C_Slave_ISR_DMA+0x10e>
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	4a36      	ldr	r2, [pc, #216]	; (8003b2c <I2C_Slave_ISR_DMA+0x1c8>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d00c      	beq.n	8003a72 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2210      	movs	r2, #16
 8003a5e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	0018      	movs	r0, r3
 8003a64:	f000 fd0d 	bl	8004482 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	f000 f94a 	bl	8003d04 <I2C_ITSlaveSeqCplt>
 8003a70:	e03d      	b.n	8003aee <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2210      	movs	r2, #16
 8003a78:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003a7a:	e03e      	b.n	8003afa <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2210      	movs	r2, #16
 8003a82:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a88:	2204      	movs	r2, #4
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003a90:	2317      	movs	r3, #23
 8003a92:	18fb      	adds	r3, r7, r3
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	2141      	movs	r1, #65	; 0x41
 8003a98:	5c52      	ldrb	r2, [r2, r1]
 8003a9a:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d004      	beq.n	8003aac <I2C_Slave_ISR_DMA+0x148>
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	2380      	movs	r3, #128	; 0x80
 8003aa6:	045b      	lsls	r3, r3, #17
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d126      	bne.n	8003afa <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003aac:	2217      	movs	r2, #23
 8003aae:	18bb      	adds	r3, r7, r2
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	2b21      	cmp	r3, #33	; 0x21
 8003ab4:	d003      	beq.n	8003abe <I2C_Slave_ISR_DMA+0x15a>
 8003ab6:	18bb      	adds	r3, r7, r2
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	2b29      	cmp	r3, #41	; 0x29
 8003abc:	d103      	bne.n	8003ac6 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2221      	movs	r2, #33	; 0x21
 8003ac2:	631a      	str	r2, [r3, #48]	; 0x30
 8003ac4:	e00b      	b.n	8003ade <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003ac6:	2217      	movs	r2, #23
 8003ac8:	18bb      	adds	r3, r7, r2
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b22      	cmp	r3, #34	; 0x22
 8003ace:	d003      	beq.n	8003ad8 <I2C_Slave_ISR_DMA+0x174>
 8003ad0:	18bb      	adds	r3, r7, r2
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2b2a      	cmp	r3, #42	; 0x2a
 8003ad6:	d102      	bne.n	8003ade <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2222      	movs	r2, #34	; 0x22
 8003adc:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	0011      	movs	r1, r2
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	f000 fbbe 	bl	8004268 <I2C_ITError>
      if (treatdmanack == 1U)
 8003aec:	e005      	b.n	8003afa <I2C_Slave_ISR_DMA+0x196>
 8003aee:	e004      	b.n	8003afa <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2210      	movs	r2, #16
 8003af6:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003af8:	e00f      	b.n	8003b1a <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8003afa:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003afc:	e00d      	b.n	8003b1a <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2208      	movs	r2, #8
 8003b02:	4013      	ands	r3, r2
 8003b04:	d009      	beq.n	8003b1a <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2208      	movs	r2, #8
 8003b0a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003b0c:	d005      	beq.n	8003b1a <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	0011      	movs	r1, r2
 8003b14:	0018      	movs	r0, r3
 8003b16:	f000 f80b 	bl	8003b30 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2240      	movs	r2, #64	; 0x40
 8003b1e:	2100      	movs	r1, #0
 8003b20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	0018      	movs	r0, r3
 8003b26:	46bd      	mov	sp, r7
 8003b28:	b008      	add	sp, #32
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	ffff0000 	.word	0xffff0000

08003b30 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003b30:	b5b0      	push	{r4, r5, r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2241      	movs	r2, #65	; 0x41
 8003b3e:	5c9b      	ldrb	r3, [r3, r2]
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	001a      	movs	r2, r3
 8003b44:	2328      	movs	r3, #40	; 0x28
 8003b46:	4013      	ands	r3, r2
 8003b48:	2b28      	cmp	r3, #40	; 0x28
 8003b4a:	d000      	beq.n	8003b4e <I2C_ITAddrCplt+0x1e>
 8003b4c:	e08b      	b.n	8003c66 <I2C_ITAddrCplt+0x136>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	0c1b      	lsrs	r3, r3, #16
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	250f      	movs	r5, #15
 8003b5a:	197b      	adds	r3, r7, r5
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	400a      	ands	r2, r1
 8003b60:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	0c1b      	lsrs	r3, r3, #16
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	200c      	movs	r0, #12
 8003b6e:	183b      	adds	r3, r7, r0
 8003b70:	21fe      	movs	r1, #254	; 0xfe
 8003b72:	400a      	ands	r2, r1
 8003b74:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	240a      	movs	r4, #10
 8003b80:	193b      	adds	r3, r7, r4
 8003b82:	0592      	lsls	r2, r2, #22
 8003b84:	0d92      	lsrs	r2, r2, #22
 8003b86:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	2308      	movs	r3, #8
 8003b92:	18fb      	adds	r3, r7, r3
 8003b94:	21fe      	movs	r1, #254	; 0xfe
 8003b96:	400a      	ands	r2, r1
 8003b98:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d14a      	bne.n	8003c38 <I2C_ITAddrCplt+0x108>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003ba2:	0021      	movs	r1, r4
 8003ba4:	187b      	adds	r3, r7, r1
 8003ba6:	881b      	ldrh	r3, [r3, #0]
 8003ba8:	09db      	lsrs	r3, r3, #7
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	183b      	adds	r3, r7, r0
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	4053      	eors	r3, r2
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	001a      	movs	r2, r3
 8003bb6:	2306      	movs	r3, #6
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d121      	bne.n	8003c00 <I2C_ITAddrCplt+0xd0>
      {
        slaveaddrcode = ownadd1code;
 8003bbc:	183b      	adds	r3, r7, r0
 8003bbe:	187a      	adds	r2, r7, r1
 8003bc0:	8812      	ldrh	r2, [r2, #0]
 8003bc2:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc8:	1c5a      	adds	r2, r3, #1
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d14f      	bne.n	8003c76 <I2C_ITAddrCplt+0x146>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2208      	movs	r2, #8
 8003be2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2240      	movs	r2, #64	; 0x40
 8003be8:	2100      	movs	r1, #0
 8003bea:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bf0:	183a      	adds	r2, r7, r0
 8003bf2:	8814      	ldrh	r4, [r2, #0]
 8003bf4:	197a      	adds	r2, r7, r5
 8003bf6:	7811      	ldrb	r1, [r2, #0]
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	0022      	movs	r2, r4
 8003bfc:	4798      	blx	r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003bfe:	e03a      	b.n	8003c76 <I2C_ITAddrCplt+0x146>
        slaveaddrcode = ownadd2code;
 8003c00:	240c      	movs	r4, #12
 8003c02:	193b      	adds	r3, r7, r4
 8003c04:	2208      	movs	r2, #8
 8003c06:	18ba      	adds	r2, r7, r2
 8003c08:	8812      	ldrh	r2, [r2, #0]
 8003c0a:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003c0c:	2380      	movs	r3, #128	; 0x80
 8003c0e:	021a      	lsls	r2, r3, #8
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	0011      	movs	r1, r2
 8003c14:	0018      	movs	r0, r3
 8003c16:	f000 fd1f 	bl	8004658 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2240      	movs	r2, #64	; 0x40
 8003c1e:	2100      	movs	r1, #0
 8003c20:	5499      	strb	r1, [r3, r2]
        hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c26:	193a      	adds	r2, r7, r4
 8003c28:	8814      	ldrh	r4, [r2, #0]
 8003c2a:	220f      	movs	r2, #15
 8003c2c:	18ba      	adds	r2, r7, r2
 8003c2e:	7811      	ldrb	r1, [r2, #0]
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	0022      	movs	r2, r4
 8003c34:	4798      	blx	r3
}
 8003c36:	e01e      	b.n	8003c76 <I2C_ITAddrCplt+0x146>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003c38:	2380      	movs	r3, #128	; 0x80
 8003c3a:	021a      	lsls	r2, r3, #8
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	0011      	movs	r1, r2
 8003c40:	0018      	movs	r0, r3
 8003c42:	f000 fd09 	bl	8004658 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2240      	movs	r2, #64	; 0x40
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	5499      	strb	r1, [r3, r2]
      hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c52:	220c      	movs	r2, #12
 8003c54:	18ba      	adds	r2, r7, r2
 8003c56:	8814      	ldrh	r4, [r2, #0]
 8003c58:	220f      	movs	r2, #15
 8003c5a:	18ba      	adds	r2, r7, r2
 8003c5c:	7811      	ldrb	r1, [r2, #0]
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	0022      	movs	r2, r4
 8003c62:	4798      	blx	r3
}
 8003c64:	e007      	b.n	8003c76 <I2C_ITAddrCplt+0x146>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2208      	movs	r2, #8
 8003c6c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2240      	movs	r2, #64	; 0x40
 8003c72:	2100      	movs	r1, #0
 8003c74:	5499      	strb	r1, [r3, r2]
}
 8003c76:	46c0      	nop			; (mov r8, r8)
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	b004      	add	sp, #16
 8003c7c:	bdb0      	pop	{r4, r5, r7, pc}

08003c7e <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b082      	sub	sp, #8
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2242      	movs	r2, #66	; 0x42
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2241      	movs	r2, #65	; 0x41
 8003c92:	5c9b      	ldrb	r3, [r3, r2]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b21      	cmp	r3, #33	; 0x21
 8003c98:	d118      	bne.n	8003ccc <I2C_ITMasterSeqCplt+0x4e>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2241      	movs	r2, #65	; 0x41
 8003c9e:	2120      	movs	r1, #32
 8003ca0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2211      	movs	r2, #17
 8003ca6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	f000 fcd0 	bl	8004658 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2240      	movs	r2, #64	; 0x40
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	0010      	movs	r0, r2
 8003cc8:	4798      	blx	r3
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003cca:	e017      	b.n	8003cfc <I2C_ITMasterSeqCplt+0x7e>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2241      	movs	r2, #65	; 0x41
 8003cd0:	2120      	movs	r1, #32
 8003cd2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2212      	movs	r2, #18
 8003cd8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2102      	movs	r1, #2
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	f000 fcb7 	bl	8004658 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2240      	movs	r2, #64	; 0x40
 8003cee:	2100      	movs	r1, #0
 8003cf0:	5499      	strb	r1, [r3, r2]
    hi2c->MasterRxCpltCallback(hi2c);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	0010      	movs	r0, r2
 8003cfa:	4798      	blx	r3
}
 8003cfc:	46c0      	nop			; (mov r8, r8)
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	b002      	add	sp, #8
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2242      	movs	r2, #66	; 0x42
 8003d18:	2100      	movs	r1, #0
 8003d1a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	2380      	movs	r3, #128	; 0x80
 8003d20:	01db      	lsls	r3, r3, #7
 8003d22:	4013      	ands	r3, r2
 8003d24:	d008      	beq.n	8003d38 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4925      	ldr	r1, [pc, #148]	; (8003dc8 <I2C_ITSlaveSeqCplt+0xc4>)
 8003d32:	400a      	ands	r2, r1
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	e00c      	b.n	8003d52 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	2380      	movs	r3, #128	; 0x80
 8003d3c:	021b      	lsls	r3, r3, #8
 8003d3e:	4013      	ands	r3, r2
 8003d40:	d007      	beq.n	8003d52 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	491f      	ldr	r1, [pc, #124]	; (8003dcc <I2C_ITSlaveSeqCplt+0xc8>)
 8003d4e:	400a      	ands	r2, r1
 8003d50:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2241      	movs	r2, #65	; 0x41
 8003d56:	5c9b      	ldrb	r3, [r3, r2]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b29      	cmp	r3, #41	; 0x29
 8003d5c:	d115      	bne.n	8003d8a <I2C_ITSlaveSeqCplt+0x86>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2241      	movs	r2, #65	; 0x41
 8003d62:	2128      	movs	r1, #40	; 0x28
 8003d64:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2221      	movs	r2, #33	; 0x21
 8003d6a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2101      	movs	r1, #1
 8003d70:	0018      	movs	r0, r3
 8003d72:	f000 fc71 	bl	8004658 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2240      	movs	r2, #64	; 0x40
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	0010      	movs	r0, r2
 8003d86:	4798      	blx	r3
  }
  else
  {
    /* Nothing to do */
  }
}
 8003d88:	e01a      	b.n	8003dc0 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2241      	movs	r2, #65	; 0x41
 8003d8e:	5c9b      	ldrb	r3, [r3, r2]
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b2a      	cmp	r3, #42	; 0x2a
 8003d94:	d114      	bne.n	8003dc0 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2241      	movs	r2, #65	; 0x41
 8003d9a:	2128      	movs	r1, #40	; 0x28
 8003d9c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2222      	movs	r2, #34	; 0x22
 8003da2:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2102      	movs	r1, #2
 8003da8:	0018      	movs	r0, r3
 8003daa:	f000 fc55 	bl	8004658 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2240      	movs	r2, #64	; 0x40
 8003db2:	2100      	movs	r1, #0
 8003db4:	5499      	strb	r1, [r3, r2]
    hi2c->SlaveRxCpltCallback(hi2c);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	0010      	movs	r0, r2
 8003dbe:	4798      	blx	r3
}
 8003dc0:	46c0      	nop			; (mov r8, r8)
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	b004      	add	sp, #16
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	ffffbfff 	.word	0xffffbfff
 8003dcc:	ffff7fff 	.word	0xffff7fff

08003dd0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2220      	movs	r2, #32
 8003de4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2241      	movs	r2, #65	; 0x41
 8003dea:	5c9b      	ldrb	r3, [r3, r2]
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b21      	cmp	r3, #33	; 0x21
 8003df0:	d108      	bne.n	8003e04 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2101      	movs	r1, #1
 8003df6:	0018      	movs	r0, r3
 8003df8:	f000 fc2e 	bl	8004658 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2211      	movs	r2, #17
 8003e00:	631a      	str	r2, [r3, #48]	; 0x30
 8003e02:	e00d      	b.n	8003e20 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2241      	movs	r2, #65	; 0x41
 8003e08:	5c9b      	ldrb	r3, [r3, r2]
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b22      	cmp	r3, #34	; 0x22
 8003e0e:	d107      	bne.n	8003e20 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2102      	movs	r1, #2
 8003e14:	0018      	movs	r0, r3
 8003e16:	f000 fc1f 	bl	8004658 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2212      	movs	r2, #18
 8003e1e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4950      	ldr	r1, [pc, #320]	; (8003f6c <I2C_ITMasterCplt+0x19c>)
 8003e2c:	400a      	ands	r2, r1
 8003e2e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a4d      	ldr	r2, [pc, #308]	; (8003f70 <I2C_ITMasterCplt+0x1a0>)
 8003e3a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	2210      	movs	r2, #16
 8003e40:	4013      	ands	r3, r2
 8003e42:	d009      	beq.n	8003e58 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2210      	movs	r2, #16
 8003e4a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e50:	2204      	movs	r2, #4
 8003e52:	431a      	orrs	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2241      	movs	r2, #65	; 0x41
 8003e5c:	5c9b      	ldrb	r3, [r3, r2]
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b60      	cmp	r3, #96	; 0x60
 8003e62:	d109      	bne.n	8003e78 <I2C_ITMasterCplt+0xa8>
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	2204      	movs	r2, #4
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d005      	beq.n	8003e78 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003e76:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	f000 fb01 	bl	8004482 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e84:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2241      	movs	r2, #65	; 0x41
 8003e8a:	5c9b      	ldrb	r3, [r3, r2]
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b60      	cmp	r3, #96	; 0x60
 8003e90:	d002      	beq.n	8003e98 <I2C_ITMasterCplt+0xc8>
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d007      	beq.n	8003ea8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	0011      	movs	r1, r2
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f000 f9e1 	bl	8004268 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003ea6:	e05c      	b.n	8003f62 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2241      	movs	r2, #65	; 0x41
 8003eac:	5c9b      	ldrb	r3, [r3, r2]
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b21      	cmp	r3, #33	; 0x21
 8003eb2:	d128      	bne.n	8003f06 <I2C_ITMasterCplt+0x136>
    hi2c->State = HAL_I2C_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2241      	movs	r2, #65	; 0x41
 8003eb8:	2120      	movs	r1, #32
 8003eba:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2242      	movs	r2, #66	; 0x42
 8003ec6:	5c9b      	ldrb	r3, [r3, r2]
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b40      	cmp	r3, #64	; 0x40
 8003ecc:	d10d      	bne.n	8003eea <I2C_ITMasterCplt+0x11a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2242      	movs	r2, #66	; 0x42
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2240      	movs	r2, #64	; 0x40
 8003eda:	2100      	movs	r1, #0
 8003edc:	5499      	strb	r1, [r3, r2]
      hi2c->MemTxCpltCallback(hi2c);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	0010      	movs	r0, r2
 8003ee6:	4798      	blx	r3
}
 8003ee8:	e03b      	b.n	8003f62 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2242      	movs	r2, #66	; 0x42
 8003eee:	2100      	movs	r1, #0
 8003ef0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2240      	movs	r2, #64	; 0x40
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	5499      	strb	r1, [r3, r2]
      hi2c->MasterTxCpltCallback(hi2c);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	0010      	movs	r0, r2
 8003f02:	4798      	blx	r3
}
 8003f04:	e02d      	b.n	8003f62 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2241      	movs	r2, #65	; 0x41
 8003f0a:	5c9b      	ldrb	r3, [r3, r2]
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b22      	cmp	r3, #34	; 0x22
 8003f10:	d127      	bne.n	8003f62 <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2241      	movs	r2, #65	; 0x41
 8003f16:	2120      	movs	r1, #32
 8003f18:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2242      	movs	r2, #66	; 0x42
 8003f24:	5c9b      	ldrb	r3, [r3, r2]
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b40      	cmp	r3, #64	; 0x40
 8003f2a:	d10d      	bne.n	8003f48 <I2C_ITMasterCplt+0x178>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2242      	movs	r2, #66	; 0x42
 8003f30:	2100      	movs	r1, #0
 8003f32:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2240      	movs	r2, #64	; 0x40
 8003f38:	2100      	movs	r1, #0
 8003f3a:	5499      	strb	r1, [r3, r2]
      hi2c->MemRxCpltCallback(hi2c);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	0010      	movs	r0, r2
 8003f44:	4798      	blx	r3
}
 8003f46:	e00c      	b.n	8003f62 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2242      	movs	r2, #66	; 0x42
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2240      	movs	r2, #64	; 0x40
 8003f54:	2100      	movs	r1, #0
 8003f56:	5499      	strb	r1, [r3, r2]
      hi2c->MasterRxCpltCallback(hi2c);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	0010      	movs	r0, r2
 8003f60:	4798      	blx	r3
}
 8003f62:	46c0      	nop			; (mov r8, r8)
 8003f64:	46bd      	mov	sp, r7
 8003f66:	b006      	add	sp, #24
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	46c0      	nop			; (mov r8, r8)
 8003f6c:	fe00e800 	.word	0xfe00e800
 8003f70:	ffff0000 	.word	0xffff0000

08003f74 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003f8a:	200f      	movs	r0, #15
 8003f8c:	183b      	adds	r3, r7, r0
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	2141      	movs	r1, #65	; 0x41
 8003f92:	5c52      	ldrb	r2, [r2, r1]
 8003f94:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f9e:	183b      	adds	r3, r7, r0
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	2b21      	cmp	r3, #33	; 0x21
 8003fa4:	d003      	beq.n	8003fae <I2C_ITSlaveCplt+0x3a>
 8003fa6:	183b      	adds	r3, r7, r0
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	2b29      	cmp	r3, #41	; 0x29
 8003fac:	d109      	bne.n	8003fc2 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003fae:	4a7c      	ldr	r2, [pc, #496]	; (80041a0 <I2C_ITSlaveCplt+0x22c>)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	0011      	movs	r1, r2
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	f000 fb4f 	bl	8004658 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2221      	movs	r2, #33	; 0x21
 8003fbe:	631a      	str	r2, [r3, #48]	; 0x30
 8003fc0:	e011      	b.n	8003fe6 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003fc2:	220f      	movs	r2, #15
 8003fc4:	18bb      	adds	r3, r7, r2
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2b22      	cmp	r3, #34	; 0x22
 8003fca:	d003      	beq.n	8003fd4 <I2C_ITSlaveCplt+0x60>
 8003fcc:	18bb      	adds	r3, r7, r2
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8003fd2:	d108      	bne.n	8003fe6 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003fd4:	4a73      	ldr	r2, [pc, #460]	; (80041a4 <I2C_ITSlaveCplt+0x230>)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	0011      	movs	r1, r2
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f000 fb3c 	bl	8004658 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2222      	movs	r2, #34	; 0x22
 8003fe4:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2180      	movs	r1, #128	; 0x80
 8003ff2:	0209      	lsls	r1, r1, #8
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4969      	ldr	r1, [pc, #420]	; (80041a8 <I2C_ITSlaveCplt+0x234>)
 8004004:	400a      	ands	r2, r1
 8004006:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	0018      	movs	r0, r3
 800400c:	f000 fa39 	bl	8004482 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	2380      	movs	r3, #128	; 0x80
 8004014:	01db      	lsls	r3, r3, #7
 8004016:	4013      	ands	r3, r2
 8004018:	d013      	beq.n	8004042 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4961      	ldr	r1, [pc, #388]	; (80041ac <I2C_ITSlaveCplt+0x238>)
 8004026:	400a      	ands	r2, r1
 8004028:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402e:	2b00      	cmp	r3, #0
 8004030:	d01f      	beq.n	8004072 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	b29a      	uxth	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004040:	e017      	b.n	8004072 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	2380      	movs	r3, #128	; 0x80
 8004046:	021b      	lsls	r3, r3, #8
 8004048:	4013      	ands	r3, r2
 800404a:	d012      	beq.n	8004072 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4956      	ldr	r1, [pc, #344]	; (80041b0 <I2C_ITSlaveCplt+0x23c>)
 8004058:	400a      	ands	r2, r1
 800405a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004060:	2b00      	cmp	r3, #0
 8004062:	d006      	beq.n	8004072 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	b29a      	uxth	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	2204      	movs	r2, #4
 8004076:	4013      	ands	r3, r2
 8004078:	d020      	beq.n	80040bc <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	2204      	movs	r2, #4
 800407e:	4393      	bics	r3, r2
 8004080:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	b2d2      	uxtb	r2, r2
 800408e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	1c5a      	adds	r2, r3, #1
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00c      	beq.n	80040bc <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a6:	3b01      	subs	r3, #1
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d005      	beq.n	80040d2 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ca:	2204      	movs	r2, #4
 80040cc:	431a      	orrs	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2242      	movs	r2, #66	; 0x42
 80040d6:	2100      	movs	r1, #0
 80040d8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d013      	beq.n	8004110 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	0011      	movs	r1, r2
 80040f0:	0018      	movs	r0, r3
 80040f2:	f000 f8b9 	bl	8004268 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2241      	movs	r2, #65	; 0x41
 80040fa:	5c9b      	ldrb	r3, [r3, r2]
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b28      	cmp	r3, #40	; 0x28
 8004100:	d14a      	bne.n	8004198 <I2C_ITSlaveCplt+0x224>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	0011      	movs	r1, r2
 8004108:	0018      	movs	r0, r3
 800410a:	f000 f855 	bl	80041b8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800410e:	e043      	b.n	8004198 <I2C_ITSlaveCplt+0x224>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004114:	4a27      	ldr	r2, [pc, #156]	; (80041b4 <I2C_ITSlaveCplt+0x240>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d017      	beq.n	800414a <I2C_ITSlaveCplt+0x1d6>
    I2C_ITSlaveSeqCplt(hi2c);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	0018      	movs	r0, r3
 800411e:	f7ff fdf1 	bl	8003d04 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a23      	ldr	r2, [pc, #140]	; (80041b4 <I2C_ITSlaveCplt+0x240>)
 8004126:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2241      	movs	r2, #65	; 0x41
 800412c:	2120      	movs	r1, #32
 800412e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2240      	movs	r2, #64	; 0x40
 800413a:	2100      	movs	r1, #0
 800413c:	5499      	strb	r1, [r3, r2]
    hi2c->ListenCpltCallback(hi2c);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	0010      	movs	r0, r2
 8004146:	4798      	blx	r3
}
 8004148:	e026      	b.n	8004198 <I2C_ITSlaveCplt+0x224>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2241      	movs	r2, #65	; 0x41
 800414e:	5c9b      	ldrb	r3, [r3, r2]
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b22      	cmp	r3, #34	; 0x22
 8004154:	d110      	bne.n	8004178 <I2C_ITSlaveCplt+0x204>
    hi2c->State = HAL_I2C_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2241      	movs	r2, #65	; 0x41
 800415a:	2120      	movs	r1, #32
 800415c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2240      	movs	r2, #64	; 0x40
 8004168:	2100      	movs	r1, #0
 800416a:	5499      	strb	r1, [r3, r2]
    hi2c->SlaveRxCpltCallback(hi2c);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	0010      	movs	r0, r2
 8004174:	4798      	blx	r3
}
 8004176:	e00f      	b.n	8004198 <I2C_ITSlaveCplt+0x224>
    hi2c->State = HAL_I2C_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2241      	movs	r2, #65	; 0x41
 800417c:	2120      	movs	r1, #32
 800417e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2240      	movs	r2, #64	; 0x40
 800418a:	2100      	movs	r1, #0
 800418c:	5499      	strb	r1, [r3, r2]
    hi2c->SlaveTxCpltCallback(hi2c);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	0010      	movs	r0, r2
 8004196:	4798      	blx	r3
}
 8004198:	46c0      	nop			; (mov r8, r8)
 800419a:	46bd      	mov	sp, r7
 800419c:	b006      	add	sp, #24
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	00008001 	.word	0x00008001
 80041a4:	00008002 	.word	0x00008002
 80041a8:	fe00e800 	.word	0xfe00e800
 80041ac:	ffffbfff 	.word	0xffffbfff
 80041b0:	ffff7fff 	.word	0xffff7fff
 80041b4:	ffff0000 	.word	0xffff0000

080041b8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a26      	ldr	r2, [pc, #152]	; (8004260 <I2C_ITListenCplt+0xa8>)
 80041c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2241      	movs	r2, #65	; 0x41
 80041d2:	2120      	movs	r1, #32
 80041d4:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2242      	movs	r2, #66	; 0x42
 80041da:	2100      	movs	r1, #0
 80041dc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	2204      	movs	r2, #4
 80041e8:	4013      	ands	r3, r2
 80041ea:	d022      	beq.n	8004232 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004208:	2b00      	cmp	r3, #0
 800420a:	d012      	beq.n	8004232 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421c:	b29b      	uxth	r3, r3
 800421e:	3b01      	subs	r3, #1
 8004220:	b29a      	uxth	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422a:	2204      	movs	r2, #4
 800422c:	431a      	orrs	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004232:	4a0c      	ldr	r2, [pc, #48]	; (8004264 <I2C_ITListenCplt+0xac>)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	0011      	movs	r1, r2
 8004238:	0018      	movs	r0, r3
 800423a:	f000 fa0d 	bl	8004658 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2210      	movs	r2, #16
 8004244:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2240      	movs	r2, #64	; 0x40
 800424a:	2100      	movs	r1, #0
 800424c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	0010      	movs	r0, r2
 8004256:	4798      	blx	r3
#else
  HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004258:	46c0      	nop			; (mov r8, r8)
 800425a:	46bd      	mov	sp, r7
 800425c:	b002      	add	sp, #8
 800425e:	bd80      	pop	{r7, pc}
 8004260:	ffff0000 	.word	0xffff0000
 8004264:	00008003 	.word	0x00008003

08004268 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004272:	200f      	movs	r0, #15
 8004274:	183b      	adds	r3, r7, r0
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	2141      	movs	r1, #65	; 0x41
 800427a:	5c52      	ldrb	r2, [r2, r1]
 800427c:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2242      	movs	r2, #66	; 0x42
 8004282:	2100      	movs	r1, #0
 8004284:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a62      	ldr	r2, [pc, #392]	; (8004414 <I2C_ITError+0x1ac>)
 800428a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	431a      	orrs	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800429e:	183b      	adds	r3, r7, r0
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2b28      	cmp	r3, #40	; 0x28
 80042a4:	d007      	beq.n	80042b6 <I2C_ITError+0x4e>
 80042a6:	183b      	adds	r3, r7, r0
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	2b29      	cmp	r3, #41	; 0x29
 80042ac:	d003      	beq.n	80042b6 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80042ae:	183b      	adds	r3, r7, r0
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	2b2a      	cmp	r3, #42	; 0x2a
 80042b4:	d10c      	bne.n	80042d0 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2103      	movs	r1, #3
 80042ba:	0018      	movs	r0, r3
 80042bc:	f000 f9cc 	bl	8004658 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2241      	movs	r2, #65	; 0x41
 80042c4:	2128      	movs	r1, #40	; 0x28
 80042c6:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a53      	ldr	r2, [pc, #332]	; (8004418 <I2C_ITError+0x1b0>)
 80042cc:	635a      	str	r2, [r3, #52]	; 0x34
 80042ce:	e012      	b.n	80042f6 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80042d0:	4a52      	ldr	r2, [pc, #328]	; (800441c <I2C_ITError+0x1b4>)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	0011      	movs	r1, r2
 80042d6:	0018      	movs	r0, r3
 80042d8:	f000 f9be 	bl	8004658 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2241      	movs	r2, #65	; 0x41
 80042e0:	5c9b      	ldrb	r3, [r3, r2]
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b60      	cmp	r3, #96	; 0x60
 80042e6:	d003      	beq.n	80042f0 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2241      	movs	r2, #65	; 0x41
 80042ec:	2120      	movs	r1, #32
 80042ee:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fa:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004300:	2b00      	cmp	r3, #0
 8004302:	d03b      	beq.n	800437c <I2C_ITError+0x114>
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2b11      	cmp	r3, #17
 8004308:	d002      	beq.n	8004310 <I2C_ITError+0xa8>
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	2b21      	cmp	r3, #33	; 0x21
 800430e:	d135      	bne.n	800437c <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	2380      	movs	r3, #128	; 0x80
 8004318:	01db      	lsls	r3, r3, #7
 800431a:	401a      	ands	r2, r3
 800431c:	2380      	movs	r3, #128	; 0x80
 800431e:	01db      	lsls	r3, r3, #7
 8004320:	429a      	cmp	r2, r3
 8004322:	d107      	bne.n	8004334 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	493c      	ldr	r1, [pc, #240]	; (8004420 <I2C_ITError+0x1b8>)
 8004330:	400a      	ands	r2, r1
 8004332:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004338:	0018      	movs	r0, r3
 800433a:	f7fe fba1 	bl	8002a80 <HAL_DMA_GetState>
 800433e:	0003      	movs	r3, r0
 8004340:	2b01      	cmp	r3, #1
 8004342:	d016      	beq.n	8004372 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004348:	4a36      	ldr	r2, [pc, #216]	; (8004424 <I2C_ITError+0x1bc>)
 800434a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2240      	movs	r2, #64	; 0x40
 8004350:	2100      	movs	r1, #0
 8004352:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004358:	0018      	movs	r0, r3
 800435a:	f7fe fa75 	bl	8002848 <HAL_DMA_Abort_IT>
 800435e:	1e03      	subs	r3, r0, #0
 8004360:	d051      	beq.n	8004406 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004366:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436c:	0018      	movs	r0, r3
 800436e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004370:	e049      	b.n	8004406 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	0018      	movs	r0, r3
 8004376:	f000 f859 	bl	800442c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800437a:	e044      	b.n	8004406 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004380:	2b00      	cmp	r3, #0
 8004382:	d03b      	beq.n	80043fc <I2C_ITError+0x194>
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2b12      	cmp	r3, #18
 8004388:	d002      	beq.n	8004390 <I2C_ITError+0x128>
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	2b22      	cmp	r3, #34	; 0x22
 800438e:	d135      	bne.n	80043fc <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	2380      	movs	r3, #128	; 0x80
 8004398:	021b      	lsls	r3, r3, #8
 800439a:	401a      	ands	r2, r3
 800439c:	2380      	movs	r3, #128	; 0x80
 800439e:	021b      	lsls	r3, r3, #8
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d107      	bne.n	80043b4 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	491e      	ldr	r1, [pc, #120]	; (8004428 <I2C_ITError+0x1c0>)
 80043b0:	400a      	ands	r2, r1
 80043b2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b8:	0018      	movs	r0, r3
 80043ba:	f7fe fb61 	bl	8002a80 <HAL_DMA_GetState>
 80043be:	0003      	movs	r3, r0
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d016      	beq.n	80043f2 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c8:	4a16      	ldr	r2, [pc, #88]	; (8004424 <I2C_ITError+0x1bc>)
 80043ca:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2240      	movs	r2, #64	; 0x40
 80043d0:	2100      	movs	r1, #0
 80043d2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d8:	0018      	movs	r0, r3
 80043da:	f7fe fa35 	bl	8002848 <HAL_DMA_Abort_IT>
 80043de:	1e03      	subs	r3, r0, #0
 80043e0:	d013      	beq.n	800440a <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ec:	0018      	movs	r0, r3
 80043ee:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043f0:	e00b      	b.n	800440a <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	0018      	movs	r0, r3
 80043f6:	f000 f819 	bl	800442c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043fa:	e006      	b.n	800440a <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	0018      	movs	r0, r3
 8004400:	f000 f814 	bl	800442c <I2C_TreatErrorCallback>
  }
}
 8004404:	e002      	b.n	800440c <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	e000      	b.n	800440c <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800440a:	46c0      	nop			; (mov r8, r8)
}
 800440c:	46c0      	nop			; (mov r8, r8)
 800440e:	46bd      	mov	sp, r7
 8004410:	b004      	add	sp, #16
 8004412:	bd80      	pop	{r7, pc}
 8004414:	ffff0000 	.word	0xffff0000
 8004418:	0800356d 	.word	0x0800356d
 800441c:	00008003 	.word	0x00008003
 8004420:	ffffbfff 	.word	0xffffbfff
 8004424:	080044c7 	.word	0x080044c7
 8004428:	ffff7fff 	.word	0xffff7fff

0800442c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2241      	movs	r2, #65	; 0x41
 8004438:	5c9b      	ldrb	r3, [r3, r2]
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b60      	cmp	r3, #96	; 0x60
 800443e:	d110      	bne.n	8004462 <I2C_TreatErrorCallback+0x36>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2241      	movs	r2, #65	; 0x41
 8004444:	2120      	movs	r1, #32
 8004446:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2240      	movs	r2, #64	; 0x40
 8004452:	2100      	movs	r1, #0
 8004454:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	0010      	movs	r0, r2
 800445e:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004460:	e00b      	b.n	800447a <I2C_TreatErrorCallback+0x4e>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2240      	movs	r2, #64	; 0x40
 800446c:	2100      	movs	r1, #0
 800446e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCallback(hi2c);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	0010      	movs	r0, r2
 8004478:	4798      	blx	r3
}
 800447a:	46c0      	nop			; (mov r8, r8)
 800447c:	46bd      	mov	sp, r7
 800447e:	b002      	add	sp, #8
 8004480:	bd80      	pop	{r7, pc}

08004482 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b082      	sub	sp, #8
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	2202      	movs	r2, #2
 8004492:	4013      	ands	r3, r2
 8004494:	2b02      	cmp	r3, #2
 8004496:	d103      	bne.n	80044a0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2200      	movs	r2, #0
 800449e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	2201      	movs	r2, #1
 80044a8:	4013      	ands	r3, r2
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d007      	beq.n	80044be <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	699a      	ldr	r2, [r3, #24]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2101      	movs	r1, #1
 80044ba:	430a      	orrs	r2, r1
 80044bc:	619a      	str	r2, [r3, #24]
  }
}
 80044be:	46c0      	nop			; (mov r8, r8)
 80044c0:	46bd      	mov	sp, r7
 80044c2:	b002      	add	sp, #8
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b084      	sub	sp, #16
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e0:	2200      	movs	r2, #0
 80044e2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d003      	beq.n	80044f4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f0:	2200      	movs	r2, #0
 80044f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	0018      	movs	r0, r3
 80044f8:	f7ff ff98 	bl	800442c <I2C_TreatErrorCallback>
}
 80044fc:	46c0      	nop			; (mov r8, r8)
 80044fe:	46bd      	mov	sp, r7
 8004500:	b004      	add	sp, #16
 8004502:	bd80      	pop	{r7, pc}

08004504 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004504:	b590      	push	{r4, r7, lr}
 8004506:	b087      	sub	sp, #28
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	0008      	movs	r0, r1
 800450e:	0011      	movs	r1, r2
 8004510:	607b      	str	r3, [r7, #4]
 8004512:	240a      	movs	r4, #10
 8004514:	193b      	adds	r3, r7, r4
 8004516:	1c02      	adds	r2, r0, #0
 8004518:	801a      	strh	r2, [r3, #0]
 800451a:	2009      	movs	r0, #9
 800451c:	183b      	adds	r3, r7, r0
 800451e:	1c0a      	adds	r2, r1, #0
 8004520:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004522:	193b      	adds	r3, r7, r4
 8004524:	881b      	ldrh	r3, [r3, #0]
 8004526:	059b      	lsls	r3, r3, #22
 8004528:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800452a:	183b      	adds	r3, r7, r0
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	0419      	lsls	r1, r3, #16
 8004530:	23ff      	movs	r3, #255	; 0xff
 8004532:	041b      	lsls	r3, r3, #16
 8004534:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004536:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800453c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453e:	4313      	orrs	r3, r2
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	085b      	lsrs	r3, r3, #1
 8004544:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800454e:	0d51      	lsrs	r1, r2, #21
 8004550:	2280      	movs	r2, #128	; 0x80
 8004552:	00d2      	lsls	r2, r2, #3
 8004554:	400a      	ands	r2, r1
 8004556:	4907      	ldr	r1, [pc, #28]	; (8004574 <I2C_TransferConfig+0x70>)
 8004558:	430a      	orrs	r2, r1
 800455a:	43d2      	mvns	r2, r2
 800455c:	401a      	ands	r2, r3
 800455e:	0011      	movs	r1, r2
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	430a      	orrs	r2, r1
 8004568:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800456a:	46c0      	nop			; (mov r8, r8)
 800456c:	46bd      	mov	sp, r7
 800456e:	b007      	add	sp, #28
 8004570:	bd90      	pop	{r4, r7, pc}
 8004572:	46c0      	nop			; (mov r8, r8)
 8004574:	03ff63ff 	.word	0x03ff63ff

08004578 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	000a      	movs	r2, r1
 8004582:	1cbb      	adds	r3, r7, #2
 8004584:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8004586:	2300      	movs	r3, #0
 8004588:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800458e:	4b30      	ldr	r3, [pc, #192]	; (8004650 <I2C_Enable_IRQ+0xd8>)
 8004590:	429a      	cmp	r2, r3
 8004592:	d004      	beq.n	800459e <I2C_Enable_IRQ+0x26>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004598:	4b2e      	ldr	r3, [pc, #184]	; (8004654 <I2C_Enable_IRQ+0xdc>)
 800459a:	429a      	cmp	r2, r3
 800459c:	d121      	bne.n	80045e2 <I2C_Enable_IRQ+0x6a>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800459e:	1cbb      	adds	r3, r7, #2
 80045a0:	2200      	movs	r2, #0
 80045a2:	5e9b      	ldrsh	r3, [r3, r2]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	da03      	bge.n	80045b0 <I2C_Enable_IRQ+0x38>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	22b8      	movs	r2, #184	; 0xb8
 80045ac:	4313      	orrs	r3, r2
 80045ae:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80045b0:	1cbb      	adds	r3, r7, #2
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	2b10      	cmp	r3, #16
 80045b6:	d103      	bne.n	80045c0 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2290      	movs	r2, #144	; 0x90
 80045bc:	4313      	orrs	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80045c0:	1cbb      	adds	r3, r7, #2
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	2b20      	cmp	r3, #32
 80045c6:	d103      	bne.n	80045d0 <I2C_Enable_IRQ+0x58>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2260      	movs	r2, #96	; 0x60
 80045cc:	4313      	orrs	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80045d0:	1cbb      	adds	r3, r7, #2
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	2b40      	cmp	r3, #64	; 0x40
 80045d6:	d12f      	bne.n	8004638 <I2C_Enable_IRQ+0xc0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2240      	movs	r2, #64	; 0x40
 80045dc:	4313      	orrs	r3, r2
 80045de:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80045e0:	e02a      	b.n	8004638 <I2C_Enable_IRQ+0xc0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80045e2:	1cbb      	adds	r3, r7, #2
 80045e4:	2200      	movs	r2, #0
 80045e6:	5e9b      	ldrsh	r3, [r3, r2]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	da03      	bge.n	80045f4 <I2C_Enable_IRQ+0x7c>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	22b8      	movs	r2, #184	; 0xb8
 80045f0:	4313      	orrs	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80045f4:	1cbb      	adds	r3, r7, #2
 80045f6:	881b      	ldrh	r3, [r3, #0]
 80045f8:	2201      	movs	r2, #1
 80045fa:	4013      	ands	r3, r2
 80045fc:	d003      	beq.n	8004606 <I2C_Enable_IRQ+0x8e>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	22f2      	movs	r2, #242	; 0xf2
 8004602:	4313      	orrs	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004606:	1cbb      	adds	r3, r7, #2
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	2202      	movs	r2, #2
 800460c:	4013      	ands	r3, r2
 800460e:	d003      	beq.n	8004618 <I2C_Enable_IRQ+0xa0>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	22f4      	movs	r2, #244	; 0xf4
 8004614:	4313      	orrs	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004618:	1cbb      	adds	r3, r7, #2
 800461a:	881b      	ldrh	r3, [r3, #0]
 800461c:	2b10      	cmp	r3, #16
 800461e:	d103      	bne.n	8004628 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2290      	movs	r2, #144	; 0x90
 8004624:	4313      	orrs	r3, r2
 8004626:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004628:	1cbb      	adds	r3, r7, #2
 800462a:	881b      	ldrh	r3, [r3, #0]
 800462c:	2b20      	cmp	r3, #32
 800462e:	d103      	bne.n	8004638 <I2C_Enable_IRQ+0xc0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2220      	movs	r2, #32
 8004634:	4313      	orrs	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6819      	ldr	r1, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	430a      	orrs	r2, r1
 8004646:	601a      	str	r2, [r3, #0]
}
 8004648:	46c0      	nop			; (mov r8, r8)
 800464a:	46bd      	mov	sp, r7
 800464c:	b004      	add	sp, #16
 800464e:	bd80      	pop	{r7, pc}
 8004650:	0800376d 	.word	0x0800376d
 8004654:	08003965 	.word	0x08003965

08004658 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	000a      	movs	r2, r1
 8004662:	1cbb      	adds	r3, r7, #2
 8004664:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8004666:	2300      	movs	r3, #0
 8004668:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800466a:	1cbb      	adds	r3, r7, #2
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	2201      	movs	r2, #1
 8004670:	4013      	ands	r3, r2
 8004672:	d010      	beq.n	8004696 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2242      	movs	r2, #66	; 0x42
 8004678:	4313      	orrs	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2241      	movs	r2, #65	; 0x41
 8004680:	5c9b      	ldrb	r3, [r3, r2]
 8004682:	b2db      	uxtb	r3, r3
 8004684:	001a      	movs	r2, r3
 8004686:	2328      	movs	r3, #40	; 0x28
 8004688:	4013      	ands	r3, r2
 800468a:	2b28      	cmp	r3, #40	; 0x28
 800468c:	d003      	beq.n	8004696 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	22b0      	movs	r2, #176	; 0xb0
 8004692:	4313      	orrs	r3, r2
 8004694:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004696:	1cbb      	adds	r3, r7, #2
 8004698:	881b      	ldrh	r3, [r3, #0]
 800469a:	2202      	movs	r2, #2
 800469c:	4013      	ands	r3, r2
 800469e:	d010      	beq.n	80046c2 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2244      	movs	r2, #68	; 0x44
 80046a4:	4313      	orrs	r3, r2
 80046a6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2241      	movs	r2, #65	; 0x41
 80046ac:	5c9b      	ldrb	r3, [r3, r2]
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	001a      	movs	r2, r3
 80046b2:	2328      	movs	r3, #40	; 0x28
 80046b4:	4013      	ands	r3, r2
 80046b6:	2b28      	cmp	r3, #40	; 0x28
 80046b8:	d003      	beq.n	80046c2 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	22b0      	movs	r2, #176	; 0xb0
 80046be:	4313      	orrs	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80046c2:	1cbb      	adds	r3, r7, #2
 80046c4:	2200      	movs	r2, #0
 80046c6:	5e9b      	ldrsh	r3, [r3, r2]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	da03      	bge.n	80046d4 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	22b8      	movs	r2, #184	; 0xb8
 80046d0:	4313      	orrs	r3, r2
 80046d2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80046d4:	1cbb      	adds	r3, r7, #2
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	2b10      	cmp	r3, #16
 80046da:	d103      	bne.n	80046e4 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2290      	movs	r2, #144	; 0x90
 80046e0:	4313      	orrs	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80046e4:	1cbb      	adds	r3, r7, #2
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	2b20      	cmp	r3, #32
 80046ea:	d103      	bne.n	80046f4 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2220      	movs	r2, #32
 80046f0:	4313      	orrs	r3, r2
 80046f2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80046f4:	1cbb      	adds	r3, r7, #2
 80046f6:	881b      	ldrh	r3, [r3, #0]
 80046f8:	2b40      	cmp	r3, #64	; 0x40
 80046fa:	d103      	bne.n	8004704 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2240      	movs	r2, #64	; 0x40
 8004700:	4313      	orrs	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	43d9      	mvns	r1, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	400a      	ands	r2, r1
 8004714:	601a      	str	r2, [r3, #0]
}
 8004716:	46c0      	nop			; (mov r8, r8)
 8004718:	46bd      	mov	sp, r7
 800471a:	b004      	add	sp, #16
 800471c:	bd80      	pop	{r7, pc}
	...

08004720 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2241      	movs	r2, #65	; 0x41
 800472e:	5c9b      	ldrb	r3, [r3, r2]
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b20      	cmp	r3, #32
 8004734:	d138      	bne.n	80047a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2240      	movs	r2, #64	; 0x40
 800473a:	5c9b      	ldrb	r3, [r3, r2]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d101      	bne.n	8004744 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004740:	2302      	movs	r3, #2
 8004742:	e032      	b.n	80047aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2240      	movs	r2, #64	; 0x40
 8004748:	2101      	movs	r1, #1
 800474a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2241      	movs	r2, #65	; 0x41
 8004750:	2124      	movs	r1, #36	; 0x24
 8004752:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2101      	movs	r1, #1
 8004760:	438a      	bics	r2, r1
 8004762:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4911      	ldr	r1, [pc, #68]	; (80047b4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004770:	400a      	ands	r2, r1
 8004772:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6819      	ldr	r1, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	430a      	orrs	r2, r1
 8004782:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2101      	movs	r1, #1
 8004790:	430a      	orrs	r2, r1
 8004792:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2241      	movs	r2, #65	; 0x41
 8004798:	2120      	movs	r1, #32
 800479a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2240      	movs	r2, #64	; 0x40
 80047a0:	2100      	movs	r1, #0
 80047a2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80047a4:	2300      	movs	r3, #0
 80047a6:	e000      	b.n	80047aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80047a8:	2302      	movs	r3, #2
  }
}
 80047aa:	0018      	movs	r0, r3
 80047ac:	46bd      	mov	sp, r7
 80047ae:	b002      	add	sp, #8
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	46c0      	nop			; (mov r8, r8)
 80047b4:	ffffefff 	.word	0xffffefff

080047b8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2241      	movs	r2, #65	; 0x41
 80047c6:	5c9b      	ldrb	r3, [r3, r2]
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b20      	cmp	r3, #32
 80047cc:	d139      	bne.n	8004842 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2240      	movs	r2, #64	; 0x40
 80047d2:	5c9b      	ldrb	r3, [r3, r2]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d101      	bne.n	80047dc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80047d8:	2302      	movs	r3, #2
 80047da:	e033      	b.n	8004844 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2240      	movs	r2, #64	; 0x40
 80047e0:	2101      	movs	r1, #1
 80047e2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2241      	movs	r2, #65	; 0x41
 80047e8:	2124      	movs	r1, #36	; 0x24
 80047ea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2101      	movs	r1, #1
 80047f8:	438a      	bics	r2, r1
 80047fa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	4a11      	ldr	r2, [pc, #68]	; (800484c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004808:	4013      	ands	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	021b      	lsls	r3, r3, #8
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	4313      	orrs	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2101      	movs	r1, #1
 800482a:	430a      	orrs	r2, r1
 800482c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2241      	movs	r2, #65	; 0x41
 8004832:	2120      	movs	r1, #32
 8004834:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2240      	movs	r2, #64	; 0x40
 800483a:	2100      	movs	r1, #0
 800483c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800483e:	2300      	movs	r3, #0
 8004840:	e000      	b.n	8004844 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004842:	2302      	movs	r3, #2
  }
}
 8004844:	0018      	movs	r0, r3
 8004846:	46bd      	mov	sp, r7
 8004848:	b004      	add	sp, #16
 800484a:	bd80      	pop	{r7, pc}
 800484c:	fffff0ff 	.word	0xfffff0ff

08004850 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004858:	4b19      	ldr	r3, [pc, #100]	; (80048c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a19      	ldr	r2, [pc, #100]	; (80048c4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800485e:	4013      	ands	r3, r2
 8004860:	0019      	movs	r1, r3
 8004862:	4b17      	ldr	r3, [pc, #92]	; (80048c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	430a      	orrs	r2, r1
 8004868:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	2380      	movs	r3, #128	; 0x80
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	429a      	cmp	r2, r3
 8004872:	d11f      	bne.n	80048b4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004874:	4b14      	ldr	r3, [pc, #80]	; (80048c8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	0013      	movs	r3, r2
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	189b      	adds	r3, r3, r2
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	4912      	ldr	r1, [pc, #72]	; (80048cc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004882:	0018      	movs	r0, r3
 8004884:	f7fb fc3c 	bl	8000100 <__udivsi3>
 8004888:	0003      	movs	r3, r0
 800488a:	3301      	adds	r3, #1
 800488c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800488e:	e008      	b.n	80048a2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	3b01      	subs	r3, #1
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	e001      	b.n	80048a2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e009      	b.n	80048b6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048a2:	4b07      	ldr	r3, [pc, #28]	; (80048c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80048a4:	695a      	ldr	r2, [r3, #20]
 80048a6:	2380      	movs	r3, #128	; 0x80
 80048a8:	00db      	lsls	r3, r3, #3
 80048aa:	401a      	ands	r2, r3
 80048ac:	2380      	movs	r3, #128	; 0x80
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d0ed      	beq.n	8004890 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	0018      	movs	r0, r3
 80048b8:	46bd      	mov	sp, r7
 80048ba:	b004      	add	sp, #16
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	46c0      	nop			; (mov r8, r8)
 80048c0:	40007000 	.word	0x40007000
 80048c4:	fffff9ff 	.word	0xfffff9ff
 80048c8:	20000000 	.word	0x20000000
 80048cc:	000f4240 	.word	0x000f4240

080048d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b088      	sub	sp, #32
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e2f3      	b.n	8004eca <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2201      	movs	r2, #1
 80048e8:	4013      	ands	r3, r2
 80048ea:	d100      	bne.n	80048ee <HAL_RCC_OscConfig+0x1e>
 80048ec:	e07c      	b.n	80049e8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048ee:	4bc3      	ldr	r3, [pc, #780]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	2238      	movs	r2, #56	; 0x38
 80048f4:	4013      	ands	r3, r2
 80048f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048f8:	4bc0      	ldr	r3, [pc, #768]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	2203      	movs	r2, #3
 80048fe:	4013      	ands	r3, r2
 8004900:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	2b10      	cmp	r3, #16
 8004906:	d102      	bne.n	800490e <HAL_RCC_OscConfig+0x3e>
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	2b03      	cmp	r3, #3
 800490c:	d002      	beq.n	8004914 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	2b08      	cmp	r3, #8
 8004912:	d10b      	bne.n	800492c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004914:	4bb9      	ldr	r3, [pc, #740]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	2380      	movs	r3, #128	; 0x80
 800491a:	029b      	lsls	r3, r3, #10
 800491c:	4013      	ands	r3, r2
 800491e:	d062      	beq.n	80049e6 <HAL_RCC_OscConfig+0x116>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d15e      	bne.n	80049e6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e2ce      	b.n	8004eca <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	2380      	movs	r3, #128	; 0x80
 8004932:	025b      	lsls	r3, r3, #9
 8004934:	429a      	cmp	r2, r3
 8004936:	d107      	bne.n	8004948 <HAL_RCC_OscConfig+0x78>
 8004938:	4bb0      	ldr	r3, [pc, #704]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	4baf      	ldr	r3, [pc, #700]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 800493e:	2180      	movs	r1, #128	; 0x80
 8004940:	0249      	lsls	r1, r1, #9
 8004942:	430a      	orrs	r2, r1
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	e020      	b.n	800498a <HAL_RCC_OscConfig+0xba>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	23a0      	movs	r3, #160	; 0xa0
 800494e:	02db      	lsls	r3, r3, #11
 8004950:	429a      	cmp	r2, r3
 8004952:	d10e      	bne.n	8004972 <HAL_RCC_OscConfig+0xa2>
 8004954:	4ba9      	ldr	r3, [pc, #676]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	4ba8      	ldr	r3, [pc, #672]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 800495a:	2180      	movs	r1, #128	; 0x80
 800495c:	02c9      	lsls	r1, r1, #11
 800495e:	430a      	orrs	r2, r1
 8004960:	601a      	str	r2, [r3, #0]
 8004962:	4ba6      	ldr	r3, [pc, #664]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	4ba5      	ldr	r3, [pc, #660]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 8004968:	2180      	movs	r1, #128	; 0x80
 800496a:	0249      	lsls	r1, r1, #9
 800496c:	430a      	orrs	r2, r1
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	e00b      	b.n	800498a <HAL_RCC_OscConfig+0xba>
 8004972:	4ba2      	ldr	r3, [pc, #648]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	4ba1      	ldr	r3, [pc, #644]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 8004978:	49a1      	ldr	r1, [pc, #644]	; (8004c00 <HAL_RCC_OscConfig+0x330>)
 800497a:	400a      	ands	r2, r1
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	4b9f      	ldr	r3, [pc, #636]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	4b9e      	ldr	r3, [pc, #632]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 8004984:	499f      	ldr	r1, [pc, #636]	; (8004c04 <HAL_RCC_OscConfig+0x334>)
 8004986:	400a      	ands	r2, r1
 8004988:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d014      	beq.n	80049bc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004992:	f7fc febb 	bl	800170c <HAL_GetTick>
 8004996:	0003      	movs	r3, r0
 8004998:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800499c:	f7fc feb6 	bl	800170c <HAL_GetTick>
 80049a0:	0002      	movs	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b64      	cmp	r3, #100	; 0x64
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e28d      	b.n	8004eca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049ae:	4b93      	ldr	r3, [pc, #588]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	2380      	movs	r3, #128	; 0x80
 80049b4:	029b      	lsls	r3, r3, #10
 80049b6:	4013      	ands	r3, r2
 80049b8:	d0f0      	beq.n	800499c <HAL_RCC_OscConfig+0xcc>
 80049ba:	e015      	b.n	80049e8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049bc:	f7fc fea6 	bl	800170c <HAL_GetTick>
 80049c0:	0003      	movs	r3, r0
 80049c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049c4:	e008      	b.n	80049d8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049c6:	f7fc fea1 	bl	800170c <HAL_GetTick>
 80049ca:	0002      	movs	r2, r0
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b64      	cmp	r3, #100	; 0x64
 80049d2:	d901      	bls.n	80049d8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e278      	b.n	8004eca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049d8:	4b88      	ldr	r3, [pc, #544]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	2380      	movs	r3, #128	; 0x80
 80049de:	029b      	lsls	r3, r3, #10
 80049e0:	4013      	ands	r3, r2
 80049e2:	d1f0      	bne.n	80049c6 <HAL_RCC_OscConfig+0xf6>
 80049e4:	e000      	b.n	80049e8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049e6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2202      	movs	r2, #2
 80049ee:	4013      	ands	r3, r2
 80049f0:	d100      	bne.n	80049f4 <HAL_RCC_OscConfig+0x124>
 80049f2:	e099      	b.n	8004b28 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049f4:	4b81      	ldr	r3, [pc, #516]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	2238      	movs	r2, #56	; 0x38
 80049fa:	4013      	ands	r3, r2
 80049fc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049fe:	4b7f      	ldr	r3, [pc, #508]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	2203      	movs	r2, #3
 8004a04:	4013      	ands	r3, r2
 8004a06:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	2b10      	cmp	r3, #16
 8004a0c:	d102      	bne.n	8004a14 <HAL_RCC_OscConfig+0x144>
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d002      	beq.n	8004a1a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d135      	bne.n	8004a86 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a1a:	4b78      	ldr	r3, [pc, #480]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	2380      	movs	r3, #128	; 0x80
 8004a20:	00db      	lsls	r3, r3, #3
 8004a22:	4013      	ands	r3, r2
 8004a24:	d005      	beq.n	8004a32 <HAL_RCC_OscConfig+0x162>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e24b      	b.n	8004eca <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a32:	4b72      	ldr	r3, [pc, #456]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	4a74      	ldr	r2, [pc, #464]	; (8004c08 <HAL_RCC_OscConfig+0x338>)
 8004a38:	4013      	ands	r3, r2
 8004a3a:	0019      	movs	r1, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	021a      	lsls	r2, r3, #8
 8004a42:	4b6e      	ldr	r3, [pc, #440]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 8004a44:	430a      	orrs	r2, r1
 8004a46:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d112      	bne.n	8004a74 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004a4e:	4b6b      	ldr	r3, [pc, #428]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a6e      	ldr	r2, [pc, #440]	; (8004c0c <HAL_RCC_OscConfig+0x33c>)
 8004a54:	4013      	ands	r3, r2
 8004a56:	0019      	movs	r1, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	691a      	ldr	r2, [r3, #16]
 8004a5c:	4b67      	ldr	r3, [pc, #412]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004a62:	4b66      	ldr	r3, [pc, #408]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	0adb      	lsrs	r3, r3, #11
 8004a68:	2207      	movs	r2, #7
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	4a68      	ldr	r2, [pc, #416]	; (8004c10 <HAL_RCC_OscConfig+0x340>)
 8004a6e:	40da      	lsrs	r2, r3
 8004a70:	4b68      	ldr	r3, [pc, #416]	; (8004c14 <HAL_RCC_OscConfig+0x344>)
 8004a72:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004a74:	4b68      	ldr	r3, [pc, #416]	; (8004c18 <HAL_RCC_OscConfig+0x348>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	0018      	movs	r0, r3
 8004a7a:	f7fc fdeb 	bl	8001654 <HAL_InitTick>
 8004a7e:	1e03      	subs	r3, r0, #0
 8004a80:	d051      	beq.n	8004b26 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e221      	b.n	8004eca <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d030      	beq.n	8004af0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004a8e:	4b5b      	ldr	r3, [pc, #364]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a5e      	ldr	r2, [pc, #376]	; (8004c0c <HAL_RCC_OscConfig+0x33c>)
 8004a94:	4013      	ands	r3, r2
 8004a96:	0019      	movs	r1, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	691a      	ldr	r2, [r3, #16]
 8004a9c:	4b57      	ldr	r3, [pc, #348]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004aa2:	4b56      	ldr	r3, [pc, #344]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	4b55      	ldr	r3, [pc, #340]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 8004aa8:	2180      	movs	r1, #128	; 0x80
 8004aaa:	0049      	lsls	r1, r1, #1
 8004aac:	430a      	orrs	r2, r1
 8004aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab0:	f7fc fe2c 	bl	800170c <HAL_GetTick>
 8004ab4:	0003      	movs	r3, r0
 8004ab6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ab8:	e008      	b.n	8004acc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aba:	f7fc fe27 	bl	800170c <HAL_GetTick>
 8004abe:	0002      	movs	r2, r0
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d901      	bls.n	8004acc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e1fe      	b.n	8004eca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004acc:	4b4b      	ldr	r3, [pc, #300]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	2380      	movs	r3, #128	; 0x80
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	d0f0      	beq.n	8004aba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ad8:	4b48      	ldr	r3, [pc, #288]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	4a4a      	ldr	r2, [pc, #296]	; (8004c08 <HAL_RCC_OscConfig+0x338>)
 8004ade:	4013      	ands	r3, r2
 8004ae0:	0019      	movs	r1, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	021a      	lsls	r2, r3, #8
 8004ae8:	4b44      	ldr	r3, [pc, #272]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 8004aea:	430a      	orrs	r2, r1
 8004aec:	605a      	str	r2, [r3, #4]
 8004aee:	e01b      	b.n	8004b28 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004af0:	4b42      	ldr	r3, [pc, #264]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	4b41      	ldr	r3, [pc, #260]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 8004af6:	4949      	ldr	r1, [pc, #292]	; (8004c1c <HAL_RCC_OscConfig+0x34c>)
 8004af8:	400a      	ands	r2, r1
 8004afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afc:	f7fc fe06 	bl	800170c <HAL_GetTick>
 8004b00:	0003      	movs	r3, r0
 8004b02:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b04:	e008      	b.n	8004b18 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b06:	f7fc fe01 	bl	800170c <HAL_GetTick>
 8004b0a:	0002      	movs	r2, r0
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d901      	bls.n	8004b18 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e1d8      	b.n	8004eca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b18:	4b38      	ldr	r3, [pc, #224]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	2380      	movs	r3, #128	; 0x80
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	4013      	ands	r3, r2
 8004b22:	d1f0      	bne.n	8004b06 <HAL_RCC_OscConfig+0x236>
 8004b24:	e000      	b.n	8004b28 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b26:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2208      	movs	r2, #8
 8004b2e:	4013      	ands	r3, r2
 8004b30:	d047      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004b32:	4b32      	ldr	r3, [pc, #200]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	2238      	movs	r2, #56	; 0x38
 8004b38:	4013      	ands	r3, r2
 8004b3a:	2b18      	cmp	r3, #24
 8004b3c:	d10a      	bne.n	8004b54 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004b3e:	4b2f      	ldr	r3, [pc, #188]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 8004b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b42:	2202      	movs	r2, #2
 8004b44:	4013      	ands	r3, r2
 8004b46:	d03c      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x2f2>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d138      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e1ba      	b.n	8004eca <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d019      	beq.n	8004b90 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004b5c:	4b27      	ldr	r3, [pc, #156]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 8004b5e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004b60:	4b26      	ldr	r3, [pc, #152]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 8004b62:	2101      	movs	r1, #1
 8004b64:	430a      	orrs	r2, r1
 8004b66:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b68:	f7fc fdd0 	bl	800170c <HAL_GetTick>
 8004b6c:	0003      	movs	r3, r0
 8004b6e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b70:	e008      	b.n	8004b84 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b72:	f7fc fdcb 	bl	800170c <HAL_GetTick>
 8004b76:	0002      	movs	r2, r0
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e1a2      	b.n	8004eca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b84:	4b1d      	ldr	r3, [pc, #116]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 8004b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b88:	2202      	movs	r2, #2
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	d0f1      	beq.n	8004b72 <HAL_RCC_OscConfig+0x2a2>
 8004b8e:	e018      	b.n	8004bc2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004b90:	4b1a      	ldr	r3, [pc, #104]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 8004b92:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004b94:	4b19      	ldr	r3, [pc, #100]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 8004b96:	2101      	movs	r1, #1
 8004b98:	438a      	bics	r2, r1
 8004b9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9c:	f7fc fdb6 	bl	800170c <HAL_GetTick>
 8004ba0:	0003      	movs	r3, r0
 8004ba2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ba6:	f7fc fdb1 	bl	800170c <HAL_GetTick>
 8004baa:	0002      	movs	r2, r0
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e188      	b.n	8004eca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bb8:	4b10      	ldr	r3, [pc, #64]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 8004bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	d1f1      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2204      	movs	r2, #4
 8004bc8:	4013      	ands	r3, r2
 8004bca:	d100      	bne.n	8004bce <HAL_RCC_OscConfig+0x2fe>
 8004bcc:	e0c6      	b.n	8004d5c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bce:	231f      	movs	r3, #31
 8004bd0:	18fb      	adds	r3, r7, r3
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004bd6:	4b09      	ldr	r3, [pc, #36]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	2238      	movs	r2, #56	; 0x38
 8004bdc:	4013      	ands	r3, r2
 8004bde:	2b20      	cmp	r3, #32
 8004be0:	d11e      	bne.n	8004c20 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004be2:	4b06      	ldr	r3, [pc, #24]	; (8004bfc <HAL_RCC_OscConfig+0x32c>)
 8004be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be6:	2202      	movs	r2, #2
 8004be8:	4013      	ands	r3, r2
 8004bea:	d100      	bne.n	8004bee <HAL_RCC_OscConfig+0x31e>
 8004bec:	e0b6      	b.n	8004d5c <HAL_RCC_OscConfig+0x48c>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d000      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x328>
 8004bf6:	e0b1      	b.n	8004d5c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e166      	b.n	8004eca <HAL_RCC_OscConfig+0x5fa>
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	fffeffff 	.word	0xfffeffff
 8004c04:	fffbffff 	.word	0xfffbffff
 8004c08:	ffff80ff 	.word	0xffff80ff
 8004c0c:	ffffc7ff 	.word	0xffffc7ff
 8004c10:	00f42400 	.word	0x00f42400
 8004c14:	20000000 	.word	0x20000000
 8004c18:	20000004 	.word	0x20000004
 8004c1c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c20:	4bac      	ldr	r3, [pc, #688]	; (8004ed4 <HAL_RCC_OscConfig+0x604>)
 8004c22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c24:	2380      	movs	r3, #128	; 0x80
 8004c26:	055b      	lsls	r3, r3, #21
 8004c28:	4013      	ands	r3, r2
 8004c2a:	d101      	bne.n	8004c30 <HAL_RCC_OscConfig+0x360>
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e000      	b.n	8004c32 <HAL_RCC_OscConfig+0x362>
 8004c30:	2300      	movs	r3, #0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d011      	beq.n	8004c5a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004c36:	4ba7      	ldr	r3, [pc, #668]	; (8004ed4 <HAL_RCC_OscConfig+0x604>)
 8004c38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c3a:	4ba6      	ldr	r3, [pc, #664]	; (8004ed4 <HAL_RCC_OscConfig+0x604>)
 8004c3c:	2180      	movs	r1, #128	; 0x80
 8004c3e:	0549      	lsls	r1, r1, #21
 8004c40:	430a      	orrs	r2, r1
 8004c42:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c44:	4ba3      	ldr	r3, [pc, #652]	; (8004ed4 <HAL_RCC_OscConfig+0x604>)
 8004c46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c48:	2380      	movs	r3, #128	; 0x80
 8004c4a:	055b      	lsls	r3, r3, #21
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]
 8004c50:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004c52:	231f      	movs	r3, #31
 8004c54:	18fb      	adds	r3, r7, r3
 8004c56:	2201      	movs	r2, #1
 8004c58:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c5a:	4b9f      	ldr	r3, [pc, #636]	; (8004ed8 <HAL_RCC_OscConfig+0x608>)
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	2380      	movs	r3, #128	; 0x80
 8004c60:	005b      	lsls	r3, r3, #1
 8004c62:	4013      	ands	r3, r2
 8004c64:	d11a      	bne.n	8004c9c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c66:	4b9c      	ldr	r3, [pc, #624]	; (8004ed8 <HAL_RCC_OscConfig+0x608>)
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	4b9b      	ldr	r3, [pc, #620]	; (8004ed8 <HAL_RCC_OscConfig+0x608>)
 8004c6c:	2180      	movs	r1, #128	; 0x80
 8004c6e:	0049      	lsls	r1, r1, #1
 8004c70:	430a      	orrs	r2, r1
 8004c72:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004c74:	f7fc fd4a 	bl	800170c <HAL_GetTick>
 8004c78:	0003      	movs	r3, r0
 8004c7a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c7c:	e008      	b.n	8004c90 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c7e:	f7fc fd45 	bl	800170c <HAL_GetTick>
 8004c82:	0002      	movs	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e11c      	b.n	8004eca <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c90:	4b91      	ldr	r3, [pc, #580]	; (8004ed8 <HAL_RCC_OscConfig+0x608>)
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	2380      	movs	r3, #128	; 0x80
 8004c96:	005b      	lsls	r3, r3, #1
 8004c98:	4013      	ands	r3, r2
 8004c9a:	d0f0      	beq.n	8004c7e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d106      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x3e2>
 8004ca4:	4b8b      	ldr	r3, [pc, #556]	; (8004ed4 <HAL_RCC_OscConfig+0x604>)
 8004ca6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ca8:	4b8a      	ldr	r3, [pc, #552]	; (8004ed4 <HAL_RCC_OscConfig+0x604>)
 8004caa:	2101      	movs	r1, #1
 8004cac:	430a      	orrs	r2, r1
 8004cae:	65da      	str	r2, [r3, #92]	; 0x5c
 8004cb0:	e01c      	b.n	8004cec <HAL_RCC_OscConfig+0x41c>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	2b05      	cmp	r3, #5
 8004cb8:	d10c      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x404>
 8004cba:	4b86      	ldr	r3, [pc, #536]	; (8004ed4 <HAL_RCC_OscConfig+0x604>)
 8004cbc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cbe:	4b85      	ldr	r3, [pc, #532]	; (8004ed4 <HAL_RCC_OscConfig+0x604>)
 8004cc0:	2104      	movs	r1, #4
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	65da      	str	r2, [r3, #92]	; 0x5c
 8004cc6:	4b83      	ldr	r3, [pc, #524]	; (8004ed4 <HAL_RCC_OscConfig+0x604>)
 8004cc8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cca:	4b82      	ldr	r3, [pc, #520]	; (8004ed4 <HAL_RCC_OscConfig+0x604>)
 8004ccc:	2101      	movs	r1, #1
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	65da      	str	r2, [r3, #92]	; 0x5c
 8004cd2:	e00b      	b.n	8004cec <HAL_RCC_OscConfig+0x41c>
 8004cd4:	4b7f      	ldr	r3, [pc, #508]	; (8004ed4 <HAL_RCC_OscConfig+0x604>)
 8004cd6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cd8:	4b7e      	ldr	r3, [pc, #504]	; (8004ed4 <HAL_RCC_OscConfig+0x604>)
 8004cda:	2101      	movs	r1, #1
 8004cdc:	438a      	bics	r2, r1
 8004cde:	65da      	str	r2, [r3, #92]	; 0x5c
 8004ce0:	4b7c      	ldr	r3, [pc, #496]	; (8004ed4 <HAL_RCC_OscConfig+0x604>)
 8004ce2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ce4:	4b7b      	ldr	r3, [pc, #492]	; (8004ed4 <HAL_RCC_OscConfig+0x604>)
 8004ce6:	2104      	movs	r1, #4
 8004ce8:	438a      	bics	r2, r1
 8004cea:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d014      	beq.n	8004d1e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf4:	f7fc fd0a 	bl	800170c <HAL_GetTick>
 8004cf8:	0003      	movs	r3, r0
 8004cfa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cfc:	e009      	b.n	8004d12 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cfe:	f7fc fd05 	bl	800170c <HAL_GetTick>
 8004d02:	0002      	movs	r2, r0
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	4a74      	ldr	r2, [pc, #464]	; (8004edc <HAL_RCC_OscConfig+0x60c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e0db      	b.n	8004eca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d12:	4b70      	ldr	r3, [pc, #448]	; (8004ed4 <HAL_RCC_OscConfig+0x604>)
 8004d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d16:	2202      	movs	r2, #2
 8004d18:	4013      	ands	r3, r2
 8004d1a:	d0f0      	beq.n	8004cfe <HAL_RCC_OscConfig+0x42e>
 8004d1c:	e013      	b.n	8004d46 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d1e:	f7fc fcf5 	bl	800170c <HAL_GetTick>
 8004d22:	0003      	movs	r3, r0
 8004d24:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d26:	e009      	b.n	8004d3c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d28:	f7fc fcf0 	bl	800170c <HAL_GetTick>
 8004d2c:	0002      	movs	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	4a6a      	ldr	r2, [pc, #424]	; (8004edc <HAL_RCC_OscConfig+0x60c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e0c6      	b.n	8004eca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d3c:	4b65      	ldr	r3, [pc, #404]	; (8004ed4 <HAL_RCC_OscConfig+0x604>)
 8004d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d40:	2202      	movs	r2, #2
 8004d42:	4013      	ands	r3, r2
 8004d44:	d1f0      	bne.n	8004d28 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004d46:	231f      	movs	r3, #31
 8004d48:	18fb      	adds	r3, r7, r3
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d105      	bne.n	8004d5c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004d50:	4b60      	ldr	r3, [pc, #384]	; (8004ed4 <HAL_RCC_OscConfig+0x604>)
 8004d52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d54:	4b5f      	ldr	r3, [pc, #380]	; (8004ed4 <HAL_RCC_OscConfig+0x604>)
 8004d56:	4962      	ldr	r1, [pc, #392]	; (8004ee0 <HAL_RCC_OscConfig+0x610>)
 8004d58:	400a      	ands	r2, r1
 8004d5a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d100      	bne.n	8004d66 <HAL_RCC_OscConfig+0x496>
 8004d64:	e0b0      	b.n	8004ec8 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d66:	4b5b      	ldr	r3, [pc, #364]	; (8004ed4 <HAL_RCC_OscConfig+0x604>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	2238      	movs	r2, #56	; 0x38
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	2b10      	cmp	r3, #16
 8004d70:	d100      	bne.n	8004d74 <HAL_RCC_OscConfig+0x4a4>
 8004d72:	e078      	b.n	8004e66 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d153      	bne.n	8004e24 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d7c:	4b55      	ldr	r3, [pc, #340]	; (8004ed4 <HAL_RCC_OscConfig+0x604>)
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	4b54      	ldr	r3, [pc, #336]	; (8004ed4 <HAL_RCC_OscConfig+0x604>)
 8004d82:	4958      	ldr	r1, [pc, #352]	; (8004ee4 <HAL_RCC_OscConfig+0x614>)
 8004d84:	400a      	ands	r2, r1
 8004d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d88:	f7fc fcc0 	bl	800170c <HAL_GetTick>
 8004d8c:	0003      	movs	r3, r0
 8004d8e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d90:	e008      	b.n	8004da4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d92:	f7fc fcbb 	bl	800170c <HAL_GetTick>
 8004d96:	0002      	movs	r2, r0
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e092      	b.n	8004eca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004da4:	4b4b      	ldr	r3, [pc, #300]	; (8004ed4 <HAL_RCC_OscConfig+0x604>)
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	2380      	movs	r3, #128	; 0x80
 8004daa:	049b      	lsls	r3, r3, #18
 8004dac:	4013      	ands	r3, r2
 8004dae:	d1f0      	bne.n	8004d92 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004db0:	4b48      	ldr	r3, [pc, #288]	; (8004ed4 <HAL_RCC_OscConfig+0x604>)
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	4a4c      	ldr	r2, [pc, #304]	; (8004ee8 <HAL_RCC_OscConfig+0x618>)
 8004db6:	4013      	ands	r3, r2
 8004db8:	0019      	movs	r1, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1a      	ldr	r2, [r3, #32]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc8:	021b      	lsls	r3, r3, #8
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	4b3e      	ldr	r3, [pc, #248]	; (8004ed4 <HAL_RCC_OscConfig+0x604>)
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dde:	4b3d      	ldr	r3, [pc, #244]	; (8004ed4 <HAL_RCC_OscConfig+0x604>)
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	4b3c      	ldr	r3, [pc, #240]	; (8004ed4 <HAL_RCC_OscConfig+0x604>)
 8004de4:	2180      	movs	r1, #128	; 0x80
 8004de6:	0449      	lsls	r1, r1, #17
 8004de8:	430a      	orrs	r2, r1
 8004dea:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004dec:	4b39      	ldr	r3, [pc, #228]	; (8004ed4 <HAL_RCC_OscConfig+0x604>)
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	4b38      	ldr	r3, [pc, #224]	; (8004ed4 <HAL_RCC_OscConfig+0x604>)
 8004df2:	2180      	movs	r1, #128	; 0x80
 8004df4:	0549      	lsls	r1, r1, #21
 8004df6:	430a      	orrs	r2, r1
 8004df8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfa:	f7fc fc87 	bl	800170c <HAL_GetTick>
 8004dfe:	0003      	movs	r3, r0
 8004e00:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e04:	f7fc fc82 	bl	800170c <HAL_GetTick>
 8004e08:	0002      	movs	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e059      	b.n	8004eca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e16:	4b2f      	ldr	r3, [pc, #188]	; (8004ed4 <HAL_RCC_OscConfig+0x604>)
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	2380      	movs	r3, #128	; 0x80
 8004e1c:	049b      	lsls	r3, r3, #18
 8004e1e:	4013      	ands	r3, r2
 8004e20:	d0f0      	beq.n	8004e04 <HAL_RCC_OscConfig+0x534>
 8004e22:	e051      	b.n	8004ec8 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e24:	4b2b      	ldr	r3, [pc, #172]	; (8004ed4 <HAL_RCC_OscConfig+0x604>)
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	4b2a      	ldr	r3, [pc, #168]	; (8004ed4 <HAL_RCC_OscConfig+0x604>)
 8004e2a:	492e      	ldr	r1, [pc, #184]	; (8004ee4 <HAL_RCC_OscConfig+0x614>)
 8004e2c:	400a      	ands	r2, r1
 8004e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e30:	f7fc fc6c 	bl	800170c <HAL_GetTick>
 8004e34:	0003      	movs	r3, r0
 8004e36:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e38:	e008      	b.n	8004e4c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e3a:	f7fc fc67 	bl	800170c <HAL_GetTick>
 8004e3e:	0002      	movs	r2, r0
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d901      	bls.n	8004e4c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e03e      	b.n	8004eca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e4c:	4b21      	ldr	r3, [pc, #132]	; (8004ed4 <HAL_RCC_OscConfig+0x604>)
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	2380      	movs	r3, #128	; 0x80
 8004e52:	049b      	lsls	r3, r3, #18
 8004e54:	4013      	ands	r3, r2
 8004e56:	d1f0      	bne.n	8004e3a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004e58:	4b1e      	ldr	r3, [pc, #120]	; (8004ed4 <HAL_RCC_OscConfig+0x604>)
 8004e5a:	68da      	ldr	r2, [r3, #12]
 8004e5c:	4b1d      	ldr	r3, [pc, #116]	; (8004ed4 <HAL_RCC_OscConfig+0x604>)
 8004e5e:	4923      	ldr	r1, [pc, #140]	; (8004eec <HAL_RCC_OscConfig+0x61c>)
 8004e60:	400a      	ands	r2, r1
 8004e62:	60da      	str	r2, [r3, #12]
 8004e64:	e030      	b.n	8004ec8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d101      	bne.n	8004e72 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e02b      	b.n	8004eca <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004e72:	4b18      	ldr	r3, [pc, #96]	; (8004ed4 <HAL_RCC_OscConfig+0x604>)
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	2203      	movs	r2, #3
 8004e7c:	401a      	ands	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d11e      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	2270      	movs	r2, #112	; 0x70
 8004e8a:	401a      	ands	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d117      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	23fe      	movs	r3, #254	; 0xfe
 8004e98:	01db      	lsls	r3, r3, #7
 8004e9a:	401a      	ands	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d10e      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	23f8      	movs	r3, #248	; 0xf8
 8004eaa:	039b      	lsls	r3, r3, #14
 8004eac:	401a      	ands	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d106      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	0f5b      	lsrs	r3, r3, #29
 8004eba:	075a      	lsls	r2, r3, #29
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d001      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e000      	b.n	8004eca <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	0018      	movs	r0, r3
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	b008      	add	sp, #32
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	46c0      	nop			; (mov r8, r8)
 8004ed4:	40021000 	.word	0x40021000
 8004ed8:	40007000 	.word	0x40007000
 8004edc:	00001388 	.word	0x00001388
 8004ee0:	efffffff 	.word	0xefffffff
 8004ee4:	feffffff 	.word	0xfeffffff
 8004ee8:	1fc1808c 	.word	0x1fc1808c
 8004eec:	effefffc 	.word	0xeffefffc

08004ef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e0e9      	b.n	80050d8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f04:	4b76      	ldr	r3, [pc, #472]	; (80050e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2207      	movs	r2, #7
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d91e      	bls.n	8004f50 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f12:	4b73      	ldr	r3, [pc, #460]	; (80050e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2207      	movs	r2, #7
 8004f18:	4393      	bics	r3, r2
 8004f1a:	0019      	movs	r1, r3
 8004f1c:	4b70      	ldr	r3, [pc, #448]	; (80050e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f1e:	683a      	ldr	r2, [r7, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f24:	f7fc fbf2 	bl	800170c <HAL_GetTick>
 8004f28:	0003      	movs	r3, r0
 8004f2a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004f2c:	e009      	b.n	8004f42 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f2e:	f7fc fbed 	bl	800170c <HAL_GetTick>
 8004f32:	0002      	movs	r2, r0
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	4a6a      	ldr	r2, [pc, #424]	; (80050e4 <HAL_RCC_ClockConfig+0x1f4>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e0ca      	b.n	80050d8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004f42:	4b67      	ldr	r3, [pc, #412]	; (80050e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2207      	movs	r2, #7
 8004f48:	4013      	ands	r3, r2
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d1ee      	bne.n	8004f2e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2202      	movs	r2, #2
 8004f56:	4013      	ands	r3, r2
 8004f58:	d015      	beq.n	8004f86 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2204      	movs	r2, #4
 8004f60:	4013      	ands	r3, r2
 8004f62:	d006      	beq.n	8004f72 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004f64:	4b60      	ldr	r3, [pc, #384]	; (80050e8 <HAL_RCC_ClockConfig+0x1f8>)
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	4b5f      	ldr	r3, [pc, #380]	; (80050e8 <HAL_RCC_ClockConfig+0x1f8>)
 8004f6a:	21e0      	movs	r1, #224	; 0xe0
 8004f6c:	01c9      	lsls	r1, r1, #7
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f72:	4b5d      	ldr	r3, [pc, #372]	; (80050e8 <HAL_RCC_ClockConfig+0x1f8>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	4a5d      	ldr	r2, [pc, #372]	; (80050ec <HAL_RCC_ClockConfig+0x1fc>)
 8004f78:	4013      	ands	r3, r2
 8004f7a:	0019      	movs	r1, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689a      	ldr	r2, [r3, #8]
 8004f80:	4b59      	ldr	r3, [pc, #356]	; (80050e8 <HAL_RCC_ClockConfig+0x1f8>)
 8004f82:	430a      	orrs	r2, r1
 8004f84:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	d057      	beq.n	8005040 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d107      	bne.n	8004fa8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f98:	4b53      	ldr	r3, [pc, #332]	; (80050e8 <HAL_RCC_ClockConfig+0x1f8>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	2380      	movs	r3, #128	; 0x80
 8004f9e:	029b      	lsls	r3, r3, #10
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	d12b      	bne.n	8004ffc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e097      	b.n	80050d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d107      	bne.n	8004fc0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fb0:	4b4d      	ldr	r3, [pc, #308]	; (80050e8 <HAL_RCC_ClockConfig+0x1f8>)
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	2380      	movs	r3, #128	; 0x80
 8004fb6:	049b      	lsls	r3, r3, #18
 8004fb8:	4013      	ands	r3, r2
 8004fba:	d11f      	bne.n	8004ffc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e08b      	b.n	80050d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d107      	bne.n	8004fd8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fc8:	4b47      	ldr	r3, [pc, #284]	; (80050e8 <HAL_RCC_ClockConfig+0x1f8>)
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	2380      	movs	r3, #128	; 0x80
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	d113      	bne.n	8004ffc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e07f      	b.n	80050d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	2b03      	cmp	r3, #3
 8004fde:	d106      	bne.n	8004fee <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fe0:	4b41      	ldr	r3, [pc, #260]	; (80050e8 <HAL_RCC_ClockConfig+0x1f8>)
 8004fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	d108      	bne.n	8004ffc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e074      	b.n	80050d8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fee:	4b3e      	ldr	r3, [pc, #248]	; (80050e8 <HAL_RCC_ClockConfig+0x1f8>)
 8004ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	d101      	bne.n	8004ffc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e06d      	b.n	80050d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ffc:	4b3a      	ldr	r3, [pc, #232]	; (80050e8 <HAL_RCC_ClockConfig+0x1f8>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	2207      	movs	r2, #7
 8005002:	4393      	bics	r3, r2
 8005004:	0019      	movs	r1, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	4b37      	ldr	r3, [pc, #220]	; (80050e8 <HAL_RCC_ClockConfig+0x1f8>)
 800500c:	430a      	orrs	r2, r1
 800500e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005010:	f7fc fb7c 	bl	800170c <HAL_GetTick>
 8005014:	0003      	movs	r3, r0
 8005016:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005018:	e009      	b.n	800502e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800501a:	f7fc fb77 	bl	800170c <HAL_GetTick>
 800501e:	0002      	movs	r2, r0
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	4a2f      	ldr	r2, [pc, #188]	; (80050e4 <HAL_RCC_ClockConfig+0x1f4>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d901      	bls.n	800502e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e054      	b.n	80050d8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800502e:	4b2e      	ldr	r3, [pc, #184]	; (80050e8 <HAL_RCC_ClockConfig+0x1f8>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	2238      	movs	r2, #56	; 0x38
 8005034:	401a      	ands	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	429a      	cmp	r2, r3
 800503e:	d1ec      	bne.n	800501a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005040:	4b27      	ldr	r3, [pc, #156]	; (80050e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2207      	movs	r2, #7
 8005046:	4013      	ands	r3, r2
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	429a      	cmp	r2, r3
 800504c:	d21e      	bcs.n	800508c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800504e:	4b24      	ldr	r3, [pc, #144]	; (80050e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2207      	movs	r2, #7
 8005054:	4393      	bics	r3, r2
 8005056:	0019      	movs	r1, r3
 8005058:	4b21      	ldr	r3, [pc, #132]	; (80050e0 <HAL_RCC_ClockConfig+0x1f0>)
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005060:	f7fc fb54 	bl	800170c <HAL_GetTick>
 8005064:	0003      	movs	r3, r0
 8005066:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005068:	e009      	b.n	800507e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800506a:	f7fc fb4f 	bl	800170c <HAL_GetTick>
 800506e:	0002      	movs	r2, r0
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	4a1b      	ldr	r2, [pc, #108]	; (80050e4 <HAL_RCC_ClockConfig+0x1f4>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d901      	bls.n	800507e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e02c      	b.n	80050d8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800507e:	4b18      	ldr	r3, [pc, #96]	; (80050e0 <HAL_RCC_ClockConfig+0x1f0>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2207      	movs	r2, #7
 8005084:	4013      	ands	r3, r2
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	429a      	cmp	r2, r3
 800508a:	d1ee      	bne.n	800506a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2204      	movs	r2, #4
 8005092:	4013      	ands	r3, r2
 8005094:	d009      	beq.n	80050aa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005096:	4b14      	ldr	r3, [pc, #80]	; (80050e8 <HAL_RCC_ClockConfig+0x1f8>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	4a15      	ldr	r2, [pc, #84]	; (80050f0 <HAL_RCC_ClockConfig+0x200>)
 800509c:	4013      	ands	r3, r2
 800509e:	0019      	movs	r1, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68da      	ldr	r2, [r3, #12]
 80050a4:	4b10      	ldr	r3, [pc, #64]	; (80050e8 <HAL_RCC_ClockConfig+0x1f8>)
 80050a6:	430a      	orrs	r2, r1
 80050a8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80050aa:	f000 f829 	bl	8005100 <HAL_RCC_GetSysClockFreq>
 80050ae:	0001      	movs	r1, r0
 80050b0:	4b0d      	ldr	r3, [pc, #52]	; (80050e8 <HAL_RCC_ClockConfig+0x1f8>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	0a1b      	lsrs	r3, r3, #8
 80050b6:	220f      	movs	r2, #15
 80050b8:	401a      	ands	r2, r3
 80050ba:	4b0e      	ldr	r3, [pc, #56]	; (80050f4 <HAL_RCC_ClockConfig+0x204>)
 80050bc:	0092      	lsls	r2, r2, #2
 80050be:	58d3      	ldr	r3, [r2, r3]
 80050c0:	221f      	movs	r2, #31
 80050c2:	4013      	ands	r3, r2
 80050c4:	000a      	movs	r2, r1
 80050c6:	40da      	lsrs	r2, r3
 80050c8:	4b0b      	ldr	r3, [pc, #44]	; (80050f8 <HAL_RCC_ClockConfig+0x208>)
 80050ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80050cc:	4b0b      	ldr	r3, [pc, #44]	; (80050fc <HAL_RCC_ClockConfig+0x20c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	0018      	movs	r0, r3
 80050d2:	f7fc fabf 	bl	8001654 <HAL_InitTick>
 80050d6:	0003      	movs	r3, r0
}
 80050d8:	0018      	movs	r0, r3
 80050da:	46bd      	mov	sp, r7
 80050dc:	b004      	add	sp, #16
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	40022000 	.word	0x40022000
 80050e4:	00001388 	.word	0x00001388
 80050e8:	40021000 	.word	0x40021000
 80050ec:	fffff0ff 	.word	0xfffff0ff
 80050f0:	ffff8fff 	.word	0xffff8fff
 80050f4:	08006980 	.word	0x08006980
 80050f8:	20000000 	.word	0x20000000
 80050fc:	20000004 	.word	0x20000004

08005100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005106:	4b3c      	ldr	r3, [pc, #240]	; (80051f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	2238      	movs	r2, #56	; 0x38
 800510c:	4013      	ands	r3, r2
 800510e:	d10f      	bne.n	8005130 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005110:	4b39      	ldr	r3, [pc, #228]	; (80051f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	0adb      	lsrs	r3, r3, #11
 8005116:	2207      	movs	r2, #7
 8005118:	4013      	ands	r3, r2
 800511a:	2201      	movs	r2, #1
 800511c:	409a      	lsls	r2, r3
 800511e:	0013      	movs	r3, r2
 8005120:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005122:	6839      	ldr	r1, [r7, #0]
 8005124:	4835      	ldr	r0, [pc, #212]	; (80051fc <HAL_RCC_GetSysClockFreq+0xfc>)
 8005126:	f7fa ffeb 	bl	8000100 <__udivsi3>
 800512a:	0003      	movs	r3, r0
 800512c:	613b      	str	r3, [r7, #16]
 800512e:	e05d      	b.n	80051ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005130:	4b31      	ldr	r3, [pc, #196]	; (80051f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	2238      	movs	r2, #56	; 0x38
 8005136:	4013      	ands	r3, r2
 8005138:	2b08      	cmp	r3, #8
 800513a:	d102      	bne.n	8005142 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800513c:	4b30      	ldr	r3, [pc, #192]	; (8005200 <HAL_RCC_GetSysClockFreq+0x100>)
 800513e:	613b      	str	r3, [r7, #16]
 8005140:	e054      	b.n	80051ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005142:	4b2d      	ldr	r3, [pc, #180]	; (80051f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	2238      	movs	r2, #56	; 0x38
 8005148:	4013      	ands	r3, r2
 800514a:	2b10      	cmp	r3, #16
 800514c:	d138      	bne.n	80051c0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800514e:	4b2a      	ldr	r3, [pc, #168]	; (80051f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	2203      	movs	r2, #3
 8005154:	4013      	ands	r3, r2
 8005156:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005158:	4b27      	ldr	r3, [pc, #156]	; (80051f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	091b      	lsrs	r3, r3, #4
 800515e:	2207      	movs	r2, #7
 8005160:	4013      	ands	r3, r2
 8005162:	3301      	adds	r3, #1
 8005164:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2b03      	cmp	r3, #3
 800516a:	d10d      	bne.n	8005188 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800516c:	68b9      	ldr	r1, [r7, #8]
 800516e:	4824      	ldr	r0, [pc, #144]	; (8005200 <HAL_RCC_GetSysClockFreq+0x100>)
 8005170:	f7fa ffc6 	bl	8000100 <__udivsi3>
 8005174:	0003      	movs	r3, r0
 8005176:	0019      	movs	r1, r3
 8005178:	4b1f      	ldr	r3, [pc, #124]	; (80051f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	0a1b      	lsrs	r3, r3, #8
 800517e:	227f      	movs	r2, #127	; 0x7f
 8005180:	4013      	ands	r3, r2
 8005182:	434b      	muls	r3, r1
 8005184:	617b      	str	r3, [r7, #20]
        break;
 8005186:	e00d      	b.n	80051a4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005188:	68b9      	ldr	r1, [r7, #8]
 800518a:	481c      	ldr	r0, [pc, #112]	; (80051fc <HAL_RCC_GetSysClockFreq+0xfc>)
 800518c:	f7fa ffb8 	bl	8000100 <__udivsi3>
 8005190:	0003      	movs	r3, r0
 8005192:	0019      	movs	r1, r3
 8005194:	4b18      	ldr	r3, [pc, #96]	; (80051f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	0a1b      	lsrs	r3, r3, #8
 800519a:	227f      	movs	r2, #127	; 0x7f
 800519c:	4013      	ands	r3, r2
 800519e:	434b      	muls	r3, r1
 80051a0:	617b      	str	r3, [r7, #20]
        break;
 80051a2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80051a4:	4b14      	ldr	r3, [pc, #80]	; (80051f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	0f5b      	lsrs	r3, r3, #29
 80051aa:	2207      	movs	r2, #7
 80051ac:	4013      	ands	r3, r2
 80051ae:	3301      	adds	r3, #1
 80051b0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80051b2:	6879      	ldr	r1, [r7, #4]
 80051b4:	6978      	ldr	r0, [r7, #20]
 80051b6:	f7fa ffa3 	bl	8000100 <__udivsi3>
 80051ba:	0003      	movs	r3, r0
 80051bc:	613b      	str	r3, [r7, #16]
 80051be:	e015      	b.n	80051ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80051c0:	4b0d      	ldr	r3, [pc, #52]	; (80051f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	2238      	movs	r2, #56	; 0x38
 80051c6:	4013      	ands	r3, r2
 80051c8:	2b20      	cmp	r3, #32
 80051ca:	d103      	bne.n	80051d4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80051cc:	2380      	movs	r3, #128	; 0x80
 80051ce:	021b      	lsls	r3, r3, #8
 80051d0:	613b      	str	r3, [r7, #16]
 80051d2:	e00b      	b.n	80051ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80051d4:	4b08      	ldr	r3, [pc, #32]	; (80051f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	2238      	movs	r2, #56	; 0x38
 80051da:	4013      	ands	r3, r2
 80051dc:	2b18      	cmp	r3, #24
 80051de:	d103      	bne.n	80051e8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80051e0:	23fa      	movs	r3, #250	; 0xfa
 80051e2:	01db      	lsls	r3, r3, #7
 80051e4:	613b      	str	r3, [r7, #16]
 80051e6:	e001      	b.n	80051ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80051ec:	693b      	ldr	r3, [r7, #16]
}
 80051ee:	0018      	movs	r0, r3
 80051f0:	46bd      	mov	sp, r7
 80051f2:	b006      	add	sp, #24
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	46c0      	nop			; (mov r8, r8)
 80051f8:	40021000 	.word	0x40021000
 80051fc:	00f42400 	.word	0x00f42400
 8005200:	007a1200 	.word	0x007a1200

08005204 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800520c:	2313      	movs	r3, #19
 800520e:	18fb      	adds	r3, r7, r3
 8005210:	2200      	movs	r2, #0
 8005212:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005214:	2312      	movs	r3, #18
 8005216:	18fb      	adds	r3, r7, r3
 8005218:	2200      	movs	r2, #0
 800521a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	2380      	movs	r3, #128	; 0x80
 8005222:	029b      	lsls	r3, r3, #10
 8005224:	4013      	ands	r3, r2
 8005226:	d100      	bne.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005228:	e0a3      	b.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800522a:	2011      	movs	r0, #17
 800522c:	183b      	adds	r3, r7, r0
 800522e:	2200      	movs	r2, #0
 8005230:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005232:	4b86      	ldr	r3, [pc, #536]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005234:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005236:	2380      	movs	r3, #128	; 0x80
 8005238:	055b      	lsls	r3, r3, #21
 800523a:	4013      	ands	r3, r2
 800523c:	d110      	bne.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800523e:	4b83      	ldr	r3, [pc, #524]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005240:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005242:	4b82      	ldr	r3, [pc, #520]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005244:	2180      	movs	r1, #128	; 0x80
 8005246:	0549      	lsls	r1, r1, #21
 8005248:	430a      	orrs	r2, r1
 800524a:	63da      	str	r2, [r3, #60]	; 0x3c
 800524c:	4b7f      	ldr	r3, [pc, #508]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800524e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005250:	2380      	movs	r3, #128	; 0x80
 8005252:	055b      	lsls	r3, r3, #21
 8005254:	4013      	ands	r3, r2
 8005256:	60bb      	str	r3, [r7, #8]
 8005258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800525a:	183b      	adds	r3, r7, r0
 800525c:	2201      	movs	r2, #1
 800525e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005260:	4b7b      	ldr	r3, [pc, #492]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	4b7a      	ldr	r3, [pc, #488]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005266:	2180      	movs	r1, #128	; 0x80
 8005268:	0049      	lsls	r1, r1, #1
 800526a:	430a      	orrs	r2, r1
 800526c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800526e:	f7fc fa4d 	bl	800170c <HAL_GetTick>
 8005272:	0003      	movs	r3, r0
 8005274:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005276:	e00b      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005278:	f7fc fa48 	bl	800170c <HAL_GetTick>
 800527c:	0002      	movs	r2, r0
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d904      	bls.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005286:	2313      	movs	r3, #19
 8005288:	18fb      	adds	r3, r7, r3
 800528a:	2203      	movs	r2, #3
 800528c:	701a      	strb	r2, [r3, #0]
        break;
 800528e:	e005      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005290:	4b6f      	ldr	r3, [pc, #444]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	2380      	movs	r3, #128	; 0x80
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	4013      	ands	r3, r2
 800529a:	d0ed      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800529c:	2313      	movs	r3, #19
 800529e:	18fb      	adds	r3, r7, r3
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d154      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052a6:	4b69      	ldr	r3, [pc, #420]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80052a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052aa:	23c0      	movs	r3, #192	; 0xc0
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4013      	ands	r3, r2
 80052b0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d019      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d014      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052c2:	4b62      	ldr	r3, [pc, #392]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80052c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c6:	4a63      	ldr	r2, [pc, #396]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80052c8:	4013      	ands	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052cc:	4b5f      	ldr	r3, [pc, #380]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80052ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052d0:	4b5e      	ldr	r3, [pc, #376]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80052d2:	2180      	movs	r1, #128	; 0x80
 80052d4:	0249      	lsls	r1, r1, #9
 80052d6:	430a      	orrs	r2, r1
 80052d8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052da:	4b5c      	ldr	r3, [pc, #368]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80052dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052de:	4b5b      	ldr	r3, [pc, #364]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80052e0:	495d      	ldr	r1, [pc, #372]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80052e2:	400a      	ands	r2, r1
 80052e4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052e6:	4b59      	ldr	r3, [pc, #356]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	2201      	movs	r2, #1
 80052f0:	4013      	ands	r3, r2
 80052f2:	d016      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f4:	f7fc fa0a 	bl	800170c <HAL_GetTick>
 80052f8:	0003      	movs	r3, r0
 80052fa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052fc:	e00c      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052fe:	f7fc fa05 	bl	800170c <HAL_GetTick>
 8005302:	0002      	movs	r2, r0
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	4a54      	ldr	r2, [pc, #336]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d904      	bls.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800530e:	2313      	movs	r3, #19
 8005310:	18fb      	adds	r3, r7, r3
 8005312:	2203      	movs	r2, #3
 8005314:	701a      	strb	r2, [r3, #0]
            break;
 8005316:	e004      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005318:	4b4c      	ldr	r3, [pc, #304]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800531a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800531c:	2202      	movs	r2, #2
 800531e:	4013      	ands	r3, r2
 8005320:	d0ed      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005322:	2313      	movs	r3, #19
 8005324:	18fb      	adds	r3, r7, r3
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10a      	bne.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800532c:	4b47      	ldr	r3, [pc, #284]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800532e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005330:	4a48      	ldr	r2, [pc, #288]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005332:	4013      	ands	r3, r2
 8005334:	0019      	movs	r1, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	699a      	ldr	r2, [r3, #24]
 800533a:	4b44      	ldr	r3, [pc, #272]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800533c:	430a      	orrs	r2, r1
 800533e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005340:	e00c      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005342:	2312      	movs	r3, #18
 8005344:	18fb      	adds	r3, r7, r3
 8005346:	2213      	movs	r2, #19
 8005348:	18ba      	adds	r2, r7, r2
 800534a:	7812      	ldrb	r2, [r2, #0]
 800534c:	701a      	strb	r2, [r3, #0]
 800534e:	e005      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005350:	2312      	movs	r3, #18
 8005352:	18fb      	adds	r3, r7, r3
 8005354:	2213      	movs	r2, #19
 8005356:	18ba      	adds	r2, r7, r2
 8005358:	7812      	ldrb	r2, [r2, #0]
 800535a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800535c:	2311      	movs	r3, #17
 800535e:	18fb      	adds	r3, r7, r3
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d105      	bne.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005366:	4b39      	ldr	r3, [pc, #228]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005368:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800536a:	4b38      	ldr	r3, [pc, #224]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800536c:	493c      	ldr	r1, [pc, #240]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800536e:	400a      	ands	r2, r1
 8005370:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2201      	movs	r2, #1
 8005378:	4013      	ands	r3, r2
 800537a:	d009      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800537c:	4b33      	ldr	r3, [pc, #204]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800537e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005380:	2203      	movs	r2, #3
 8005382:	4393      	bics	r3, r2
 8005384:	0019      	movs	r1, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	4b30      	ldr	r3, [pc, #192]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800538c:	430a      	orrs	r2, r1
 800538e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2202      	movs	r2, #2
 8005396:	4013      	ands	r3, r2
 8005398:	d009      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800539a:	4b2c      	ldr	r3, [pc, #176]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800539c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800539e:	220c      	movs	r2, #12
 80053a0:	4393      	bics	r3, r2
 80053a2:	0019      	movs	r1, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	4b28      	ldr	r3, [pc, #160]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053aa:	430a      	orrs	r2, r1
 80053ac:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2220      	movs	r2, #32
 80053b4:	4013      	ands	r3, r2
 80053b6:	d009      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053b8:	4b24      	ldr	r3, [pc, #144]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053bc:	4a29      	ldr	r2, [pc, #164]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053be:	4013      	ands	r3, r2
 80053c0:	0019      	movs	r1, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68da      	ldr	r2, [r3, #12]
 80053c6:	4b21      	ldr	r3, [pc, #132]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053c8:	430a      	orrs	r2, r1
 80053ca:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	2380      	movs	r3, #128	; 0x80
 80053d2:	01db      	lsls	r3, r3, #7
 80053d4:	4013      	ands	r3, r2
 80053d6:	d015      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053d8:	4b1c      	ldr	r3, [pc, #112]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	0899      	lsrs	r1, r3, #2
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	695a      	ldr	r2, [r3, #20]
 80053e4:	4b19      	ldr	r3, [pc, #100]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053e6:	430a      	orrs	r2, r1
 80053e8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	695a      	ldr	r2, [r3, #20]
 80053ee:	2380      	movs	r3, #128	; 0x80
 80053f0:	05db      	lsls	r3, r3, #23
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d106      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80053f6:	4b15      	ldr	r3, [pc, #84]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053f8:	68da      	ldr	r2, [r3, #12]
 80053fa:	4b14      	ldr	r3, [pc, #80]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053fc:	2180      	movs	r1, #128	; 0x80
 80053fe:	0249      	lsls	r1, r1, #9
 8005400:	430a      	orrs	r2, r1
 8005402:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	2380      	movs	r3, #128	; 0x80
 800540a:	011b      	lsls	r3, r3, #4
 800540c:	4013      	ands	r3, r2
 800540e:	d016      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005410:	4b0e      	ldr	r3, [pc, #56]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005414:	4a14      	ldr	r2, [pc, #80]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005416:	4013      	ands	r3, r2
 8005418:	0019      	movs	r1, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691a      	ldr	r2, [r3, #16]
 800541e:	4b0b      	ldr	r3, [pc, #44]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005420:	430a      	orrs	r2, r1
 8005422:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691a      	ldr	r2, [r3, #16]
 8005428:	2380      	movs	r3, #128	; 0x80
 800542a:	01db      	lsls	r3, r3, #7
 800542c:	429a      	cmp	r2, r3
 800542e:	d106      	bne.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005430:	4b06      	ldr	r3, [pc, #24]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005432:	68da      	ldr	r2, [r3, #12]
 8005434:	4b05      	ldr	r3, [pc, #20]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005436:	2180      	movs	r1, #128	; 0x80
 8005438:	0249      	lsls	r1, r1, #9
 800543a:	430a      	orrs	r2, r1
 800543c:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800543e:	2312      	movs	r3, #18
 8005440:	18fb      	adds	r3, r7, r3
 8005442:	781b      	ldrb	r3, [r3, #0]
}
 8005444:	0018      	movs	r0, r3
 8005446:	46bd      	mov	sp, r7
 8005448:	b006      	add	sp, #24
 800544a:	bd80      	pop	{r7, pc}
 800544c:	40021000 	.word	0x40021000
 8005450:	40007000 	.word	0x40007000
 8005454:	fffffcff 	.word	0xfffffcff
 8005458:	fffeffff 	.word	0xfffeffff
 800545c:	00001388 	.word	0x00001388
 8005460:	efffffff 	.word	0xefffffff
 8005464:	ffffcfff 	.word	0xffffcfff
 8005468:	ffff3fff 	.word	0xffff3fff

0800546c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e04a      	b.n	8005514 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	223d      	movs	r2, #61	; 0x3d
 8005482:	5c9b      	ldrb	r3, [r3, r2]
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d107      	bne.n	800549a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	223c      	movs	r2, #60	; 0x3c
 800548e:	2100      	movs	r1, #0
 8005490:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	0018      	movs	r0, r3
 8005496:	f7fb fefb 	bl	8001290 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	223d      	movs	r2, #61	; 0x3d
 800549e:	2102      	movs	r1, #2
 80054a0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	3304      	adds	r3, #4
 80054aa:	0019      	movs	r1, r3
 80054ac:	0010      	movs	r0, r2
 80054ae:	f000 fcef 	bl	8005e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2248      	movs	r2, #72	; 0x48
 80054b6:	2101      	movs	r1, #1
 80054b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	223e      	movs	r2, #62	; 0x3e
 80054be:	2101      	movs	r1, #1
 80054c0:	5499      	strb	r1, [r3, r2]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	223f      	movs	r2, #63	; 0x3f
 80054c6:	2101      	movs	r1, #1
 80054c8:	5499      	strb	r1, [r3, r2]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2240      	movs	r2, #64	; 0x40
 80054ce:	2101      	movs	r1, #1
 80054d0:	5499      	strb	r1, [r3, r2]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2241      	movs	r2, #65	; 0x41
 80054d6:	2101      	movs	r1, #1
 80054d8:	5499      	strb	r1, [r3, r2]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2242      	movs	r2, #66	; 0x42
 80054de:	2101      	movs	r1, #1
 80054e0:	5499      	strb	r1, [r3, r2]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2243      	movs	r2, #67	; 0x43
 80054e6:	2101      	movs	r1, #1
 80054e8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2244      	movs	r2, #68	; 0x44
 80054ee:	2101      	movs	r1, #1
 80054f0:	5499      	strb	r1, [r3, r2]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2245      	movs	r2, #69	; 0x45
 80054f6:	2101      	movs	r1, #1
 80054f8:	5499      	strb	r1, [r3, r2]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2246      	movs	r2, #70	; 0x46
 80054fe:	2101      	movs	r1, #1
 8005500:	5499      	strb	r1, [r3, r2]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2247      	movs	r2, #71	; 0x47
 8005506:	2101      	movs	r1, #1
 8005508:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	223d      	movs	r2, #61	; 0x3d
 800550e:	2101      	movs	r1, #1
 8005510:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	0018      	movs	r0, r3
 8005516:	46bd      	mov	sp, r7
 8005518:	b002      	add	sp, #8
 800551a:	bd80      	pop	{r7, pc}

0800551c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	223d      	movs	r2, #61	; 0x3d
 8005528:	5c9b      	ldrb	r3, [r3, r2]
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b01      	cmp	r3, #1
 800552e:	d001      	beq.n	8005534 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e03c      	b.n	80055ae <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	223d      	movs	r2, #61	; 0x3d
 8005538:	2102      	movs	r1, #2
 800553a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68da      	ldr	r2, [r3, #12]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2101      	movs	r1, #1
 8005548:	430a      	orrs	r2, r1
 800554a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a19      	ldr	r2, [pc, #100]	; (80055b8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d009      	beq.n	800556a <HAL_TIM_Base_Start_IT+0x4e>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a18      	ldr	r2, [pc, #96]	; (80055bc <HAL_TIM_Base_Start_IT+0xa0>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d004      	beq.n	800556a <HAL_TIM_Base_Start_IT+0x4e>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a16      	ldr	r2, [pc, #88]	; (80055c0 <HAL_TIM_Base_Start_IT+0xa4>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d116      	bne.n	8005598 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	4a14      	ldr	r2, [pc, #80]	; (80055c4 <HAL_TIM_Base_Start_IT+0xa8>)
 8005572:	4013      	ands	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2b06      	cmp	r3, #6
 800557a:	d016      	beq.n	80055aa <HAL_TIM_Base_Start_IT+0x8e>
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	2380      	movs	r3, #128	; 0x80
 8005580:	025b      	lsls	r3, r3, #9
 8005582:	429a      	cmp	r2, r3
 8005584:	d011      	beq.n	80055aa <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2101      	movs	r1, #1
 8005592:	430a      	orrs	r2, r1
 8005594:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005596:	e008      	b.n	80055aa <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2101      	movs	r1, #1
 80055a4:	430a      	orrs	r2, r1
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	e000      	b.n	80055ac <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055aa:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	0018      	movs	r0, r3
 80055b0:	46bd      	mov	sp, r7
 80055b2:	b004      	add	sp, #16
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	46c0      	nop			; (mov r8, r8)
 80055b8:	40012c00 	.word	0x40012c00
 80055bc:	40000400 	.word	0x40000400
 80055c0:	40014000 	.word	0x40014000
 80055c4:	00010007 	.word	0x00010007

080055c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e04a      	b.n	8005670 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	223d      	movs	r2, #61	; 0x3d
 80055de:	5c9b      	ldrb	r3, [r3, r2]
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d107      	bne.n	80055f6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	223c      	movs	r2, #60	; 0x3c
 80055ea:	2100      	movs	r1, #0
 80055ec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	0018      	movs	r0, r3
 80055f2:	f7fb fe89 	bl	8001308 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	223d      	movs	r2, #61	; 0x3d
 80055fa:	2102      	movs	r1, #2
 80055fc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	3304      	adds	r3, #4
 8005606:	0019      	movs	r1, r3
 8005608:	0010      	movs	r0, r2
 800560a:	f000 fc41 	bl	8005e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2248      	movs	r2, #72	; 0x48
 8005612:	2101      	movs	r1, #1
 8005614:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	223e      	movs	r2, #62	; 0x3e
 800561a:	2101      	movs	r1, #1
 800561c:	5499      	strb	r1, [r3, r2]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	223f      	movs	r2, #63	; 0x3f
 8005622:	2101      	movs	r1, #1
 8005624:	5499      	strb	r1, [r3, r2]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2240      	movs	r2, #64	; 0x40
 800562a:	2101      	movs	r1, #1
 800562c:	5499      	strb	r1, [r3, r2]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2241      	movs	r2, #65	; 0x41
 8005632:	2101      	movs	r1, #1
 8005634:	5499      	strb	r1, [r3, r2]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2242      	movs	r2, #66	; 0x42
 800563a:	2101      	movs	r1, #1
 800563c:	5499      	strb	r1, [r3, r2]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2243      	movs	r2, #67	; 0x43
 8005642:	2101      	movs	r1, #1
 8005644:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2244      	movs	r2, #68	; 0x44
 800564a:	2101      	movs	r1, #1
 800564c:	5499      	strb	r1, [r3, r2]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2245      	movs	r2, #69	; 0x45
 8005652:	2101      	movs	r1, #1
 8005654:	5499      	strb	r1, [r3, r2]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2246      	movs	r2, #70	; 0x46
 800565a:	2101      	movs	r1, #1
 800565c:	5499      	strb	r1, [r3, r2]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2247      	movs	r2, #71	; 0x47
 8005662:	2101      	movs	r1, #1
 8005664:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	223d      	movs	r2, #61	; 0x3d
 800566a:	2101      	movs	r1, #1
 800566c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	0018      	movs	r0, r3
 8005672:	46bd      	mov	sp, r7
 8005674:	b002      	add	sp, #8
 8005676:	bd80      	pop	{r7, pc}

08005678 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d108      	bne.n	800569a <HAL_TIM_PWM_Start+0x22>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	223e      	movs	r2, #62	; 0x3e
 800568c:	5c9b      	ldrb	r3, [r3, r2]
 800568e:	b2db      	uxtb	r3, r3
 8005690:	3b01      	subs	r3, #1
 8005692:	1e5a      	subs	r2, r3, #1
 8005694:	4193      	sbcs	r3, r2
 8005696:	b2db      	uxtb	r3, r3
 8005698:	e037      	b.n	800570a <HAL_TIM_PWM_Start+0x92>
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b04      	cmp	r3, #4
 800569e:	d108      	bne.n	80056b2 <HAL_TIM_PWM_Start+0x3a>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	223f      	movs	r2, #63	; 0x3f
 80056a4:	5c9b      	ldrb	r3, [r3, r2]
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	3b01      	subs	r3, #1
 80056aa:	1e5a      	subs	r2, r3, #1
 80056ac:	4193      	sbcs	r3, r2
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	e02b      	b.n	800570a <HAL_TIM_PWM_Start+0x92>
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d108      	bne.n	80056ca <HAL_TIM_PWM_Start+0x52>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2240      	movs	r2, #64	; 0x40
 80056bc:	5c9b      	ldrb	r3, [r3, r2]
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	3b01      	subs	r3, #1
 80056c2:	1e5a      	subs	r2, r3, #1
 80056c4:	4193      	sbcs	r3, r2
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	e01f      	b.n	800570a <HAL_TIM_PWM_Start+0x92>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2b0c      	cmp	r3, #12
 80056ce:	d108      	bne.n	80056e2 <HAL_TIM_PWM_Start+0x6a>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2241      	movs	r2, #65	; 0x41
 80056d4:	5c9b      	ldrb	r3, [r3, r2]
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	3b01      	subs	r3, #1
 80056da:	1e5a      	subs	r2, r3, #1
 80056dc:	4193      	sbcs	r3, r2
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	e013      	b.n	800570a <HAL_TIM_PWM_Start+0x92>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b10      	cmp	r3, #16
 80056e6:	d108      	bne.n	80056fa <HAL_TIM_PWM_Start+0x82>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2242      	movs	r2, #66	; 0x42
 80056ec:	5c9b      	ldrb	r3, [r3, r2]
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	3b01      	subs	r3, #1
 80056f2:	1e5a      	subs	r2, r3, #1
 80056f4:	4193      	sbcs	r3, r2
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	e007      	b.n	800570a <HAL_TIM_PWM_Start+0x92>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2243      	movs	r2, #67	; 0x43
 80056fe:	5c9b      	ldrb	r3, [r3, r2]
 8005700:	b2db      	uxtb	r3, r3
 8005702:	3b01      	subs	r3, #1
 8005704:	1e5a      	subs	r2, r3, #1
 8005706:	4193      	sbcs	r3, r2
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e085      	b.n	800581e <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d104      	bne.n	8005722 <HAL_TIM_PWM_Start+0xaa>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	223e      	movs	r2, #62	; 0x3e
 800571c:	2102      	movs	r1, #2
 800571e:	5499      	strb	r1, [r3, r2]
 8005720:	e023      	b.n	800576a <HAL_TIM_PWM_Start+0xf2>
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2b04      	cmp	r3, #4
 8005726:	d104      	bne.n	8005732 <HAL_TIM_PWM_Start+0xba>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	223f      	movs	r2, #63	; 0x3f
 800572c:	2102      	movs	r1, #2
 800572e:	5499      	strb	r1, [r3, r2]
 8005730:	e01b      	b.n	800576a <HAL_TIM_PWM_Start+0xf2>
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2b08      	cmp	r3, #8
 8005736:	d104      	bne.n	8005742 <HAL_TIM_PWM_Start+0xca>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2240      	movs	r2, #64	; 0x40
 800573c:	2102      	movs	r1, #2
 800573e:	5499      	strb	r1, [r3, r2]
 8005740:	e013      	b.n	800576a <HAL_TIM_PWM_Start+0xf2>
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b0c      	cmp	r3, #12
 8005746:	d104      	bne.n	8005752 <HAL_TIM_PWM_Start+0xda>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2241      	movs	r2, #65	; 0x41
 800574c:	2102      	movs	r1, #2
 800574e:	5499      	strb	r1, [r3, r2]
 8005750:	e00b      	b.n	800576a <HAL_TIM_PWM_Start+0xf2>
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2b10      	cmp	r3, #16
 8005756:	d104      	bne.n	8005762 <HAL_TIM_PWM_Start+0xea>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2242      	movs	r2, #66	; 0x42
 800575c:	2102      	movs	r1, #2
 800575e:	5499      	strb	r1, [r3, r2]
 8005760:	e003      	b.n	800576a <HAL_TIM_PWM_Start+0xf2>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2243      	movs	r2, #67	; 0x43
 8005766:	2102      	movs	r1, #2
 8005768:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	6839      	ldr	r1, [r7, #0]
 8005770:	2201      	movs	r2, #1
 8005772:	0018      	movs	r0, r3
 8005774:	f000 ff62 	bl	800663c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a2a      	ldr	r2, [pc, #168]	; (8005828 <HAL_TIM_PWM_Start+0x1b0>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d00e      	beq.n	80057a0 <HAL_TIM_PWM_Start+0x128>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a29      	ldr	r2, [pc, #164]	; (800582c <HAL_TIM_PWM_Start+0x1b4>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d009      	beq.n	80057a0 <HAL_TIM_PWM_Start+0x128>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a27      	ldr	r2, [pc, #156]	; (8005830 <HAL_TIM_PWM_Start+0x1b8>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d004      	beq.n	80057a0 <HAL_TIM_PWM_Start+0x128>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a26      	ldr	r2, [pc, #152]	; (8005834 <HAL_TIM_PWM_Start+0x1bc>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d101      	bne.n	80057a4 <HAL_TIM_PWM_Start+0x12c>
 80057a0:	2301      	movs	r3, #1
 80057a2:	e000      	b.n	80057a6 <HAL_TIM_PWM_Start+0x12e>
 80057a4:	2300      	movs	r3, #0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d008      	beq.n	80057bc <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2180      	movs	r1, #128	; 0x80
 80057b6:	0209      	lsls	r1, r1, #8
 80057b8:	430a      	orrs	r2, r1
 80057ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a19      	ldr	r2, [pc, #100]	; (8005828 <HAL_TIM_PWM_Start+0x1b0>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d009      	beq.n	80057da <HAL_TIM_PWM_Start+0x162>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a1b      	ldr	r2, [pc, #108]	; (8005838 <HAL_TIM_PWM_Start+0x1c0>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d004      	beq.n	80057da <HAL_TIM_PWM_Start+0x162>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a15      	ldr	r2, [pc, #84]	; (800582c <HAL_TIM_PWM_Start+0x1b4>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d116      	bne.n	8005808 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	4a16      	ldr	r2, [pc, #88]	; (800583c <HAL_TIM_PWM_Start+0x1c4>)
 80057e2:	4013      	ands	r3, r2
 80057e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2b06      	cmp	r3, #6
 80057ea:	d016      	beq.n	800581a <HAL_TIM_PWM_Start+0x1a2>
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	2380      	movs	r3, #128	; 0x80
 80057f0:	025b      	lsls	r3, r3, #9
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d011      	beq.n	800581a <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2101      	movs	r1, #1
 8005802:	430a      	orrs	r2, r1
 8005804:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005806:	e008      	b.n	800581a <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2101      	movs	r1, #1
 8005814:	430a      	orrs	r2, r1
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	e000      	b.n	800581c <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800581a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	0018      	movs	r0, r3
 8005820:	46bd      	mov	sp, r7
 8005822:	b004      	add	sp, #16
 8005824:	bd80      	pop	{r7, pc}
 8005826:	46c0      	nop			; (mov r8, r8)
 8005828:	40012c00 	.word	0x40012c00
 800582c:	40014000 	.word	0x40014000
 8005830:	40014400 	.word	0x40014400
 8005834:	40014800 	.word	0x40014800
 8005838:	40000400 	.word	0x40000400
 800583c:	00010007 	.word	0x00010007

08005840 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	2202      	movs	r2, #2
 8005850:	4013      	ands	r3, r2
 8005852:	2b02      	cmp	r3, #2
 8005854:	d124      	bne.n	80058a0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	2202      	movs	r2, #2
 800585e:	4013      	ands	r3, r2
 8005860:	2b02      	cmp	r3, #2
 8005862:	d11d      	bne.n	80058a0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2203      	movs	r2, #3
 800586a:	4252      	negs	r2, r2
 800586c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	2203      	movs	r2, #3
 800587c:	4013      	ands	r3, r2
 800587e:	d004      	beq.n	800588a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	0018      	movs	r0, r3
 8005884:	f000 faec 	bl	8005e60 <HAL_TIM_IC_CaptureCallback>
 8005888:	e007      	b.n	800589a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	0018      	movs	r0, r3
 800588e:	f000 fadf 	bl	8005e50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	0018      	movs	r0, r3
 8005896:	f000 faeb 	bl	8005e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	2204      	movs	r2, #4
 80058a8:	4013      	ands	r3, r2
 80058aa:	2b04      	cmp	r3, #4
 80058ac:	d125      	bne.n	80058fa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	2204      	movs	r2, #4
 80058b6:	4013      	ands	r3, r2
 80058b8:	2b04      	cmp	r3, #4
 80058ba:	d11e      	bne.n	80058fa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2205      	movs	r2, #5
 80058c2:	4252      	negs	r2, r2
 80058c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2202      	movs	r2, #2
 80058ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699a      	ldr	r2, [r3, #24]
 80058d2:	23c0      	movs	r3, #192	; 0xc0
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4013      	ands	r3, r2
 80058d8:	d004      	beq.n	80058e4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	0018      	movs	r0, r3
 80058de:	f000 fabf 	bl	8005e60 <HAL_TIM_IC_CaptureCallback>
 80058e2:	e007      	b.n	80058f4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	0018      	movs	r0, r3
 80058e8:	f000 fab2 	bl	8005e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	0018      	movs	r0, r3
 80058f0:	f000 fabe 	bl	8005e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	2208      	movs	r2, #8
 8005902:	4013      	ands	r3, r2
 8005904:	2b08      	cmp	r3, #8
 8005906:	d124      	bne.n	8005952 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	2208      	movs	r2, #8
 8005910:	4013      	ands	r3, r2
 8005912:	2b08      	cmp	r3, #8
 8005914:	d11d      	bne.n	8005952 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2209      	movs	r2, #9
 800591c:	4252      	negs	r2, r2
 800591e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2204      	movs	r2, #4
 8005924:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	2203      	movs	r2, #3
 800592e:	4013      	ands	r3, r2
 8005930:	d004      	beq.n	800593c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	0018      	movs	r0, r3
 8005936:	f000 fa93 	bl	8005e60 <HAL_TIM_IC_CaptureCallback>
 800593a:	e007      	b.n	800594c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	0018      	movs	r0, r3
 8005940:	f000 fa86 	bl	8005e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	0018      	movs	r0, r3
 8005948:	f000 fa92 	bl	8005e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	2210      	movs	r2, #16
 800595a:	4013      	ands	r3, r2
 800595c:	2b10      	cmp	r3, #16
 800595e:	d125      	bne.n	80059ac <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	2210      	movs	r2, #16
 8005968:	4013      	ands	r3, r2
 800596a:	2b10      	cmp	r3, #16
 800596c:	d11e      	bne.n	80059ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2211      	movs	r2, #17
 8005974:	4252      	negs	r2, r2
 8005976:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2208      	movs	r2, #8
 800597c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	69da      	ldr	r2, [r3, #28]
 8005984:	23c0      	movs	r3, #192	; 0xc0
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4013      	ands	r3, r2
 800598a:	d004      	beq.n	8005996 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	0018      	movs	r0, r3
 8005990:	f000 fa66 	bl	8005e60 <HAL_TIM_IC_CaptureCallback>
 8005994:	e007      	b.n	80059a6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	0018      	movs	r0, r3
 800599a:	f000 fa59 	bl	8005e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	0018      	movs	r0, r3
 80059a2:	f000 fa65 	bl	8005e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	2201      	movs	r2, #1
 80059b4:	4013      	ands	r3, r2
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d10f      	bne.n	80059da <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	2201      	movs	r2, #1
 80059c2:	4013      	ands	r3, r2
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d108      	bne.n	80059da <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2202      	movs	r2, #2
 80059ce:	4252      	negs	r2, r2
 80059d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	0018      	movs	r0, r3
 80059d6:	f7fa fc9d 	bl	8000314 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	2280      	movs	r2, #128	; 0x80
 80059e2:	4013      	ands	r3, r2
 80059e4:	2b80      	cmp	r3, #128	; 0x80
 80059e6:	d10f      	bne.n	8005a08 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	2280      	movs	r2, #128	; 0x80
 80059f0:	4013      	ands	r3, r2
 80059f2:	2b80      	cmp	r3, #128	; 0x80
 80059f4:	d108      	bne.n	8005a08 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2281      	movs	r2, #129	; 0x81
 80059fc:	4252      	negs	r2, r2
 80059fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	0018      	movs	r0, r3
 8005a04:	f000 ff54 	bl	80068b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	691a      	ldr	r2, [r3, #16]
 8005a0e:	2380      	movs	r3, #128	; 0x80
 8005a10:	005b      	lsls	r3, r3, #1
 8005a12:	401a      	ands	r2, r3
 8005a14:	2380      	movs	r3, #128	; 0x80
 8005a16:	005b      	lsls	r3, r3, #1
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d10e      	bne.n	8005a3a <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	2280      	movs	r2, #128	; 0x80
 8005a24:	4013      	ands	r3, r2
 8005a26:	2b80      	cmp	r3, #128	; 0x80
 8005a28:	d107      	bne.n	8005a3a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a1c      	ldr	r2, [pc, #112]	; (8005aa0 <HAL_TIM_IRQHandler+0x260>)
 8005a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	0018      	movs	r0, r3
 8005a36:	f000 ff43 	bl	80068c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	2240      	movs	r2, #64	; 0x40
 8005a42:	4013      	ands	r3, r2
 8005a44:	2b40      	cmp	r3, #64	; 0x40
 8005a46:	d10f      	bne.n	8005a68 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	2240      	movs	r2, #64	; 0x40
 8005a50:	4013      	ands	r3, r2
 8005a52:	2b40      	cmp	r3, #64	; 0x40
 8005a54:	d108      	bne.n	8005a68 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2241      	movs	r2, #65	; 0x41
 8005a5c:	4252      	negs	r2, r2
 8005a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	0018      	movs	r0, r3
 8005a64:	f000 fa0c 	bl	8005e80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	4013      	ands	r3, r2
 8005a72:	2b20      	cmp	r3, #32
 8005a74:	d10f      	bne.n	8005a96 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	4013      	ands	r3, r2
 8005a80:	2b20      	cmp	r3, #32
 8005a82:	d108      	bne.n	8005a96 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2221      	movs	r2, #33	; 0x21
 8005a8a:	4252      	negs	r2, r2
 8005a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	0018      	movs	r0, r3
 8005a92:	f000 ff05 	bl	80068a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a96:	46c0      	nop			; (mov r8, r8)
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	b002      	add	sp, #8
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	46c0      	nop			; (mov r8, r8)
 8005aa0:	fffffeff 	.word	0xfffffeff

08005aa4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ab0:	2317      	movs	r3, #23
 8005ab2:	18fb      	adds	r3, r7, r3
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	223c      	movs	r2, #60	; 0x3c
 8005abc:	5c9b      	ldrb	r3, [r3, r2]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d101      	bne.n	8005ac6 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	e0e5      	b.n	8005c92 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	223c      	movs	r2, #60	; 0x3c
 8005aca:	2101      	movs	r1, #1
 8005acc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b14      	cmp	r3, #20
 8005ad2:	d900      	bls.n	8005ad6 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005ad4:	e0d1      	b.n	8005c7a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	009a      	lsls	r2, r3, #2
 8005ada:	4b70      	ldr	r3, [pc, #448]	; (8005c9c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005adc:	18d3      	adds	r3, r2, r3
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	0011      	movs	r1, r2
 8005aea:	0018      	movs	r0, r3
 8005aec:	f000 fa46 	bl	8005f7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	699a      	ldr	r2, [r3, #24]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2108      	movs	r1, #8
 8005afc:	430a      	orrs	r2, r1
 8005afe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	699a      	ldr	r2, [r3, #24]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2104      	movs	r1, #4
 8005b0c:	438a      	bics	r2, r1
 8005b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6999      	ldr	r1, [r3, #24]
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	691a      	ldr	r2, [r3, #16]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	619a      	str	r2, [r3, #24]
      break;
 8005b22:	e0af      	b.n	8005c84 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	0011      	movs	r1, r2
 8005b2c:	0018      	movs	r0, r3
 8005b2e:	f000 faaf 	bl	8006090 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	699a      	ldr	r2, [r3, #24]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2180      	movs	r1, #128	; 0x80
 8005b3e:	0109      	lsls	r1, r1, #4
 8005b40:	430a      	orrs	r2, r1
 8005b42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	699a      	ldr	r2, [r3, #24]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4954      	ldr	r1, [pc, #336]	; (8005ca0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005b50:	400a      	ands	r2, r1
 8005b52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6999      	ldr	r1, [r3, #24]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	021a      	lsls	r2, r3, #8
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	430a      	orrs	r2, r1
 8005b66:	619a      	str	r2, [r3, #24]
      break;
 8005b68:	e08c      	b.n	8005c84 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	0011      	movs	r1, r2
 8005b72:	0018      	movs	r0, r3
 8005b74:	f000 fb10 	bl	8006198 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	69da      	ldr	r2, [r3, #28]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2108      	movs	r1, #8
 8005b84:	430a      	orrs	r2, r1
 8005b86:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	69da      	ldr	r2, [r3, #28]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2104      	movs	r1, #4
 8005b94:	438a      	bics	r2, r1
 8005b96:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	69d9      	ldr	r1, [r3, #28]
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	691a      	ldr	r2, [r3, #16]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	61da      	str	r2, [r3, #28]
      break;
 8005baa:	e06b      	b.n	8005c84 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	0011      	movs	r1, r2
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	f000 fb77 	bl	80062a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	69da      	ldr	r2, [r3, #28]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2180      	movs	r1, #128	; 0x80
 8005bc6:	0109      	lsls	r1, r1, #4
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	69da      	ldr	r2, [r3, #28]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4932      	ldr	r1, [pc, #200]	; (8005ca0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005bd8:	400a      	ands	r2, r1
 8005bda:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	69d9      	ldr	r1, [r3, #28]
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	021a      	lsls	r2, r3, #8
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	430a      	orrs	r2, r1
 8005bee:	61da      	str	r2, [r3, #28]
      break;
 8005bf0:	e048      	b.n	8005c84 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	0011      	movs	r1, r2
 8005bfa:	0018      	movs	r0, r3
 8005bfc:	f000 fbbe 	bl	800637c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2108      	movs	r1, #8
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2104      	movs	r1, #4
 8005c1c:	438a      	bics	r2, r1
 8005c1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	691a      	ldr	r2, [r3, #16]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c32:	e027      	b.n	8005c84 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	0011      	movs	r1, r2
 8005c3c:	0018      	movs	r0, r3
 8005c3e:	f000 fbfd 	bl	800643c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2180      	movs	r1, #128	; 0x80
 8005c4e:	0109      	lsls	r1, r1, #4
 8005c50:	430a      	orrs	r2, r1
 8005c52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4910      	ldr	r1, [pc, #64]	; (8005ca0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005c60:	400a      	ands	r2, r1
 8005c62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	021a      	lsls	r2, r3, #8
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	430a      	orrs	r2, r1
 8005c76:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c78:	e004      	b.n	8005c84 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005c7a:	2317      	movs	r3, #23
 8005c7c:	18fb      	adds	r3, r7, r3
 8005c7e:	2201      	movs	r2, #1
 8005c80:	701a      	strb	r2, [r3, #0]
      break;
 8005c82:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	223c      	movs	r2, #60	; 0x3c
 8005c88:	2100      	movs	r1, #0
 8005c8a:	5499      	strb	r1, [r3, r2]

  return status;
 8005c8c:	2317      	movs	r3, #23
 8005c8e:	18fb      	adds	r3, r7, r3
 8005c90:	781b      	ldrb	r3, [r3, #0]
}
 8005c92:	0018      	movs	r0, r3
 8005c94:	46bd      	mov	sp, r7
 8005c96:	b006      	add	sp, #24
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	46c0      	nop			; (mov r8, r8)
 8005c9c:	080069c0 	.word	0x080069c0
 8005ca0:	fffffbff 	.word	0xfffffbff

08005ca4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cae:	230f      	movs	r3, #15
 8005cb0:	18fb      	adds	r3, r7, r3
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	223c      	movs	r2, #60	; 0x3c
 8005cba:	5c9b      	ldrb	r3, [r3, r2]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d101      	bne.n	8005cc4 <HAL_TIM_ConfigClockSource+0x20>
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	e0bc      	b.n	8005e3e <HAL_TIM_ConfigClockSource+0x19a>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	223c      	movs	r2, #60	; 0x3c
 8005cc8:	2101      	movs	r1, #1
 8005cca:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	223d      	movs	r2, #61	; 0x3d
 8005cd0:	2102      	movs	r1, #2
 8005cd2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	4a5a      	ldr	r2, [pc, #360]	; (8005e48 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	4a59      	ldr	r2, [pc, #356]	; (8005e4c <HAL_TIM_ConfigClockSource+0x1a8>)
 8005ce8:	4013      	ands	r3, r2
 8005cea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2280      	movs	r2, #128	; 0x80
 8005cfa:	0192      	lsls	r2, r2, #6
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d040      	beq.n	8005d82 <HAL_TIM_ConfigClockSource+0xde>
 8005d00:	2280      	movs	r2, #128	; 0x80
 8005d02:	0192      	lsls	r2, r2, #6
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d900      	bls.n	8005d0a <HAL_TIM_ConfigClockSource+0x66>
 8005d08:	e088      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x178>
 8005d0a:	2280      	movs	r2, #128	; 0x80
 8005d0c:	0152      	lsls	r2, r2, #5
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d100      	bne.n	8005d14 <HAL_TIM_ConfigClockSource+0x70>
 8005d12:	e088      	b.n	8005e26 <HAL_TIM_ConfigClockSource+0x182>
 8005d14:	2280      	movs	r2, #128	; 0x80
 8005d16:	0152      	lsls	r2, r2, #5
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d900      	bls.n	8005d1e <HAL_TIM_ConfigClockSource+0x7a>
 8005d1c:	e07e      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x178>
 8005d1e:	2b70      	cmp	r3, #112	; 0x70
 8005d20:	d018      	beq.n	8005d54 <HAL_TIM_ConfigClockSource+0xb0>
 8005d22:	d900      	bls.n	8005d26 <HAL_TIM_ConfigClockSource+0x82>
 8005d24:	e07a      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x178>
 8005d26:	2b60      	cmp	r3, #96	; 0x60
 8005d28:	d04f      	beq.n	8005dca <HAL_TIM_ConfigClockSource+0x126>
 8005d2a:	d900      	bls.n	8005d2e <HAL_TIM_ConfigClockSource+0x8a>
 8005d2c:	e076      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x178>
 8005d2e:	2b50      	cmp	r3, #80	; 0x50
 8005d30:	d03b      	beq.n	8005daa <HAL_TIM_ConfigClockSource+0x106>
 8005d32:	d900      	bls.n	8005d36 <HAL_TIM_ConfigClockSource+0x92>
 8005d34:	e072      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x178>
 8005d36:	2b40      	cmp	r3, #64	; 0x40
 8005d38:	d057      	beq.n	8005dea <HAL_TIM_ConfigClockSource+0x146>
 8005d3a:	d900      	bls.n	8005d3e <HAL_TIM_ConfigClockSource+0x9a>
 8005d3c:	e06e      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x178>
 8005d3e:	2b30      	cmp	r3, #48	; 0x30
 8005d40:	d063      	beq.n	8005e0a <HAL_TIM_ConfigClockSource+0x166>
 8005d42:	d86b      	bhi.n	8005e1c <HAL_TIM_ConfigClockSource+0x178>
 8005d44:	2b20      	cmp	r3, #32
 8005d46:	d060      	beq.n	8005e0a <HAL_TIM_ConfigClockSource+0x166>
 8005d48:	d868      	bhi.n	8005e1c <HAL_TIM_ConfigClockSource+0x178>
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d05d      	beq.n	8005e0a <HAL_TIM_ConfigClockSource+0x166>
 8005d4e:	2b10      	cmp	r3, #16
 8005d50:	d05b      	beq.n	8005e0a <HAL_TIM_ConfigClockSource+0x166>
 8005d52:	e063      	b.n	8005e1c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d64:	f000 fc4a 	bl	80065fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2277      	movs	r2, #119	; 0x77
 8005d74:	4313      	orrs	r3, r2
 8005d76:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	609a      	str	r2, [r3, #8]
      break;
 8005d80:	e052      	b.n	8005e28 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d92:	f000 fc33 	bl	80065fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2180      	movs	r1, #128	; 0x80
 8005da2:	01c9      	lsls	r1, r1, #7
 8005da4:	430a      	orrs	r2, r1
 8005da6:	609a      	str	r2, [r3, #8]
      break;
 8005da8:	e03e      	b.n	8005e28 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005db6:	001a      	movs	r2, r3
 8005db8:	f000 fba4 	bl	8006504 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2150      	movs	r1, #80	; 0x50
 8005dc2:	0018      	movs	r0, r3
 8005dc4:	f000 fbfe 	bl	80065c4 <TIM_ITRx_SetConfig>
      break;
 8005dc8:	e02e      	b.n	8005e28 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dd6:	001a      	movs	r2, r3
 8005dd8:	f000 fbc2 	bl	8006560 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2160      	movs	r1, #96	; 0x60
 8005de2:	0018      	movs	r0, r3
 8005de4:	f000 fbee 	bl	80065c4 <TIM_ITRx_SetConfig>
      break;
 8005de8:	e01e      	b.n	8005e28 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005df6:	001a      	movs	r2, r3
 8005df8:	f000 fb84 	bl	8006504 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2140      	movs	r1, #64	; 0x40
 8005e02:	0018      	movs	r0, r3
 8005e04:	f000 fbde 	bl	80065c4 <TIM_ITRx_SetConfig>
      break;
 8005e08:	e00e      	b.n	8005e28 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	0019      	movs	r1, r3
 8005e14:	0010      	movs	r0, r2
 8005e16:	f000 fbd5 	bl	80065c4 <TIM_ITRx_SetConfig>
      break;
 8005e1a:	e005      	b.n	8005e28 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005e1c:	230f      	movs	r3, #15
 8005e1e:	18fb      	adds	r3, r7, r3
 8005e20:	2201      	movs	r2, #1
 8005e22:	701a      	strb	r2, [r3, #0]
      break;
 8005e24:	e000      	b.n	8005e28 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005e26:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	223d      	movs	r2, #61	; 0x3d
 8005e2c:	2101      	movs	r1, #1
 8005e2e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	223c      	movs	r2, #60	; 0x3c
 8005e34:	2100      	movs	r1, #0
 8005e36:	5499      	strb	r1, [r3, r2]

  return status;
 8005e38:	230f      	movs	r3, #15
 8005e3a:	18fb      	adds	r3, r7, r3
 8005e3c:	781b      	ldrb	r3, [r3, #0]
}
 8005e3e:	0018      	movs	r0, r3
 8005e40:	46bd      	mov	sp, r7
 8005e42:	b004      	add	sp, #16
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	46c0      	nop			; (mov r8, r8)
 8005e48:	ffceff88 	.word	0xffceff88
 8005e4c:	ffff00ff 	.word	0xffff00ff

08005e50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e58:	46c0      	nop			; (mov r8, r8)
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	b002      	add	sp, #8
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e68:	46c0      	nop			; (mov r8, r8)
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	b002      	add	sp, #8
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e78:	46c0      	nop			; (mov r8, r8)
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	b002      	add	sp, #8
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e88:	46c0      	nop			; (mov r8, r8)
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	b002      	add	sp, #8
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a2f      	ldr	r2, [pc, #188]	; (8005f60 <TIM_Base_SetConfig+0xd0>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d003      	beq.n	8005eb0 <TIM_Base_SetConfig+0x20>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a2e      	ldr	r2, [pc, #184]	; (8005f64 <TIM_Base_SetConfig+0xd4>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d108      	bne.n	8005ec2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2270      	movs	r2, #112	; 0x70
 8005eb4:	4393      	bics	r3, r2
 8005eb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a26      	ldr	r2, [pc, #152]	; (8005f60 <TIM_Base_SetConfig+0xd0>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d013      	beq.n	8005ef2 <TIM_Base_SetConfig+0x62>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a25      	ldr	r2, [pc, #148]	; (8005f64 <TIM_Base_SetConfig+0xd4>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d00f      	beq.n	8005ef2 <TIM_Base_SetConfig+0x62>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a24      	ldr	r2, [pc, #144]	; (8005f68 <TIM_Base_SetConfig+0xd8>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d00b      	beq.n	8005ef2 <TIM_Base_SetConfig+0x62>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a23      	ldr	r2, [pc, #140]	; (8005f6c <TIM_Base_SetConfig+0xdc>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d007      	beq.n	8005ef2 <TIM_Base_SetConfig+0x62>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a22      	ldr	r2, [pc, #136]	; (8005f70 <TIM_Base_SetConfig+0xe0>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d003      	beq.n	8005ef2 <TIM_Base_SetConfig+0x62>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a21      	ldr	r2, [pc, #132]	; (8005f74 <TIM_Base_SetConfig+0xe4>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d108      	bne.n	8005f04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	4a20      	ldr	r2, [pc, #128]	; (8005f78 <TIM_Base_SetConfig+0xe8>)
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2280      	movs	r2, #128	; 0x80
 8005f08:	4393      	bics	r3, r2
 8005f0a:	001a      	movs	r2, r3
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	689a      	ldr	r2, [r3, #8]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a0c      	ldr	r2, [pc, #48]	; (8005f60 <TIM_Base_SetConfig+0xd0>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d00b      	beq.n	8005f4a <TIM_Base_SetConfig+0xba>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a0d      	ldr	r2, [pc, #52]	; (8005f6c <TIM_Base_SetConfig+0xdc>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d007      	beq.n	8005f4a <TIM_Base_SetConfig+0xba>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a0c      	ldr	r2, [pc, #48]	; (8005f70 <TIM_Base_SetConfig+0xe0>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d003      	beq.n	8005f4a <TIM_Base_SetConfig+0xba>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a0b      	ldr	r2, [pc, #44]	; (8005f74 <TIM_Base_SetConfig+0xe4>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d103      	bne.n	8005f52 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	691a      	ldr	r2, [r3, #16]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	615a      	str	r2, [r3, #20]
}
 8005f58:	46c0      	nop			; (mov r8, r8)
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	b004      	add	sp, #16
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	40012c00 	.word	0x40012c00
 8005f64:	40000400 	.word	0x40000400
 8005f68:	40002000 	.word	0x40002000
 8005f6c:	40014000 	.word	0x40014000
 8005f70:	40014400 	.word	0x40014400
 8005f74:	40014800 	.word	0x40014800
 8005f78:	fffffcff 	.word	0xfffffcff

08005f7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	4393      	bics	r3, r2
 8005f8e:	001a      	movs	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a1b      	ldr	r3, [r3, #32]
 8005f98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	4a32      	ldr	r2, [pc, #200]	; (8006074 <TIM_OC1_SetConfig+0xf8>)
 8005faa:	4013      	ands	r3, r2
 8005fac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2203      	movs	r2, #3
 8005fb2:	4393      	bics	r3, r2
 8005fb4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	4393      	bics	r3, r2
 8005fc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a28      	ldr	r2, [pc, #160]	; (8006078 <TIM_OC1_SetConfig+0xfc>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d00b      	beq.n	8005ff2 <TIM_OC1_SetConfig+0x76>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a27      	ldr	r2, [pc, #156]	; (800607c <TIM_OC1_SetConfig+0x100>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d007      	beq.n	8005ff2 <TIM_OC1_SetConfig+0x76>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a26      	ldr	r2, [pc, #152]	; (8006080 <TIM_OC1_SetConfig+0x104>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d003      	beq.n	8005ff2 <TIM_OC1_SetConfig+0x76>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a25      	ldr	r2, [pc, #148]	; (8006084 <TIM_OC1_SetConfig+0x108>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d10c      	bne.n	800600c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	2208      	movs	r2, #8
 8005ff6:	4393      	bics	r3, r2
 8005ff8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	4313      	orrs	r3, r2
 8006002:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	2204      	movs	r2, #4
 8006008:	4393      	bics	r3, r2
 800600a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a1a      	ldr	r2, [pc, #104]	; (8006078 <TIM_OC1_SetConfig+0xfc>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d00b      	beq.n	800602c <TIM_OC1_SetConfig+0xb0>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a19      	ldr	r2, [pc, #100]	; (800607c <TIM_OC1_SetConfig+0x100>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d007      	beq.n	800602c <TIM_OC1_SetConfig+0xb0>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a18      	ldr	r2, [pc, #96]	; (8006080 <TIM_OC1_SetConfig+0x104>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d003      	beq.n	800602c <TIM_OC1_SetConfig+0xb0>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a17      	ldr	r2, [pc, #92]	; (8006084 <TIM_OC1_SetConfig+0x108>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d111      	bne.n	8006050 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	4a16      	ldr	r2, [pc, #88]	; (8006088 <TIM_OC1_SetConfig+0x10c>)
 8006030:	4013      	ands	r3, r2
 8006032:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	4a15      	ldr	r2, [pc, #84]	; (800608c <TIM_OC1_SetConfig+0x110>)
 8006038:	4013      	ands	r3, r2
 800603a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	4313      	orrs	r3, r2
 8006044:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	4313      	orrs	r3, r2
 800604e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	685a      	ldr	r2, [r3, #4]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	621a      	str	r2, [r3, #32]
}
 800606a:	46c0      	nop			; (mov r8, r8)
 800606c:	46bd      	mov	sp, r7
 800606e:	b006      	add	sp, #24
 8006070:	bd80      	pop	{r7, pc}
 8006072:	46c0      	nop			; (mov r8, r8)
 8006074:	fffeff8f 	.word	0xfffeff8f
 8006078:	40012c00 	.word	0x40012c00
 800607c:	40014000 	.word	0x40014000
 8006080:	40014400 	.word	0x40014400
 8006084:	40014800 	.word	0x40014800
 8006088:	fffffeff 	.word	0xfffffeff
 800608c:	fffffdff 	.word	0xfffffdff

08006090 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	2210      	movs	r2, #16
 80060a0:	4393      	bics	r3, r2
 80060a2:	001a      	movs	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	699b      	ldr	r3, [r3, #24]
 80060b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	4a2e      	ldr	r2, [pc, #184]	; (8006178 <TIM_OC2_SetConfig+0xe8>)
 80060be:	4013      	ands	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	4a2d      	ldr	r2, [pc, #180]	; (800617c <TIM_OC2_SetConfig+0xec>)
 80060c6:	4013      	ands	r3, r2
 80060c8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	021b      	lsls	r3, r3, #8
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	2220      	movs	r2, #32
 80060da:	4393      	bics	r3, r2
 80060dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	011b      	lsls	r3, r3, #4
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a24      	ldr	r2, [pc, #144]	; (8006180 <TIM_OC2_SetConfig+0xf0>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d10d      	bne.n	800610e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2280      	movs	r2, #128	; 0x80
 80060f6:	4393      	bics	r3, r2
 80060f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	011b      	lsls	r3, r3, #4
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	4313      	orrs	r3, r2
 8006104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	2240      	movs	r2, #64	; 0x40
 800610a:	4393      	bics	r3, r2
 800610c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a1b      	ldr	r2, [pc, #108]	; (8006180 <TIM_OC2_SetConfig+0xf0>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d00b      	beq.n	800612e <TIM_OC2_SetConfig+0x9e>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a1a      	ldr	r2, [pc, #104]	; (8006184 <TIM_OC2_SetConfig+0xf4>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d007      	beq.n	800612e <TIM_OC2_SetConfig+0x9e>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a19      	ldr	r2, [pc, #100]	; (8006188 <TIM_OC2_SetConfig+0xf8>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d003      	beq.n	800612e <TIM_OC2_SetConfig+0x9e>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a18      	ldr	r2, [pc, #96]	; (800618c <TIM_OC2_SetConfig+0xfc>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d113      	bne.n	8006156 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	4a17      	ldr	r2, [pc, #92]	; (8006190 <TIM_OC2_SetConfig+0x100>)
 8006132:	4013      	ands	r3, r2
 8006134:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	4a16      	ldr	r2, [pc, #88]	; (8006194 <TIM_OC2_SetConfig+0x104>)
 800613a:	4013      	ands	r3, r2
 800613c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	4313      	orrs	r3, r2
 8006148:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	4313      	orrs	r3, r2
 8006154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	621a      	str	r2, [r3, #32]
}
 8006170:	46c0      	nop			; (mov r8, r8)
 8006172:	46bd      	mov	sp, r7
 8006174:	b006      	add	sp, #24
 8006176:	bd80      	pop	{r7, pc}
 8006178:	feff8fff 	.word	0xfeff8fff
 800617c:	fffffcff 	.word	0xfffffcff
 8006180:	40012c00 	.word	0x40012c00
 8006184:	40014000 	.word	0x40014000
 8006188:	40014400 	.word	0x40014400
 800618c:	40014800 	.word	0x40014800
 8006190:	fffffbff 	.word	0xfffffbff
 8006194:	fffff7ff 	.word	0xfffff7ff

08006198 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b086      	sub	sp, #24
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	4a35      	ldr	r2, [pc, #212]	; (800627c <TIM_OC3_SetConfig+0xe4>)
 80061a8:	401a      	ands	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	4a2f      	ldr	r2, [pc, #188]	; (8006280 <TIM_OC3_SetConfig+0xe8>)
 80061c4:	4013      	ands	r3, r2
 80061c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2203      	movs	r2, #3
 80061cc:	4393      	bics	r3, r2
 80061ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	4a29      	ldr	r2, [pc, #164]	; (8006284 <TIM_OC3_SetConfig+0xec>)
 80061de:	4013      	ands	r3, r2
 80061e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	021b      	lsls	r3, r3, #8
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a25      	ldr	r2, [pc, #148]	; (8006288 <TIM_OC3_SetConfig+0xf0>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d10d      	bne.n	8006212 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	4a24      	ldr	r2, [pc, #144]	; (800628c <TIM_OC3_SetConfig+0xf4>)
 80061fa:	4013      	ands	r3, r2
 80061fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	021b      	lsls	r3, r3, #8
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	4313      	orrs	r3, r2
 8006208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	4a20      	ldr	r2, [pc, #128]	; (8006290 <TIM_OC3_SetConfig+0xf8>)
 800620e:	4013      	ands	r3, r2
 8006210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a1c      	ldr	r2, [pc, #112]	; (8006288 <TIM_OC3_SetConfig+0xf0>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d00b      	beq.n	8006232 <TIM_OC3_SetConfig+0x9a>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a1d      	ldr	r2, [pc, #116]	; (8006294 <TIM_OC3_SetConfig+0xfc>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d007      	beq.n	8006232 <TIM_OC3_SetConfig+0x9a>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a1c      	ldr	r2, [pc, #112]	; (8006298 <TIM_OC3_SetConfig+0x100>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d003      	beq.n	8006232 <TIM_OC3_SetConfig+0x9a>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a1b      	ldr	r2, [pc, #108]	; (800629c <TIM_OC3_SetConfig+0x104>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d113      	bne.n	800625a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	4a1a      	ldr	r2, [pc, #104]	; (80062a0 <TIM_OC3_SetConfig+0x108>)
 8006236:	4013      	ands	r3, r2
 8006238:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	4a19      	ldr	r2, [pc, #100]	; (80062a4 <TIM_OC3_SetConfig+0x10c>)
 800623e:	4013      	ands	r3, r2
 8006240:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	011b      	lsls	r3, r3, #4
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	4313      	orrs	r3, r2
 800624c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	011b      	lsls	r3, r3, #4
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	4313      	orrs	r3, r2
 8006258:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	621a      	str	r2, [r3, #32]
}
 8006274:	46c0      	nop			; (mov r8, r8)
 8006276:	46bd      	mov	sp, r7
 8006278:	b006      	add	sp, #24
 800627a:	bd80      	pop	{r7, pc}
 800627c:	fffffeff 	.word	0xfffffeff
 8006280:	fffeff8f 	.word	0xfffeff8f
 8006284:	fffffdff 	.word	0xfffffdff
 8006288:	40012c00 	.word	0x40012c00
 800628c:	fffff7ff 	.word	0xfffff7ff
 8006290:	fffffbff 	.word	0xfffffbff
 8006294:	40014000 	.word	0x40014000
 8006298:	40014400 	.word	0x40014400
 800629c:	40014800 	.word	0x40014800
 80062a0:	ffffefff 	.word	0xffffefff
 80062a4:	ffffdfff 	.word	0xffffdfff

080062a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	4a28      	ldr	r2, [pc, #160]	; (8006358 <TIM_OC4_SetConfig+0xb0>)
 80062b8:	401a      	ands	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	4a22      	ldr	r2, [pc, #136]	; (800635c <TIM_OC4_SetConfig+0xb4>)
 80062d4:	4013      	ands	r3, r2
 80062d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	4a21      	ldr	r2, [pc, #132]	; (8006360 <TIM_OC4_SetConfig+0xb8>)
 80062dc:	4013      	ands	r3, r2
 80062de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	021b      	lsls	r3, r3, #8
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	4a1d      	ldr	r2, [pc, #116]	; (8006364 <TIM_OC4_SetConfig+0xbc>)
 80062f0:	4013      	ands	r3, r2
 80062f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	031b      	lsls	r3, r3, #12
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a19      	ldr	r2, [pc, #100]	; (8006368 <TIM_OC4_SetConfig+0xc0>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d00b      	beq.n	8006320 <TIM_OC4_SetConfig+0x78>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a18      	ldr	r2, [pc, #96]	; (800636c <TIM_OC4_SetConfig+0xc4>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d007      	beq.n	8006320 <TIM_OC4_SetConfig+0x78>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a17      	ldr	r2, [pc, #92]	; (8006370 <TIM_OC4_SetConfig+0xc8>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d003      	beq.n	8006320 <TIM_OC4_SetConfig+0x78>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a16      	ldr	r2, [pc, #88]	; (8006374 <TIM_OC4_SetConfig+0xcc>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d109      	bne.n	8006334 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	4a15      	ldr	r2, [pc, #84]	; (8006378 <TIM_OC4_SetConfig+0xd0>)
 8006324:	4013      	ands	r3, r2
 8006326:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	019b      	lsls	r3, r3, #6
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	4313      	orrs	r3, r2
 8006332:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	685a      	ldr	r2, [r3, #4]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	621a      	str	r2, [r3, #32]
}
 800634e:	46c0      	nop			; (mov r8, r8)
 8006350:	46bd      	mov	sp, r7
 8006352:	b006      	add	sp, #24
 8006354:	bd80      	pop	{r7, pc}
 8006356:	46c0      	nop			; (mov r8, r8)
 8006358:	ffffefff 	.word	0xffffefff
 800635c:	feff8fff 	.word	0xfeff8fff
 8006360:	fffffcff 	.word	0xfffffcff
 8006364:	ffffdfff 	.word	0xffffdfff
 8006368:	40012c00 	.word	0x40012c00
 800636c:	40014000 	.word	0x40014000
 8006370:	40014400 	.word	0x40014400
 8006374:	40014800 	.word	0x40014800
 8006378:	ffffbfff 	.word	0xffffbfff

0800637c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	4a25      	ldr	r2, [pc, #148]	; (8006420 <TIM_OC5_SetConfig+0xa4>)
 800638c:	401a      	ands	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	4a1f      	ldr	r2, [pc, #124]	; (8006424 <TIM_OC5_SetConfig+0xa8>)
 80063a8:	4013      	ands	r3, r2
 80063aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	4a1b      	ldr	r2, [pc, #108]	; (8006428 <TIM_OC5_SetConfig+0xac>)
 80063ba:	4013      	ands	r3, r2
 80063bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	041b      	lsls	r3, r3, #16
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a17      	ldr	r2, [pc, #92]	; (800642c <TIM_OC5_SetConfig+0xb0>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d00b      	beq.n	80063ea <TIM_OC5_SetConfig+0x6e>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a16      	ldr	r2, [pc, #88]	; (8006430 <TIM_OC5_SetConfig+0xb4>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d007      	beq.n	80063ea <TIM_OC5_SetConfig+0x6e>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a15      	ldr	r2, [pc, #84]	; (8006434 <TIM_OC5_SetConfig+0xb8>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d003      	beq.n	80063ea <TIM_OC5_SetConfig+0x6e>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a14      	ldr	r2, [pc, #80]	; (8006438 <TIM_OC5_SetConfig+0xbc>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d109      	bne.n	80063fe <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	4a0c      	ldr	r2, [pc, #48]	; (8006420 <TIM_OC5_SetConfig+0xa4>)
 80063ee:	4013      	ands	r3, r2
 80063f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	021b      	lsls	r3, r3, #8
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	685a      	ldr	r2, [r3, #4]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	621a      	str	r2, [r3, #32]
}
 8006418:	46c0      	nop			; (mov r8, r8)
 800641a:	46bd      	mov	sp, r7
 800641c:	b006      	add	sp, #24
 800641e:	bd80      	pop	{r7, pc}
 8006420:	fffeffff 	.word	0xfffeffff
 8006424:	fffeff8f 	.word	0xfffeff8f
 8006428:	fffdffff 	.word	0xfffdffff
 800642c:	40012c00 	.word	0x40012c00
 8006430:	40014000 	.word	0x40014000
 8006434:	40014400 	.word	0x40014400
 8006438:	40014800 	.word	0x40014800

0800643c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b086      	sub	sp, #24
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	4a26      	ldr	r2, [pc, #152]	; (80064e4 <TIM_OC6_SetConfig+0xa8>)
 800644c:	401a      	ands	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	4a20      	ldr	r2, [pc, #128]	; (80064e8 <TIM_OC6_SetConfig+0xac>)
 8006468:	4013      	ands	r3, r2
 800646a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	021b      	lsls	r3, r3, #8
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	4313      	orrs	r3, r2
 8006476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	4a1c      	ldr	r2, [pc, #112]	; (80064ec <TIM_OC6_SetConfig+0xb0>)
 800647c:	4013      	ands	r3, r2
 800647e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	051b      	lsls	r3, r3, #20
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	4313      	orrs	r3, r2
 800648a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a18      	ldr	r2, [pc, #96]	; (80064f0 <TIM_OC6_SetConfig+0xb4>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d00b      	beq.n	80064ac <TIM_OC6_SetConfig+0x70>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a17      	ldr	r2, [pc, #92]	; (80064f4 <TIM_OC6_SetConfig+0xb8>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d007      	beq.n	80064ac <TIM_OC6_SetConfig+0x70>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a16      	ldr	r2, [pc, #88]	; (80064f8 <TIM_OC6_SetConfig+0xbc>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d003      	beq.n	80064ac <TIM_OC6_SetConfig+0x70>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a15      	ldr	r2, [pc, #84]	; (80064fc <TIM_OC6_SetConfig+0xc0>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d109      	bne.n	80064c0 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	4a14      	ldr	r2, [pc, #80]	; (8006500 <TIM_OC6_SetConfig+0xc4>)
 80064b0:	4013      	ands	r3, r2
 80064b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	029b      	lsls	r3, r3, #10
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	4313      	orrs	r3, r2
 80064be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	685a      	ldr	r2, [r3, #4]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	621a      	str	r2, [r3, #32]
}
 80064da:	46c0      	nop			; (mov r8, r8)
 80064dc:	46bd      	mov	sp, r7
 80064de:	b006      	add	sp, #24
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	46c0      	nop			; (mov r8, r8)
 80064e4:	ffefffff 	.word	0xffefffff
 80064e8:	feff8fff 	.word	0xfeff8fff
 80064ec:	ffdfffff 	.word	0xffdfffff
 80064f0:	40012c00 	.word	0x40012c00
 80064f4:	40014000 	.word	0x40014000
 80064f8:	40014400 	.word	0x40014400
 80064fc:	40014800 	.word	0x40014800
 8006500:	fffbffff 	.word	0xfffbffff

08006504 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6a1b      	ldr	r3, [r3, #32]
 8006514:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	2201      	movs	r2, #1
 800651c:	4393      	bics	r3, r2
 800651e:	001a      	movs	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	22f0      	movs	r2, #240	; 0xf0
 800652e:	4393      	bics	r3, r2
 8006530:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	011b      	lsls	r3, r3, #4
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	4313      	orrs	r3, r2
 800653a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	220a      	movs	r2, #10
 8006540:	4393      	bics	r3, r2
 8006542:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	4313      	orrs	r3, r2
 800654a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	621a      	str	r2, [r3, #32]
}
 8006558:	46c0      	nop			; (mov r8, r8)
 800655a:	46bd      	mov	sp, r7
 800655c:	b006      	add	sp, #24
 800655e:	bd80      	pop	{r7, pc}

08006560 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6a1b      	ldr	r3, [r3, #32]
 8006570:	2210      	movs	r2, #16
 8006572:	4393      	bics	r3, r2
 8006574:	001a      	movs	r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6a1b      	ldr	r3, [r3, #32]
 8006584:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	4a0d      	ldr	r2, [pc, #52]	; (80065c0 <TIM_TI2_ConfigInputStage+0x60>)
 800658a:	4013      	ands	r3, r2
 800658c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	031b      	lsls	r3, r3, #12
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	4313      	orrs	r3, r2
 8006596:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	22a0      	movs	r2, #160	; 0xa0
 800659c:	4393      	bics	r3, r2
 800659e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	011b      	lsls	r3, r3, #4
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	621a      	str	r2, [r3, #32]
}
 80065b6:	46c0      	nop			; (mov r8, r8)
 80065b8:	46bd      	mov	sp, r7
 80065ba:	b006      	add	sp, #24
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	46c0      	nop			; (mov r8, r8)
 80065c0:	ffff0fff 	.word	0xffff0fff

080065c4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4a08      	ldr	r2, [pc, #32]	; (80065f8 <TIM_ITRx_SetConfig+0x34>)
 80065d8:	4013      	ands	r3, r2
 80065da:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065dc:	683a      	ldr	r2, [r7, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	2207      	movs	r2, #7
 80065e4:	4313      	orrs	r3, r2
 80065e6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	609a      	str	r2, [r3, #8]
}
 80065ee:	46c0      	nop			; (mov r8, r8)
 80065f0:	46bd      	mov	sp, r7
 80065f2:	b004      	add	sp, #16
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	46c0      	nop			; (mov r8, r8)
 80065f8:	ffcfff8f 	.word	0xffcfff8f

080065fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
 8006608:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	4a09      	ldr	r2, [pc, #36]	; (8006638 <TIM_ETR_SetConfig+0x3c>)
 8006614:	4013      	ands	r3, r2
 8006616:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	021a      	lsls	r2, r3, #8
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	431a      	orrs	r2, r3
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	4313      	orrs	r3, r2
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	4313      	orrs	r3, r2
 8006628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	697a      	ldr	r2, [r7, #20]
 800662e:	609a      	str	r2, [r3, #8]
}
 8006630:	46c0      	nop			; (mov r8, r8)
 8006632:	46bd      	mov	sp, r7
 8006634:	b006      	add	sp, #24
 8006636:	bd80      	pop	{r7, pc}
 8006638:	ffff00ff 	.word	0xffff00ff

0800663c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b086      	sub	sp, #24
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	221f      	movs	r2, #31
 800664c:	4013      	ands	r3, r2
 800664e:	2201      	movs	r2, #1
 8006650:	409a      	lsls	r2, r3
 8006652:	0013      	movs	r3, r2
 8006654:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	43d2      	mvns	r2, r2
 800665e:	401a      	ands	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6a1a      	ldr	r2, [r3, #32]
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	211f      	movs	r1, #31
 800666c:	400b      	ands	r3, r1
 800666e:	6879      	ldr	r1, [r7, #4]
 8006670:	4099      	lsls	r1, r3
 8006672:	000b      	movs	r3, r1
 8006674:	431a      	orrs	r2, r3
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	621a      	str	r2, [r3, #32]
}
 800667a:	46c0      	nop			; (mov r8, r8)
 800667c:	46bd      	mov	sp, r7
 800667e:	b006      	add	sp, #24
 8006680:	bd80      	pop	{r7, pc}
	...

08006684 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	223c      	movs	r2, #60	; 0x3c
 8006692:	5c9b      	ldrb	r3, [r3, r2]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d101      	bne.n	800669c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006698:	2302      	movs	r3, #2
 800669a:	e04f      	b.n	800673c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	223c      	movs	r2, #60	; 0x3c
 80066a0:	2101      	movs	r1, #1
 80066a2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	223d      	movs	r2, #61	; 0x3d
 80066a8:	2102      	movs	r1, #2
 80066aa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a20      	ldr	r2, [pc, #128]	; (8006744 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d108      	bne.n	80066d8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	4a1f      	ldr	r2, [pc, #124]	; (8006748 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80066ca:	4013      	ands	r3, r2
 80066cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2270      	movs	r2, #112	; 0x70
 80066dc:	4393      	bics	r3, r2
 80066de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a13      	ldr	r2, [pc, #76]	; (8006744 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d009      	beq.n	8006710 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a12      	ldr	r2, [pc, #72]	; (800674c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d004      	beq.n	8006710 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a11      	ldr	r2, [pc, #68]	; (8006750 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d10c      	bne.n	800672a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	2280      	movs	r2, #128	; 0x80
 8006714:	4393      	bics	r3, r2
 8006716:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	4313      	orrs	r3, r2
 8006720:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	223d      	movs	r2, #61	; 0x3d
 800672e:	2101      	movs	r1, #1
 8006730:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	223c      	movs	r2, #60	; 0x3c
 8006736:	2100      	movs	r1, #0
 8006738:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	0018      	movs	r0, r3
 800673e:	46bd      	mov	sp, r7
 8006740:	b004      	add	sp, #16
 8006742:	bd80      	pop	{r7, pc}
 8006744:	40012c00 	.word	0x40012c00
 8006748:	ff0fffff 	.word	0xff0fffff
 800674c:	40000400 	.word	0x40000400
 8006750:	40014000 	.word	0x40014000

08006754 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800675e:	2300      	movs	r3, #0
 8006760:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	223c      	movs	r2, #60	; 0x3c
 8006766:	5c9b      	ldrb	r3, [r3, r2]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d101      	bne.n	8006770 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800676c:	2302      	movs	r3, #2
 800676e:	e079      	b.n	8006864 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	223c      	movs	r2, #60	; 0x3c
 8006774:	2101      	movs	r1, #1
 8006776:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	22ff      	movs	r2, #255	; 0xff
 800677c:	4393      	bics	r3, r2
 800677e:	001a      	movs	r2, r3
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	4313      	orrs	r3, r2
 8006786:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	4a38      	ldr	r2, [pc, #224]	; (800686c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800678c:	401a      	ands	r2, r3
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	4313      	orrs	r3, r2
 8006794:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	4a35      	ldr	r2, [pc, #212]	; (8006870 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800679a:	401a      	ands	r2, r3
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4a33      	ldr	r2, [pc, #204]	; (8006874 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80067a8:	401a      	ands	r2, r3
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	4a30      	ldr	r2, [pc, #192]	; (8006878 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80067b6:	401a      	ands	r2, r3
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	4313      	orrs	r3, r2
 80067be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	4a2e      	ldr	r2, [pc, #184]	; (800687c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80067c4:	401a      	ands	r2, r3
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	4a2b      	ldr	r2, [pc, #172]	; (8006880 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80067d2:	401a      	ands	r2, r3
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d8:	4313      	orrs	r3, r2
 80067da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4a29      	ldr	r2, [pc, #164]	; (8006884 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80067e0:	401a      	ands	r2, r3
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	041b      	lsls	r3, r3, #16
 80067e8:	4313      	orrs	r3, r2
 80067ea:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a25      	ldr	r2, [pc, #148]	; (8006888 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d106      	bne.n	8006804 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	4a24      	ldr	r2, [pc, #144]	; (800688c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80067fa:	401a      	ands	r2, r3
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	69db      	ldr	r3, [r3, #28]
 8006800:	4313      	orrs	r3, r2
 8006802:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a1f      	ldr	r2, [pc, #124]	; (8006888 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d121      	bne.n	8006852 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	4a1f      	ldr	r2, [pc, #124]	; (8006890 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006812:	401a      	ands	r2, r3
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006818:	051b      	lsls	r3, r3, #20
 800681a:	4313      	orrs	r3, r2
 800681c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	4a1c      	ldr	r2, [pc, #112]	; (8006894 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8006822:	401a      	ands	r2, r3
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	4313      	orrs	r3, r2
 800682a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	4a1a      	ldr	r2, [pc, #104]	; (8006898 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8006830:	401a      	ands	r2, r3
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006836:	4313      	orrs	r3, r2
 8006838:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a12      	ldr	r2, [pc, #72]	; (8006888 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d106      	bne.n	8006852 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4a15      	ldr	r2, [pc, #84]	; (800689c <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8006848:	401a      	ands	r2, r3
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684e:	4313      	orrs	r3, r2
 8006850:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	223c      	movs	r2, #60	; 0x3c
 800685e:	2100      	movs	r1, #0
 8006860:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	0018      	movs	r0, r3
 8006866:	46bd      	mov	sp, r7
 8006868:	b004      	add	sp, #16
 800686a:	bd80      	pop	{r7, pc}
 800686c:	fffffcff 	.word	0xfffffcff
 8006870:	fffffbff 	.word	0xfffffbff
 8006874:	fffff7ff 	.word	0xfffff7ff
 8006878:	ffffefff 	.word	0xffffefff
 800687c:	ffffdfff 	.word	0xffffdfff
 8006880:	ffffbfff 	.word	0xffffbfff
 8006884:	fff0ffff 	.word	0xfff0ffff
 8006888:	40012c00 	.word	0x40012c00
 800688c:	efffffff 	.word	0xefffffff
 8006890:	ff0fffff 	.word	0xff0fffff
 8006894:	feffffff 	.word	0xfeffffff
 8006898:	fdffffff 	.word	0xfdffffff
 800689c:	dfffffff 	.word	0xdfffffff

080068a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068a8:	46c0      	nop			; (mov r8, r8)
 80068aa:	46bd      	mov	sp, r7
 80068ac:	b002      	add	sp, #8
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068b8:	46c0      	nop			; (mov r8, r8)
 80068ba:	46bd      	mov	sp, r7
 80068bc:	b002      	add	sp, #8
 80068be:	bd80      	pop	{r7, pc}

080068c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80068c8:	46c0      	nop			; (mov r8, r8)
 80068ca:	46bd      	mov	sp, r7
 80068cc:	b002      	add	sp, #8
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <memset>:
 80068d0:	0003      	movs	r3, r0
 80068d2:	1882      	adds	r2, r0, r2
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d100      	bne.n	80068da <memset+0xa>
 80068d8:	4770      	bx	lr
 80068da:	7019      	strb	r1, [r3, #0]
 80068dc:	3301      	adds	r3, #1
 80068de:	e7f9      	b.n	80068d4 <memset+0x4>

080068e0 <__libc_init_array>:
 80068e0:	b570      	push	{r4, r5, r6, lr}
 80068e2:	2600      	movs	r6, #0
 80068e4:	4c0c      	ldr	r4, [pc, #48]	; (8006918 <__libc_init_array+0x38>)
 80068e6:	4d0d      	ldr	r5, [pc, #52]	; (800691c <__libc_init_array+0x3c>)
 80068e8:	1b64      	subs	r4, r4, r5
 80068ea:	10a4      	asrs	r4, r4, #2
 80068ec:	42a6      	cmp	r6, r4
 80068ee:	d109      	bne.n	8006904 <__libc_init_array+0x24>
 80068f0:	2600      	movs	r6, #0
 80068f2:	f000 f819 	bl	8006928 <_init>
 80068f6:	4c0a      	ldr	r4, [pc, #40]	; (8006920 <__libc_init_array+0x40>)
 80068f8:	4d0a      	ldr	r5, [pc, #40]	; (8006924 <__libc_init_array+0x44>)
 80068fa:	1b64      	subs	r4, r4, r5
 80068fc:	10a4      	asrs	r4, r4, #2
 80068fe:	42a6      	cmp	r6, r4
 8006900:	d105      	bne.n	800690e <__libc_init_array+0x2e>
 8006902:	bd70      	pop	{r4, r5, r6, pc}
 8006904:	00b3      	lsls	r3, r6, #2
 8006906:	58eb      	ldr	r3, [r5, r3]
 8006908:	4798      	blx	r3
 800690a:	3601      	adds	r6, #1
 800690c:	e7ee      	b.n	80068ec <__libc_init_array+0xc>
 800690e:	00b3      	lsls	r3, r6, #2
 8006910:	58eb      	ldr	r3, [r5, r3]
 8006912:	4798      	blx	r3
 8006914:	3601      	adds	r6, #1
 8006916:	e7f2      	b.n	80068fe <__libc_init_array+0x1e>
 8006918:	08006a14 	.word	0x08006a14
 800691c:	08006a14 	.word	0x08006a14
 8006920:	08006a18 	.word	0x08006a18
 8006924:	08006a14 	.word	0x08006a14

08006928 <_init>:
 8006928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800692a:	46c0      	nop			; (mov r8, r8)
 800692c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800692e:	bc08      	pop	{r3}
 8006930:	469e      	mov	lr, r3
 8006932:	4770      	bx	lr

08006934 <_fini>:
 8006934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006936:	46c0      	nop			; (mov r8, r8)
 8006938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800693a:	bc08      	pop	{r3}
 800693c:	469e      	mov	lr, r3
 800693e:	4770      	bx	lr
