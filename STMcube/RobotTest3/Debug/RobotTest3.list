
RobotTest3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008248  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08008300  08008300  00018300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083d4  080083d4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080083d4  080083d4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080083d4  080083d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083d4  080083d4  000183d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083d8  080083d8  000183d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080083dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  2000000c  080083e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  080083e8  00020438  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000113b7  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026dd  00000000  00000000  0003142e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001158  00000000  00000000  00033b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d8d  00000000  00000000  00034c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001729b  00000000  00000000  000359f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013ac2  00000000  00000000  0004cc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009581c  00000000  00000000  00060752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f88  00000000  00000000  000f5f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000f9ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080082e8 	.word	0x080082e8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	080082e8 	.word	0x080082e8

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <PollToggleButton>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void PollToggleButton(void) {
 80003ec:	b590      	push	{r4, r7, lr}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
    GPIO_PinState currentButtonState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
 80003f2:	1dfc      	adds	r4, r7, #7
 80003f4:	2380      	movs	r3, #128	; 0x80
 80003f6:	005b      	lsls	r3, r3, #1
 80003f8:	4a16      	ldr	r2, [pc, #88]	; (8000454 <PollToggleButton+0x68>)
 80003fa:	0019      	movs	r1, r3
 80003fc:	0010      	movs	r0, r2
 80003fe:	f003 fcf3 	bl	8003de8 <HAL_GPIO_ReadPin>
 8000402:	0003      	movs	r3, r0
 8000404:	7023      	strb	r3, [r4, #0]

    // Check for a button state change
    if (currentButtonState != lastButtonState) {
 8000406:	4b14      	ldr	r3, [pc, #80]	; (8000458 <PollToggleButton+0x6c>)
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	1dfa      	adds	r2, r7, #7
 800040c:	7812      	ldrb	r2, [r2, #0]
 800040e:	429a      	cmp	r2, r3
 8000410:	d01c      	beq.n	800044c <PollToggleButton+0x60>
        // If the current state of the button is LOW, that means it was just pressed
        if (currentButtonState == GPIO_PIN_RESET) {
 8000412:	1dfb      	adds	r3, r7, #7
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	2b00      	cmp	r3, #0
 8000418:	d114      	bne.n	8000444 <PollToggleButton+0x58>
            uint32_t currentTime = HAL_GetTick();
 800041a:	f001 ff6f 	bl	80022fc <HAL_GetTick>
 800041e:	0003      	movs	r3, r0
 8000420:	603b      	str	r3, [r7, #0]

            if ((currentTime - lastDebounceTime) > debounceDelay) {
 8000422:	4b0e      	ldr	r3, [pc, #56]	; (800045c <PollToggleButton+0x70>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	683a      	ldr	r2, [r7, #0]
 8000428:	1ad3      	subs	r3, r2, r3
 800042a:	2232      	movs	r2, #50	; 0x32
 800042c:	4293      	cmp	r3, r2
 800042e:	d909      	bls.n	8000444 <PollToggleButton+0x58>
                // Toggle the LED
            	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8000430:	2380      	movs	r3, #128	; 0x80
 8000432:	005b      	lsls	r3, r3, #1
 8000434:	4a0a      	ldr	r2, [pc, #40]	; (8000460 <PollToggleButton+0x74>)
 8000436:	0019      	movs	r1, r3
 8000438:	0010      	movs	r0, r2
 800043a:	f003 fd0f 	bl	8003e5c <HAL_GPIO_TogglePin>
            	// Reset the debounce timer
            	lastDebounceTime = currentTime;
 800043e:	4b07      	ldr	r3, [pc, #28]	; (800045c <PollToggleButton+0x70>)
 8000440:	683a      	ldr	r2, [r7, #0]
 8000442:	601a      	str	r2, [r3, #0]
            }
        }
        lastButtonState = currentButtonState;
 8000444:	4b04      	ldr	r3, [pc, #16]	; (8000458 <PollToggleButton+0x6c>)
 8000446:	1dfa      	adds	r2, r7, #7
 8000448:	7812      	ldrb	r2, [r2, #0]
 800044a:	701a      	strb	r2, [r3, #0]
    }
}
 800044c:	46c0      	nop			; (mov r8, r8)
 800044e:	46bd      	mov	sp, r7
 8000450:	b003      	add	sp, #12
 8000452:	bd90      	pop	{r4, r7, pc}
 8000454:	50000800 	.word	0x50000800
 8000458:	2000042a 	.word	0x2000042a
 800045c:	2000042c 	.word	0x2000042c
 8000460:	50000400 	.word	0x50000400

08000464 <BQ24295_SetShippingMode>:


void BQ24295_SetShippingMode(void) {
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af04      	add	r7, sp, #16
    uint8_t data;

    // Disable Watchdog Timer: Set address 0x05[5:4] to 00
    HAL_I2C_Mem_Read(&hi2c1, BQ24295_ADDR, 0x05, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800046a:	4823      	ldr	r0, [pc, #140]	; (80004f8 <BQ24295_SetShippingMode+0x94>)
 800046c:	2301      	movs	r3, #1
 800046e:	425b      	negs	r3, r3
 8000470:	9302      	str	r3, [sp, #8]
 8000472:	2301      	movs	r3, #1
 8000474:	9301      	str	r3, [sp, #4]
 8000476:	1dfb      	adds	r3, r7, #7
 8000478:	9300      	str	r3, [sp, #0]
 800047a:	2301      	movs	r3, #1
 800047c:	2205      	movs	r2, #5
 800047e:	21d6      	movs	r1, #214	; 0xd6
 8000480:	f003 ff32 	bl	80042e8 <HAL_I2C_Mem_Read>
    data &= 0xCF;  // Clear bits 5 and 4
 8000484:	1dfb      	adds	r3, r7, #7
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2230      	movs	r2, #48	; 0x30
 800048a:	4393      	bics	r3, r2
 800048c:	b2da      	uxtb	r2, r3
 800048e:	1dfb      	adds	r3, r7, #7
 8000490:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c1, BQ24295_ADDR, 0x05, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8000492:	4819      	ldr	r0, [pc, #100]	; (80004f8 <BQ24295_SetShippingMode+0x94>)
 8000494:	2301      	movs	r3, #1
 8000496:	425b      	negs	r3, r3
 8000498:	9302      	str	r3, [sp, #8]
 800049a:	2301      	movs	r3, #1
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	1dfb      	adds	r3, r7, #7
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	2301      	movs	r3, #1
 80004a4:	2205      	movs	r2, #5
 80004a6:	21d6      	movs	r1, #214	; 0xd6
 80004a8:	f003 fdf0 	bl	800408c <HAL_I2C_Mem_Write>

    // Disable BATFET: Set address 0x07[5] to 1
    HAL_I2C_Mem_Read(&hi2c1, BQ24295_ADDR, 0x07, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80004ac:	4812      	ldr	r0, [pc, #72]	; (80004f8 <BQ24295_SetShippingMode+0x94>)
 80004ae:	2301      	movs	r3, #1
 80004b0:	425b      	negs	r3, r3
 80004b2:	9302      	str	r3, [sp, #8]
 80004b4:	2301      	movs	r3, #1
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	1dfb      	adds	r3, r7, #7
 80004ba:	9300      	str	r3, [sp, #0]
 80004bc:	2301      	movs	r3, #1
 80004be:	2207      	movs	r2, #7
 80004c0:	21d6      	movs	r1, #214	; 0xd6
 80004c2:	f003 ff11 	bl	80042e8 <HAL_I2C_Mem_Read>
    data |= 0x20;  // Set bit 5
 80004c6:	1dfb      	adds	r3, r7, #7
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	2220      	movs	r2, #32
 80004cc:	4313      	orrs	r3, r2
 80004ce:	b2da      	uxtb	r2, r3
 80004d0:	1dfb      	adds	r3, r7, #7
 80004d2:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c1, BQ24295_ADDR, 0x07, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80004d4:	4808      	ldr	r0, [pc, #32]	; (80004f8 <BQ24295_SetShippingMode+0x94>)
 80004d6:	2301      	movs	r3, #1
 80004d8:	425b      	negs	r3, r3
 80004da:	9302      	str	r3, [sp, #8]
 80004dc:	2301      	movs	r3, #1
 80004de:	9301      	str	r3, [sp, #4]
 80004e0:	1dfb      	adds	r3, r7, #7
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	2301      	movs	r3, #1
 80004e6:	2207      	movs	r2, #7
 80004e8:	21d6      	movs	r1, #214	; 0xd6
 80004ea:	f003 fdcf 	bl	800408c <HAL_I2C_Mem_Write>
}
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	46bd      	mov	sp, r7
 80004f2:	b002      	add	sp, #8
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	200000e8 	.word	0x200000e8

080004fc <HAL_I2C_AddrCallback>:


void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08c      	sub	sp, #48	; 0x30
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	0008      	movs	r0, r1
 8000506:	0011      	movs	r1, r2
 8000508:	1cfb      	adds	r3, r7, #3
 800050a:	1c02      	adds	r2, r0, #0
 800050c:	701a      	strb	r2, [r3, #0]
 800050e:	003b      	movs	r3, r7
 8000510:	1c0a      	adds	r2, r1, #0
 8000512:	801a      	strh	r2, [r3, #0]

	uint8_t *regAddr = (uint8_t *)&i2cReg;  // Cast struct to byte pointer
 8000514:	4b9b      	ldr	r3, [pc, #620]	; (8000784 <HAL_I2C_AddrCallback+0x288>)
 8000516:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < 12; i++) {
	    i2cTransmitBuf[i * 2 + 1] = (uint8_t)(adcConversions[i] & 0xFF); // Lower 8 bits
	    i2cTransmitBuf[i * 2] = (uint8_t)((adcConversions[i] >> 8) & 0xFF); // Upper 8 bits
	}
*/
	if(TransferDirection == I2C_DIRECTION_TRANSMIT)
 8000518:	1cfb      	adds	r3, r7, #3
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d10a      	bne.n	8000536 <HAL_I2C_AddrCallback+0x3a>
		{
			i2cCheck_flag=1;	//check option fields flag
 8000520:	4b99      	ldr	r3, [pc, #612]	; (8000788 <HAL_I2C_AddrCallback+0x28c>)
 8000522:	2201      	movs	r2, #1
 8000524:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, (uint8_t *)&i2cRo, 2, I2C_FIRST_AND_LAST_FRAME);	//receive i2c command
 8000526:	2380      	movs	r3, #128	; 0x80
 8000528:	049b      	lsls	r3, r3, #18
 800052a:	4998      	ldr	r1, [pc, #608]	; (800078c <HAL_I2C_AddrCallback+0x290>)
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	2202      	movs	r2, #2
 8000530:	f004 f8ce 	bl	80046d0 <HAL_I2C_Slave_Seq_Receive_IT>
				wrCheck=0;
			}
		}


}
 8000534:	e122      	b.n	800077c <HAL_I2C_AddrCallback+0x280>
			if(wrCheck==0){
 8000536:	4b96      	ldr	r3, [pc, #600]	; (8000790 <HAL_I2C_AddrCallback+0x294>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	b2db      	uxtb	r3, r3
 800053c:	2b00      	cmp	r3, #0
 800053e:	d000      	beq.n	8000542 <HAL_I2C_AddrCallback+0x46>
 8000540:	e10e      	b.n	8000760 <HAL_I2C_AddrCallback+0x264>
				int length=(i2cReg.ec.irleds)*16+(i2cReg.ec.powerMeas)*8+(i2cReg.ec.sonar)*2+(i2cReg.ec.encoderMeas)*2;
 8000542:	4b90      	ldr	r3, [pc, #576]	; (8000784 <HAL_I2C_AddrCallback+0x288>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	079b      	lsls	r3, r3, #30
 8000548:	0fdb      	lsrs	r3, r3, #31
 800054a:	b2db      	uxtb	r3, r3
 800054c:	005b      	lsls	r3, r3, #1
 800054e:	4a8d      	ldr	r2, [pc, #564]	; (8000784 <HAL_I2C_AddrCallback+0x288>)
 8000550:	7812      	ldrb	r2, [r2, #0]
 8000552:	0652      	lsls	r2, r2, #25
 8000554:	0fd2      	lsrs	r2, r2, #31
 8000556:	b2d2      	uxtb	r2, r2
 8000558:	189b      	adds	r3, r3, r2
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	4a89      	ldr	r2, [pc, #548]	; (8000784 <HAL_I2C_AddrCallback+0x288>)
 800055e:	7812      	ldrb	r2, [r2, #0]
 8000560:	0752      	lsls	r2, r2, #29
 8000562:	0fd2      	lsrs	r2, r2, #31
 8000564:	b2d2      	uxtb	r2, r2
 8000566:	189b      	adds	r3, r3, r2
 8000568:	4a86      	ldr	r2, [pc, #536]	; (8000784 <HAL_I2C_AddrCallback+0x288>)
 800056a:	7812      	ldrb	r2, [r2, #0]
 800056c:	0692      	lsls	r2, r2, #26
 800056e:	0fd2      	lsrs	r2, r2, #31
 8000570:	b2d2      	uxtb	r2, r2
 8000572:	189b      	adds	r3, r3, r2
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	61fb      	str	r3, [r7, #28]
				int count=-1; int pattern; int check[4]={0};
 8000578:	2301      	movs	r3, #1
 800057a:	425b      	negs	r3, r3
 800057c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800057e:	230c      	movs	r3, #12
 8000580:	18fb      	adds	r3, r7, r3
 8000582:	0018      	movs	r0, r3
 8000584:	2310      	movs	r3, #16
 8000586:	001a      	movs	r2, r3
 8000588:	2100      	movs	r1, #0
 800058a:	f007 fe81 	bl	8008290 <memset>
				for(int i=0;i<(sizeof(i2cTransmitBuf)/sizeof(i2cTransmitBuf[0]))/2;i++){
 800058e:	2300      	movs	r3, #0
 8000590:	627b      	str	r3, [r7, #36]	; 0x24
 8000592:	e0d8      	b.n	8000746 <HAL_I2C_AddrCallback+0x24a>
					if(count<0){
 8000594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000596:	2b00      	cmp	r3, #0
 8000598:	da52      	bge.n	8000640 <HAL_I2C_AddrCallback+0x144>
						if(i2cReg.ec.irleds&&!check[0]){
 800059a:	4b7a      	ldr	r3, [pc, #488]	; (8000784 <HAL_I2C_AddrCallback+0x288>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2202      	movs	r2, #2
 80005a0:	4013      	ands	r3, r2
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d00c      	beq.n	80005c2 <HAL_I2C_AddrCallback+0xc6>
 80005a8:	220c      	movs	r2, #12
 80005aa:	18bb      	adds	r3, r7, r2
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d107      	bne.n	80005c2 <HAL_I2C_AddrCallback+0xc6>
							count=7;
 80005b2:	2307      	movs	r3, #7
 80005b4:	62fb      	str	r3, [r7, #44]	; 0x2c
							pattern=0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	62bb      	str	r3, [r7, #40]	; 0x28
							check[0]=1;
 80005ba:	18bb      	adds	r3, r7, r2
 80005bc:	2201      	movs	r2, #1
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	e03e      	b.n	8000640 <HAL_I2C_AddrCallback+0x144>
						}else if(i2cReg.ec.sonar&&!check[1]){
 80005c2:	4b70      	ldr	r3, [pc, #448]	; (8000784 <HAL_I2C_AddrCallback+0x288>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2204      	movs	r2, #4
 80005c8:	4013      	ands	r3, r2
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d00c      	beq.n	80005ea <HAL_I2C_AddrCallback+0xee>
 80005d0:	220c      	movs	r2, #12
 80005d2:	18bb      	adds	r3, r7, r2
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d107      	bne.n	80005ea <HAL_I2C_AddrCallback+0xee>
							count=0;
 80005da:	2300      	movs	r3, #0
 80005dc:	62fb      	str	r3, [r7, #44]	; 0x2c
							pattern=1;
 80005de:	2301      	movs	r3, #1
 80005e0:	62bb      	str	r3, [r7, #40]	; 0x28
							check[1]=1;
 80005e2:	18bb      	adds	r3, r7, r2
 80005e4:	2201      	movs	r2, #1
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	e02a      	b.n	8000640 <HAL_I2C_AddrCallback+0x144>
						}else if(i2cReg.ec.powerMeas&&!check[2]){
 80005ea:	4b66      	ldr	r3, [pc, #408]	; (8000784 <HAL_I2C_AddrCallback+0x288>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2240      	movs	r2, #64	; 0x40
 80005f0:	4013      	ands	r3, r2
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d00c      	beq.n	8000612 <HAL_I2C_AddrCallback+0x116>
 80005f8:	220c      	movs	r2, #12
 80005fa:	18bb      	adds	r3, r7, r2
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d107      	bne.n	8000612 <HAL_I2C_AddrCallback+0x116>
							count=3;
 8000602:	2303      	movs	r3, #3
 8000604:	62fb      	str	r3, [r7, #44]	; 0x2c
							pattern=2;
 8000606:	2302      	movs	r3, #2
 8000608:	62bb      	str	r3, [r7, #40]	; 0x28
							check[2]=1;
 800060a:	18bb      	adds	r3, r7, r2
 800060c:	2201      	movs	r2, #1
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	e016      	b.n	8000640 <HAL_I2C_AddrCallback+0x144>
						}else if(i2cReg.ec.encoderMeas&&!check[3]){
 8000612:	4b5c      	ldr	r3, [pc, #368]	; (8000784 <HAL_I2C_AddrCallback+0x288>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2220      	movs	r2, #32
 8000618:	4013      	ands	r3, r2
 800061a:	b2db      	uxtb	r3, r3
 800061c:	2b00      	cmp	r3, #0
 800061e:	d00c      	beq.n	800063a <HAL_I2C_AddrCallback+0x13e>
 8000620:	220c      	movs	r2, #12
 8000622:	18bb      	adds	r3, r7, r2
 8000624:	68db      	ldr	r3, [r3, #12]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d107      	bne.n	800063a <HAL_I2C_AddrCallback+0x13e>
							count=0;
 800062a:	2300      	movs	r3, #0
 800062c:	62fb      	str	r3, [r7, #44]	; 0x2c
							pattern=3;
 800062e:	2303      	movs	r3, #3
 8000630:	62bb      	str	r3, [r7, #40]	; 0x28
							check[3]=1;
 8000632:	18bb      	adds	r3, r7, r2
 8000634:	2201      	movs	r2, #1
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	e002      	b.n	8000640 <HAL_I2C_AddrCallback+0x144>
						}else{pattern=-1;}
 800063a:	2301      	movs	r3, #1
 800063c:	425b      	negs	r3, r3
 800063e:	62bb      	str	r3, [r7, #40]	; 0x28
					switch(pattern){
 8000640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000642:	2b03      	cmp	r3, #3
 8000644:	d054      	beq.n	80006f0 <HAL_I2C_AddrCallback+0x1f4>
 8000646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000648:	2b03      	cmp	r3, #3
 800064a:	dc6b      	bgt.n	8000724 <HAL_I2C_AddrCallback+0x228>
 800064c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800064e:	2b02      	cmp	r3, #2
 8000650:	d034      	beq.n	80006bc <HAL_I2C_AddrCallback+0x1c0>
 8000652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000654:	2b02      	cmp	r3, #2
 8000656:	dc65      	bgt.n	8000724 <HAL_I2C_AddrCallback+0x228>
 8000658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800065a:	2b00      	cmp	r3, #0
 800065c:	d003      	beq.n	8000666 <HAL_I2C_AddrCallback+0x16a>
 800065e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000660:	2b01      	cmp	r3, #1
 8000662:	d01a      	beq.n	800069a <HAL_I2C_AddrCallback+0x19e>
 8000664:	e05e      	b.n	8000724 <HAL_I2C_AddrCallback+0x228>
						i2cTransmitBuf[i * 2 + 1] = (uint8_t)(adcConversions[7-count] & 0xFF); // Lower 8 bits
 8000666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000668:	2207      	movs	r2, #7
 800066a:	1ad2      	subs	r2, r2, r3
 800066c:	4b49      	ldr	r3, [pc, #292]	; (8000794 <HAL_I2C_AddrCallback+0x298>)
 800066e:	0052      	lsls	r2, r2, #1
 8000670:	5ad2      	ldrh	r2, [r2, r3]
 8000672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	3301      	adds	r3, #1
 8000678:	b2d1      	uxtb	r1, r2
 800067a:	4a47      	ldr	r2, [pc, #284]	; (8000798 <HAL_I2C_AddrCallback+0x29c>)
 800067c:	54d1      	strb	r1, [r2, r3]
						i2cTransmitBuf[i * 2] = (uint8_t)((adcConversions[7-count] >> 8) & 0xFF); // Upper 8 bits
 800067e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000680:	2207      	movs	r2, #7
 8000682:	1ad2      	subs	r2, r2, r3
 8000684:	4b43      	ldr	r3, [pc, #268]	; (8000794 <HAL_I2C_AddrCallback+0x298>)
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	5ad3      	ldrh	r3, [r2, r3]
 800068a:	0a1b      	lsrs	r3, r3, #8
 800068c:	b29a      	uxth	r2, r3
 800068e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000690:	005b      	lsls	r3, r3, #1
 8000692:	b2d1      	uxtb	r1, r2
 8000694:	4a40      	ldr	r2, [pc, #256]	; (8000798 <HAL_I2C_AddrCallback+0x29c>)
 8000696:	54d1      	strb	r1, [r2, r3]
						break;
 8000698:	e04f      	b.n	800073a <HAL_I2C_AddrCallback+0x23e>
						i2cTransmitBuf[i * 2 + 1] = (uint8_t)(sonarVars.reading & 0xFF); // Lower 8 bits
 800069a:	4b40      	ldr	r3, [pc, #256]	; (800079c <HAL_I2C_AddrCallback+0x2a0>)
 800069c:	68da      	ldr	r2, [r3, #12]
 800069e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	3301      	adds	r3, #1
 80006a4:	b2d1      	uxtb	r1, r2
 80006a6:	4a3c      	ldr	r2, [pc, #240]	; (8000798 <HAL_I2C_AddrCallback+0x29c>)
 80006a8:	54d1      	strb	r1, [r2, r3]
						i2cTransmitBuf[i * 2] = (uint8_t)((sonarVars.reading >> 8) & 0xFF); // Upper 8 bits
 80006aa:	4b3c      	ldr	r3, [pc, #240]	; (800079c <HAL_I2C_AddrCallback+0x2a0>)
 80006ac:	68db      	ldr	r3, [r3, #12]
 80006ae:	121a      	asrs	r2, r3, #8
 80006b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	b2d1      	uxtb	r1, r2
 80006b6:	4a38      	ldr	r2, [pc, #224]	; (8000798 <HAL_I2C_AddrCallback+0x29c>)
 80006b8:	54d1      	strb	r1, [r2, r3]
						break;
 80006ba:	e03e      	b.n	800073a <HAL_I2C_AddrCallback+0x23e>
						i2cTransmitBuf[i * 2 + 1] = (uint8_t)(adcConversions[11-count] & 0xFF); // Lower 8 bits
 80006bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006be:	220b      	movs	r2, #11
 80006c0:	1ad2      	subs	r2, r2, r3
 80006c2:	4b34      	ldr	r3, [pc, #208]	; (8000794 <HAL_I2C_AddrCallback+0x298>)
 80006c4:	0052      	lsls	r2, r2, #1
 80006c6:	5ad2      	ldrh	r2, [r2, r3]
 80006c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	3301      	adds	r3, #1
 80006ce:	b2d1      	uxtb	r1, r2
 80006d0:	4a31      	ldr	r2, [pc, #196]	; (8000798 <HAL_I2C_AddrCallback+0x29c>)
 80006d2:	54d1      	strb	r1, [r2, r3]
						i2cTransmitBuf[i * 2] = (uint8_t)((adcConversions[11-count] >> 8) & 0xFF); // Upper 8 bits
 80006d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006d6:	220b      	movs	r2, #11
 80006d8:	1ad2      	subs	r2, r2, r3
 80006da:	4b2e      	ldr	r3, [pc, #184]	; (8000794 <HAL_I2C_AddrCallback+0x298>)
 80006dc:	0052      	lsls	r2, r2, #1
 80006de:	5ad3      	ldrh	r3, [r2, r3]
 80006e0:	0a1b      	lsrs	r3, r3, #8
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	b2d1      	uxtb	r1, r2
 80006ea:	4a2b      	ldr	r2, [pc, #172]	; (8000798 <HAL_I2C_AddrCallback+0x29c>)
 80006ec:	54d1      	strb	r1, [r2, r3]
						break;
 80006ee:	e024      	b.n	800073a <HAL_I2C_AddrCallback+0x23e>
						i2cTransmitBuf[i * 2 + 1] = (uint8_t)(adcConversions[11-count] & 0xFF); // Lower 8 bits
 80006f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006f2:	220b      	movs	r2, #11
 80006f4:	1ad2      	subs	r2, r2, r3
 80006f6:	4b27      	ldr	r3, [pc, #156]	; (8000794 <HAL_I2C_AddrCallback+0x298>)
 80006f8:	0052      	lsls	r2, r2, #1
 80006fa:	5ad2      	ldrh	r2, [r2, r3]
 80006fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	3301      	adds	r3, #1
 8000702:	b2d1      	uxtb	r1, r2
 8000704:	4a24      	ldr	r2, [pc, #144]	; (8000798 <HAL_I2C_AddrCallback+0x29c>)
 8000706:	54d1      	strb	r1, [r2, r3]
						i2cTransmitBuf[i * 2] = (uint8_t)((adcConversions[11-count] >> 8) & 0xFF); // Upper 8 bits
 8000708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800070a:	220b      	movs	r2, #11
 800070c:	1ad2      	subs	r2, r2, r3
 800070e:	4b21      	ldr	r3, [pc, #132]	; (8000794 <HAL_I2C_AddrCallback+0x298>)
 8000710:	0052      	lsls	r2, r2, #1
 8000712:	5ad3      	ldrh	r3, [r2, r3]
 8000714:	0a1b      	lsrs	r3, r3, #8
 8000716:	b29a      	uxth	r2, r3
 8000718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	b2d1      	uxtb	r1, r2
 800071e:	4a1e      	ldr	r2, [pc, #120]	; (8000798 <HAL_I2C_AddrCallback+0x29c>)
 8000720:	54d1      	strb	r1, [r2, r3]
						break;
 8000722:	e00a      	b.n	800073a <HAL_I2C_AddrCallback+0x23e>
						i2cTransmitBuf[i * 2 + 1] = 0;
 8000724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	3301      	adds	r3, #1
 800072a:	4a1b      	ldr	r2, [pc, #108]	; (8000798 <HAL_I2C_AddrCallback+0x29c>)
 800072c:	2100      	movs	r1, #0
 800072e:	54d1      	strb	r1, [r2, r3]
						i2cTransmitBuf[i * 2] = 0;
 8000730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	4a18      	ldr	r2, [pc, #96]	; (8000798 <HAL_I2C_AddrCallback+0x29c>)
 8000736:	2100      	movs	r1, #0
 8000738:	54d1      	strb	r1, [r2, r3]
					count--;
 800073a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800073c:	3b01      	subs	r3, #1
 800073e:	62fb      	str	r3, [r7, #44]	; 0x2c
				for(int i=0;i<(sizeof(i2cTransmitBuf)/sizeof(i2cTransmitBuf[0]))/2;i++){
 8000740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000742:	3301      	adds	r3, #1
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
 8000746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000748:	2b0e      	cmp	r3, #14
 800074a:	d800      	bhi.n	800074e <HAL_I2C_AddrCallback+0x252>
 800074c:	e722      	b.n	8000594 <HAL_I2C_AddrCallback+0x98>
				HAL_I2C_Slave_Seq_Transmit_IT(hi2c, i2cTransmitBuf, length, I2C_FIRST_AND_LAST_FRAME);	//send data
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	b29a      	uxth	r2, r3
 8000752:	2380      	movs	r3, #128	; 0x80
 8000754:	049b      	lsls	r3, r3, #18
 8000756:	4910      	ldr	r1, [pc, #64]	; (8000798 <HAL_I2C_AddrCallback+0x29c>)
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f003 fef9 	bl	8004550 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 800075e:	e00d      	b.n	800077c <HAL_I2C_AddrCallback+0x280>
				HAL_I2C_Slave_Seq_Transmit_IT(hi2c, &(regAddr[i2cRo.data-1]), 1, I2C_FIRST_AND_LAST_FRAME);
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <HAL_I2C_AddrCallback+0x290>)
 8000762:	785b      	ldrb	r3, [r3, #1]
 8000764:	3b01      	subs	r3, #1
 8000766:	6a3a      	ldr	r2, [r7, #32]
 8000768:	18d1      	adds	r1, r2, r3
 800076a:	2380      	movs	r3, #128	; 0x80
 800076c:	049b      	lsls	r3, r3, #18
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	2201      	movs	r2, #1
 8000772:	f003 feed 	bl	8004550 <HAL_I2C_Slave_Seq_Transmit_IT>
				wrCheck=0;
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_I2C_AddrCallback+0x294>)
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	b00c      	add	sp, #48	; 0x30
 8000782:	bd80      	pop	{r7, pc}
 8000784:	200003b8 	.word	0x200003b8
 8000788:	20000431 	.word	0x20000431
 800078c:	200003c0 	.word	0x200003c0
 8000790:	20000433 	.word	0x20000433
 8000794:	200003f4 	.word	0x200003f4
 8000798:	2000040c 	.word	0x2000040c
 800079c:	200003cc 	.word	0x200003cc

080007a0 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	uint8_t *regAddr = (uint8_t *)&i2cReg;  // Cast struct to byte pointer
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <HAL_I2C_SlaveRxCpltCallback+0x48>)
 80007aa:	60fb      	str	r3, [r7, #12]
	if(i2cRo.address==0){
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d103      	bne.n	80007bc <HAL_I2C_SlaveRxCpltCallback+0x1c>
		wrCheck=1;		//special address 0 triggers next read to be data from specified address of register, flag sets next address callback to write single byte data
 80007b4:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <HAL_I2C_SlaveRxCpltCallback+0x50>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	701a      	strb	r2, [r3, #0]
 80007ba:	e00e      	b.n	80007da <HAL_I2C_SlaveRxCpltCallback+0x3a>
	} else if(i2cRo.address < sizeof(I2C_RegRecord_t) + 1) {
 80007bc:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b08      	cmp	r3, #8
 80007c2:	d808      	bhi.n	80007d6 <HAL_I2C_SlaveRxCpltCallback+0x36>
        regAddr[i2cRo.address-1] = i2cRo.data;  // Write received data to the specified register
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	3b01      	subs	r3, #1
 80007ca:	68fa      	ldr	r2, [r7, #12]
 80007cc:	18d3      	adds	r3, r2, r3
 80007ce:	4a07      	ldr	r2, [pc, #28]	; (80007ec <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 80007d0:	7852      	ldrb	r2, [r2, #1]
 80007d2:	701a      	strb	r2, [r3, #0]
 80007d4:	e001      	b.n	80007da <HAL_I2C_SlaveRxCpltCallback+0x3a>
    }
    else {
        Error_Handler();  // Invalid address received
 80007d6:	f001 f92d 	bl	8001a34 <Error_Handler>
    }
	rxCheck=1;
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <HAL_I2C_SlaveRxCpltCallback+0x54>)
 80007dc:	2201      	movs	r2, #1
 80007de:	701a      	strb	r2, [r3, #0]
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	b004      	add	sp, #16
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	200003b8 	.word	0x200003b8
 80007ec:	200003c0 	.word	0x200003c0
 80007f0:	20000433 	.word	0x20000433
 80007f4:	20000432 	.word	0x20000432

080007f8 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback (I2C_HandleTypeDef *hi2c)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	0018      	movs	r0, r3
 8000804:	f004 f826 	bl	8004854 <HAL_I2C_EnableListen_IT>
}
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	b002      	add	sp, #8
 800080e:	bd80      	pop	{r7, pc}

08000810 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	0018      	movs	r0, r3
 800081c:	f004 f81a 	bl	8004854 <HAL_I2C_EnableListen_IT>
}
 8000820:	46c0      	nop			; (mov r8, r8)
 8000822:	46bd      	mov	sp, r7
 8000824:	b002      	add	sp, #8
 8000826:	bd80      	pop	{r7, pc}

08000828 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6){
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4ac5      	ldr	r2, [pc, #788]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d000      	beq.n	800083c <HAL_TIM_PeriodElapsedCallback+0x14>
 800083a:	e092      	b.n	8000962 <HAL_TIM_PeriodElapsedCallback+0x13a>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800083c:	2380      	movs	r3, #128	; 0x80
 800083e:	019b      	lsls	r3, r3, #6
 8000840:	4ac3      	ldr	r2, [pc, #780]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000842:	0019      	movs	r1, r3
 8000844:	0010      	movs	r0, r2
 8000846:	f003 fb09 	bl	8003e5c <HAL_GPIO_TogglePin>

		if(sequencerVars.count%4==0&&i2cReg.ec.irleds==1){HAL_TIM_Base_Start_IT(&htim3);}
 800084a:	4bc2      	ldr	r3, [pc, #776]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	001a      	movs	r2, r3
 8000850:	2303      	movs	r3, #3
 8000852:	4013      	ands	r3, r2
 8000854:	d10a      	bne.n	800086c <HAL_TIM_PeriodElapsedCallback+0x44>
 8000856:	4bc0      	ldr	r3, [pc, #768]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2202      	movs	r2, #2
 800085c:	4013      	ands	r3, r2
 800085e:	b2db      	uxtb	r3, r3
 8000860:	2b00      	cmp	r3, #0
 8000862:	d003      	beq.n	800086c <HAL_TIM_PeriodElapsedCallback+0x44>
 8000864:	4bbd      	ldr	r3, [pc, #756]	; (8000b5c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8000866:	0018      	movs	r0, r3
 8000868:	f006 fb38 	bl	8006edc <HAL_TIM_Base_Start_IT>

		if(sequencerVars.count%80==0&&sonarVars.mode==0&&htim14.State==1&&i2cReg.ec.sonar==1){
 800086c:	4bb9      	ldr	r3, [pc, #740]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2150      	movs	r1, #80	; 0x50
 8000872:	0018      	movs	r0, r3
 8000874:	f7ff fdb4 	bl	80003e0 <__aeabi_idivmod>
 8000878:	1e0b      	subs	r3, r1, #0
 800087a:	d11d      	bne.n	80008b8 <HAL_TIM_PeriodElapsedCallback+0x90>
 800087c:	4bb8      	ldr	r3, [pc, #736]	; (8000b60 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d119      	bne.n	80008b8 <HAL_TIM_PeriodElapsedCallback+0x90>
 8000884:	4bb7      	ldr	r3, [pc, #732]	; (8000b64 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8000886:	223d      	movs	r2, #61	; 0x3d
 8000888:	5c9b      	ldrb	r3, [r3, r2]
 800088a:	b2db      	uxtb	r3, r3
 800088c:	2b01      	cmp	r3, #1
 800088e:	d113      	bne.n	80008b8 <HAL_TIM_PeriodElapsedCallback+0x90>
 8000890:	4bb1      	ldr	r3, [pc, #708]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2204      	movs	r2, #4
 8000896:	4013      	ands	r3, r2
 8000898:	b2db      	uxtb	r3, r3
 800089a:	2b00      	cmp	r3, #0
 800089c:	d00c      	beq.n	80008b8 <HAL_TIM_PeriodElapsedCallback+0x90>
			sonarVars.count=1;
 800089e:	4bb0      	ldr	r3, [pc, #704]	; (8000b60 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	601a      	str	r2, [r3, #0]
			sonarVars.trig=0;
 80008a4:	4bae      	ldr	r3, [pc, #696]	; (8000b60 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
			sonarVars.mode=1;
 80008aa:	4bad      	ldr	r3, [pc, #692]	; (8000b60 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	605a      	str	r2, [r3, #4]
			//HAL_TIM_Base_Start(&htim14);
			HAL_TIM_Base_Start_IT(&htim14);
 80008b0:	4bac      	ldr	r3, [pc, #688]	; (8000b64 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80008b2:	0018      	movs	r0, r3
 80008b4:	f006 fb12 	bl	8006edc <HAL_TIM_Base_Start_IT>

		}



		if(i2cReg.m1.data>0){
 80008b8:	4ba7      	ldr	r3, [pc, #668]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80008ba:	799b      	ldrb	r3, [r3, #6]
 80008bc:	b25b      	sxtb	r3, r3
 80008be:	2b00      	cmp	r3, #0
 80008c0:	dd0f      	ble.n	80008e2 <HAL_TIM_PeriodElapsedCallback+0xba>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (uint8_t)abs(i2cReg.m1.data)<<1);
 80008c2:	4ba5      	ldr	r3, [pc, #660]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80008c4:	799b      	ldrb	r3, [r3, #6]
 80008c6:	b25b      	sxtb	r3, r3
 80008c8:	17da      	asrs	r2, r3, #31
 80008ca:	189b      	adds	r3, r3, r2
 80008cc:	4053      	eors	r3, r2
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	005a      	lsls	r2, r3, #1
 80008d2:	4ba5      	ldr	r3, [pc, #660]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80008d8:	4ba3      	ldr	r3, [pc, #652]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2200      	movs	r2, #0
 80008de:	639a      	str	r2, [r3, #56]	; 0x38
 80008e0:	e00e      	b.n	8000900 <HAL_TIM_PeriodElapsedCallback+0xd8>
		}else{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80008e2:	4ba1      	ldr	r3, [pc, #644]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2200      	movs	r2, #0
 80008e8:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, (uint8_t)abs(i2cReg.m1.data)<<1);
 80008ea:	4b9b      	ldr	r3, [pc, #620]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80008ec:	799b      	ldrb	r3, [r3, #6]
 80008ee:	b25b      	sxtb	r3, r3
 80008f0:	17da      	asrs	r2, r3, #31
 80008f2:	189b      	adds	r3, r3, r2
 80008f4:	4053      	eors	r3, r2
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	005a      	lsls	r2, r3, #1
 80008fa:	4b9b      	ldr	r3, [pc, #620]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	639a      	str	r2, [r3, #56]	; 0x38
		}

		if(i2cReg.m2.data>0){
 8000900:	4b95      	ldr	r3, [pc, #596]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000902:	79db      	ldrb	r3, [r3, #7]
 8000904:	b25b      	sxtb	r3, r3
 8000906:	2b00      	cmp	r3, #0
 8000908:	dd0f      	ble.n	800092a <HAL_TIM_PeriodElapsedCallback+0x102>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, (uint8_t)abs(i2cReg.m2.data)<<1);
 800090a:	4b93      	ldr	r3, [pc, #588]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800090c:	79db      	ldrb	r3, [r3, #7]
 800090e:	b25b      	sxtb	r3, r3
 8000910:	17da      	asrs	r2, r3, #31
 8000912:	189b      	adds	r3, r3, r2
 8000914:	4053      	eors	r3, r2
 8000916:	b2db      	uxtb	r3, r3
 8000918:	005a      	lsls	r2, r3, #1
 800091a:	4b93      	ldr	r3, [pc, #588]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8000920:	4b91      	ldr	r3, [pc, #580]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2200      	movs	r2, #0
 8000926:	63da      	str	r2, [r3, #60]	; 0x3c
 8000928:	e00e      	b.n	8000948 <HAL_TIM_PeriodElapsedCallback+0x120>
		}else{
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 800092a:	4b8f      	ldr	r3, [pc, #572]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2200      	movs	r2, #0
 8000930:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, (uint8_t)abs(i2cReg.m2.data)<<1);
 8000932:	4b89      	ldr	r3, [pc, #548]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000934:	79db      	ldrb	r3, [r3, #7]
 8000936:	b25b      	sxtb	r3, r3
 8000938:	17da      	asrs	r2, r3, #31
 800093a:	189b      	adds	r3, r3, r2
 800093c:	4053      	eors	r3, r2
 800093e:	b2db      	uxtb	r3, r3
 8000940:	005a      	lsls	r2, r3, #1
 8000942:	4b89      	ldr	r3, [pc, #548]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	63da      	str	r2, [r3, #60]	; 0x3c
		}

		if(sequencerVars.count==240){sequencerVars.count=1;}else{sequencerVars.count++;}
 8000948:	4b82      	ldr	r3, [pc, #520]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2bf0      	cmp	r3, #240	; 0xf0
 800094e:	d103      	bne.n	8000958 <HAL_TIM_PeriodElapsedCallback+0x130>
 8000950:	4b80      	ldr	r3, [pc, #512]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8000952:	2201      	movs	r2, #1
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	e004      	b.n	8000962 <HAL_TIM_PeriodElapsedCallback+0x13a>
 8000958:	4b7e      	ldr	r3, [pc, #504]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	1c5a      	adds	r2, r3, #1
 800095e:	4b7d      	ldr	r3, [pc, #500]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8000960:	601a      	str	r2, [r3, #0]
	}

	if (htim->Instance == TIM3){
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a81      	ldr	r2, [pc, #516]	; (8000b6c <HAL_TIM_PeriodElapsedCallback+0x344>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d000      	beq.n	800096e <HAL_TIM_PeriodElapsedCallback+0x146>
 800096c:	e146      	b.n	8000bfc <HAL_TIM_PeriodElapsedCallback+0x3d4>

		if(i2cReg.ec.irleds==0){
 800096e:	4b7a      	ldr	r3, [pc, #488]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2202      	movs	r2, #2
 8000974:	4013      	ands	r3, r2
 8000976:	b2db      	uxtb	r3, r3
 8000978:	2b00      	cmp	r3, #0
 800097a:	d12f      	bne.n	80009dc <HAL_TIM_PeriodElapsedCallback+0x1b4>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,0);
 800097c:	4b74      	ldr	r3, [pc, #464]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800097e:	2200      	movs	r2, #0
 8000980:	2108      	movs	r1, #8
 8000982:	0018      	movs	r0, r3
 8000984:	f003 fa4d 	bl	8003e22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0,0);
 8000988:	4b79      	ldr	r3, [pc, #484]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800098a:	2200      	movs	r2, #0
 800098c:	2101      	movs	r1, #1
 800098e:	0018      	movs	r0, r3
 8000990:	f003 fa47 	bl	8003e22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_1,0);
 8000994:	4b76      	ldr	r3, [pc, #472]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000996:	2200      	movs	r2, #0
 8000998:	2102      	movs	r1, #2
 800099a:	0018      	movs	r0, r3
 800099c:	f003 fa41 	bl	8003e22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,0);
 80009a0:	4b73      	ldr	r3, [pc, #460]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	2104      	movs	r1, #4
 80009a6:	0018      	movs	r0, r3
 80009a8:	f003 fa3b 	bl	8003e22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_3,0);
 80009ac:	4b70      	ldr	r3, [pc, #448]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	2108      	movs	r1, #8
 80009b2:	0018      	movs	r0, r3
 80009b4:	f003 fa35 	bl	8003e22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_4,0);
 80009b8:	4b6d      	ldr	r3, [pc, #436]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	2110      	movs	r1, #16
 80009be:	0018      	movs	r0, r3
 80009c0:	f003 fa2f 	bl	8003e22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,0);
 80009c4:	4b6a      	ldr	r3, [pc, #424]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	2120      	movs	r1, #32
 80009ca:	0018      	movs	r0, r3
 80009cc:	f003 fa29 	bl	8003e22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_6,0);
 80009d0:	4b67      	ldr	r3, [pc, #412]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	2140      	movs	r1, #64	; 0x40
 80009d6:	0018      	movs	r0, r3
 80009d8:	f003 fa23 	bl	8003e22 <HAL_GPIO_WritePin>
		}

		if(irscan.scl==0){
 80009dc:	4b65      	ldr	r3, [pc, #404]	; (8000b74 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80009de:	785b      	ldrb	r3, [r3, #1]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d000      	beq.n	80009e6 <HAL_TIM_PeriodElapsedCallback+0x1be>
 80009e4:	e076      	b.n	8000ad4 <HAL_TIM_PeriodElapsedCallback+0x2ac>

			switch(irscan.ledN){
 80009e6:	4b63      	ldr	r3, [pc, #396]	; (8000b74 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b07      	cmp	r3, #7
 80009ec:	d86c      	bhi.n	8000ac8 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 80009ee:	009a      	lsls	r2, r3, #2
 80009f0:	4b61      	ldr	r3, [pc, #388]	; (8000b78 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80009f2:	18d3      	adds	r3, r2, r3
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	469f      	mov	pc, r3
				case 0:
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,0);
 80009f8:	4b55      	ldr	r3, [pc, #340]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	2108      	movs	r1, #8
 80009fe:	0018      	movs	r0, r3
 8000a00:	f003 fa0f 	bl	8003e22 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0,1);
 8000a04:	4b5a      	ldr	r3, [pc, #360]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	2101      	movs	r1, #1
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f003 fa09 	bl	8003e22 <HAL_GPIO_WritePin>
					break;
 8000a10:	e05c      	b.n	8000acc <HAL_TIM_PeriodElapsedCallback+0x2a4>
				case 1:
					HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0,0);
 8000a12:	4b57      	ldr	r3, [pc, #348]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	2101      	movs	r1, #1
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f003 fa02 	bl	8003e22 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD,GPIO_PIN_1,1);
 8000a1e:	4b54      	ldr	r3, [pc, #336]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	2102      	movs	r1, #2
 8000a24:	0018      	movs	r0, r3
 8000a26:	f003 f9fc 	bl	8003e22 <HAL_GPIO_WritePin>
					break;
 8000a2a:	e04f      	b.n	8000acc <HAL_TIM_PeriodElapsedCallback+0x2a4>
				case 2:
					HAL_GPIO_WritePin(GPIOD,GPIO_PIN_1,0);
 8000a2c:	4b50      	ldr	r3, [pc, #320]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2102      	movs	r1, #2
 8000a32:	0018      	movs	r0, r3
 8000a34:	f003 f9f5 	bl	8003e22 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,1);
 8000a38:	4b4d      	ldr	r3, [pc, #308]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	2104      	movs	r1, #4
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f003 f9ef 	bl	8003e22 <HAL_GPIO_WritePin>
					break;
 8000a44:	e042      	b.n	8000acc <HAL_TIM_PeriodElapsedCallback+0x2a4>
				case 3:
					HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,0);
 8000a46:	4b4a      	ldr	r3, [pc, #296]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2104      	movs	r1, #4
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f003 f9e8 	bl	8003e22 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD,GPIO_PIN_3,1);
 8000a52:	4b47      	ldr	r3, [pc, #284]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	2108      	movs	r1, #8
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f003 f9e2 	bl	8003e22 <HAL_GPIO_WritePin>
					break;
 8000a5e:	e035      	b.n	8000acc <HAL_TIM_PeriodElapsedCallback+0x2a4>
				case 4:
					HAL_GPIO_WritePin(GPIOD,GPIO_PIN_3,0);
 8000a60:	4b43      	ldr	r3, [pc, #268]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	2108      	movs	r1, #8
 8000a66:	0018      	movs	r0, r3
 8000a68:	f003 f9db 	bl	8003e22 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD,GPIO_PIN_4,1);
 8000a6c:	4b40      	ldr	r3, [pc, #256]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	2110      	movs	r1, #16
 8000a72:	0018      	movs	r0, r3
 8000a74:	f003 f9d5 	bl	8003e22 <HAL_GPIO_WritePin>
					break;
 8000a78:	e028      	b.n	8000acc <HAL_TIM_PeriodElapsedCallback+0x2a4>
				case 5:
					HAL_GPIO_WritePin(GPIOD,GPIO_PIN_4,0);
 8000a7a:	4b3d      	ldr	r3, [pc, #244]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2110      	movs	r1, #16
 8000a80:	0018      	movs	r0, r3
 8000a82:	f003 f9ce 	bl	8003e22 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,1);
 8000a86:	4b3a      	ldr	r3, [pc, #232]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2120      	movs	r1, #32
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f003 f9c8 	bl	8003e22 <HAL_GPIO_WritePin>
					break;
 8000a92:	e01b      	b.n	8000acc <HAL_TIM_PeriodElapsedCallback+0x2a4>
				case 6:
					HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,0);
 8000a94:	4b36      	ldr	r3, [pc, #216]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	2120      	movs	r1, #32
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f003 f9c1 	bl	8003e22 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD,GPIO_PIN_6,1);
 8000aa0:	4b33      	ldr	r3, [pc, #204]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	2140      	movs	r1, #64	; 0x40
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f003 f9bb 	bl	8003e22 <HAL_GPIO_WritePin>
					break;
 8000aac:	e00e      	b.n	8000acc <HAL_TIM_PeriodElapsedCallback+0x2a4>
				case 7:
					HAL_GPIO_WritePin(GPIOD,GPIO_PIN_6,0);
 8000aae:	4b30      	ldr	r3, [pc, #192]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2140      	movs	r1, #64	; 0x40
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f003 f9b4 	bl	8003e22 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,1);
 8000aba:	4b25      	ldr	r3, [pc, #148]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	2108      	movs	r1, #8
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f003 f9ae 	bl	8003e22 <HAL_GPIO_WritePin>
					break;
 8000ac6:	e001      	b.n	8000acc <HAL_TIM_PeriodElapsedCallback+0x2a4>
				default:
					Error_Handler();
 8000ac8:	f000 ffb4 	bl	8001a34 <Error_Handler>
			}
			irscan.scl=1;
 8000acc:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	705a      	strb	r2, [r3, #1]
 8000ad2:	e066      	b.n	8000ba2 <HAL_TIM_PeriodElapsedCallback+0x37a>
		}else if(irscan.scl==2){
 8000ad4:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000ad6:	785b      	ldrb	r3, [r3, #1]
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d155      	bne.n	8000b88 <HAL_TIM_PeriodElapsedCallback+0x360>

			switch(irscan.ledN){
 8000adc:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b07      	cmp	r3, #7
 8000ae2:	d82c      	bhi.n	8000b3e <HAL_TIM_PeriodElapsedCallback+0x316>
 8000ae4:	009a      	lsls	r2, r3, #2
 8000ae6:	4b25      	ldr	r3, [pc, #148]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8000ae8:	18d3      	adds	r3, r2, r3
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	469f      	mov	pc, r3
				case 0:
					adcConversions[0]=adcDMAbuf[0];
 8000aee:	4b24      	ldr	r3, [pc, #144]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000af0:	881a      	ldrh	r2, [r3, #0]
 8000af2:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8000af4:	801a      	strh	r2, [r3, #0]
					break;
 8000af6:	e024      	b.n	8000b42 <HAL_TIM_PeriodElapsedCallback+0x31a>
				case 1:
					adcConversions[1]=adcDMAbuf[1];
 8000af8:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000afa:	885a      	ldrh	r2, [r3, #2]
 8000afc:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8000afe:	805a      	strh	r2, [r3, #2]
					break;
 8000b00:	e01f      	b.n	8000b42 <HAL_TIM_PeriodElapsedCallback+0x31a>
				case 2:
					adcConversions[2]=adcDMAbuf[2];
 8000b02:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000b04:	889a      	ldrh	r2, [r3, #4]
 8000b06:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8000b08:	809a      	strh	r2, [r3, #4]
					break;
 8000b0a:	e01a      	b.n	8000b42 <HAL_TIM_PeriodElapsedCallback+0x31a>
				case 3:
					adcConversions[3]=adcDMAbuf[3];
 8000b0c:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000b0e:	88da      	ldrh	r2, [r3, #6]
 8000b10:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8000b12:	80da      	strh	r2, [r3, #6]
					break;
 8000b14:	e015      	b.n	8000b42 <HAL_TIM_PeriodElapsedCallback+0x31a>
				case 4:
					adcConversions[4]=adcDMAbuf[4];
 8000b16:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000b18:	891a      	ldrh	r2, [r3, #8]
 8000b1a:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8000b1c:	811a      	strh	r2, [r3, #8]
					break;
 8000b1e:	e010      	b.n	8000b42 <HAL_TIM_PeriodElapsedCallback+0x31a>
				case 5:
					adcConversions[5]=adcDMAbuf[5];
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000b22:	895a      	ldrh	r2, [r3, #10]
 8000b24:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8000b26:	815a      	strh	r2, [r3, #10]
					break;
 8000b28:	e00b      	b.n	8000b42 <HAL_TIM_PeriodElapsedCallback+0x31a>
				case 6:
					adcConversions[6]=adcDMAbuf[6];
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000b2c:	899a      	ldrh	r2, [r3, #12]
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8000b30:	819a      	strh	r2, [r3, #12]
					break;
 8000b32:	e006      	b.n	8000b42 <HAL_TIM_PeriodElapsedCallback+0x31a>
				case 7:
					adcConversions[7]=adcDMAbuf[7];
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8000b36:	89da      	ldrh	r2, [r3, #14]
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8000b3a:	81da      	strh	r2, [r3, #14]
					break;
 8000b3c:	e001      	b.n	8000b42 <HAL_TIM_PeriodElapsedCallback+0x31a>
				default:
					Error_Handler();
 8000b3e:	f000 ff79 	bl	8001a34 <Error_Handler>
			}
			irscan.scl=0;
 8000b42:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	705a      	strb	r2, [r3, #1]
 8000b48:	e02b      	b.n	8000ba2 <HAL_TIM_PeriodElapsedCallback+0x37a>
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	40001000 	.word	0x40001000
 8000b50:	50000400 	.word	0x50000400
 8000b54:	200003c8 	.word	0x200003c8
 8000b58:	200003b8 	.word	0x200003b8
 8000b5c:	2000023c 	.word	0x2000023c
 8000b60:	200003cc 	.word	0x200003cc
 8000b64:	20000320 	.word	0x20000320
 8000b68:	200001f0 	.word	0x200001f0
 8000b6c:	40000400 	.word	0x40000400
 8000b70:	50000c00 	.word	0x50000c00
 8000b74:	200003c4 	.word	0x200003c4
 8000b78:	08008300 	.word	0x08008300
 8000b7c:	08008320 	.word	0x08008320
 8000b80:	200003dc 	.word	0x200003dc
 8000b84:	200003f4 	.word	0x200003f4
		}else if(irscan.scl==1){
 8000b88:	4b49      	ldr	r3, [pc, #292]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8000b8a:	785b      	ldrb	r3, [r3, #1]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d108      	bne.n	8000ba2 <HAL_TIM_PeriodElapsedCallback+0x37a>
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcDMAbuf, 12);
 8000b90:	4948      	ldr	r1, [pc, #288]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x48c>)
 8000b92:	4b49      	ldr	r3, [pc, #292]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x490>)
 8000b94:	220c      	movs	r2, #12
 8000b96:	0018      	movs	r0, r3
 8000b98:	f001 fede 	bl	8002958 <HAL_ADC_Start_DMA>
			irscan.scl=2;
 8000b9c:	4b44      	ldr	r3, [pc, #272]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	705a      	strb	r2, [r3, #1]
		}

		if (irscan.scl==0) {
 8000ba2:	4b43      	ldr	r3, [pc, #268]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8000ba4:	785b      	ldrb	r3, [r3, #1]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d10c      	bne.n	8000bc4 <HAL_TIM_PeriodElapsedCallback+0x39c>
			irscan.ledN++;
 8000baa:	4b41      	ldr	r3, [pc, #260]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	4b3f      	ldr	r3, [pc, #252]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8000bb4:	701a      	strb	r2, [r3, #0]
			if(irscan.ledN>7){irscan.ledN=0;}
 8000bb6:	4b3e      	ldr	r3, [pc, #248]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b07      	cmp	r3, #7
 8000bbc:	d902      	bls.n	8000bc4 <HAL_TIM_PeriodElapsedCallback+0x39c>
 8000bbe:	4b3c      	ldr	r3, [pc, #240]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
		//adcConfig.Channel=irscan.ledN;
		//HAL_ADC_ConfigChannel(&hadc1,&adcConfig);
		//hadc1.Instance->CHSELR &= ~(0x1F);  // Clear the current channel selection
		//hadc1.Instance->CHSELR |= (irscan.ledN);  // Set the new channel

		if(irscan.count>22){
 8000bc4:	4b3a      	ldr	r3, [pc, #232]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8000bc6:	789b      	ldrb	r3, [r3, #2]
 8000bc8:	2b16      	cmp	r3, #22
 8000bca:	d911      	bls.n	8000bf0 <HAL_TIM_PeriodElapsedCallback+0x3c8>
			irscan.ledN=0;
 8000bcc:	4b38      	ldr	r3, [pc, #224]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
			irscan.scl=0;
 8000bd2:	4b37      	ldr	r3, [pc, #220]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	705a      	strb	r2, [r3, #1]
			irscan.count=0;
 8000bd8:	4b35      	ldr	r3, [pc, #212]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	709a      	strb	r2, [r3, #2]
			HAL_TIM_Base_Stop(htim);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	0018      	movs	r0, r3
 8000be2:	f006 f955 	bl	8006e90 <HAL_TIM_Base_Stop>
			__HAL_TIM_SET_COUNTER(htim,0);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2200      	movs	r2, #0
 8000bec:	625a      	str	r2, [r3, #36]	; 0x24
 8000bee:	e005      	b.n	8000bfc <HAL_TIM_PeriodElapsedCallback+0x3d4>
		}else{irscan.count++;}
 8000bf0:	4b2f      	ldr	r3, [pc, #188]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8000bf2:	789b      	ldrb	r3, [r3, #2]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	4b2d      	ldr	r3, [pc, #180]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8000bfa:	709a      	strb	r2, [r3, #2]

	}

	if (htim->Instance == TIM14){
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a2e      	ldr	r2, [pc, #184]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x494>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d14f      	bne.n	8000ca6 <HAL_TIM_PeriodElapsedCallback+0x47e>
		if(sonarVars.mode==1){
 8000c06:	4b2e      	ldr	r3, [pc, #184]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d113      	bne.n	8000c36 <HAL_TIM_PeriodElapsedCallback+0x40e>
			HAL_GPIO_WritePin(TRIG_SONAR_GPIO_Port, TRIG_SONAR_Pin, 1);
 8000c0e:	2380      	movs	r3, #128	; 0x80
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	482c      	ldr	r0, [pc, #176]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	0019      	movs	r1, r3
 8000c18:	f003 f903 	bl	8003e22 <HAL_GPIO_WritePin>
			sonarVars.count--;
 8000c1c:	4b28      	ldr	r3, [pc, #160]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	1e5a      	subs	r2, r3, #1
 8000c22:	4b27      	ldr	r3, [pc, #156]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8000c24:	601a      	str	r2, [r3, #0]
			if(sonarVars.count<1){
 8000c26:	4b26      	ldr	r3, [pc, #152]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	dc3b      	bgt.n	8000ca6 <HAL_TIM_PeriodElapsedCallback+0x47e>
				sonarVars.mode=2;
 8000c2e:	4b24      	ldr	r3, [pc, #144]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8000c30:	2202      	movs	r2, #2
 8000c32:	605a      	str	r2, [r3, #4]
		}


	}

}
 8000c34:	e037      	b.n	8000ca6 <HAL_TIM_PeriodElapsedCallback+0x47e>
		}else if(sonarVars.mode==2){
 8000c36:	4b22      	ldr	r3, [pc, #136]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d112      	bne.n	8000c64 <HAL_TIM_PeriodElapsedCallback+0x43c>
			sonarVars.mode=0;
 8000c3e:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	605a      	str	r2, [r3, #4]
			HAL_TIM_Base_Stop(htim);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	0018      	movs	r0, r3
 8000c48:	f006 f922 	bl	8006e90 <HAL_TIM_Base_Stop>
			__HAL_TIM_SET_COUNTER(htim,0);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2200      	movs	r2, #0
 8000c52:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_GPIO_WritePin(TRIG_SONAR_GPIO_Port, TRIG_SONAR_Pin, 0);
 8000c54:	2380      	movs	r3, #128	; 0x80
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	481a      	ldr	r0, [pc, #104]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	0019      	movs	r1, r3
 8000c5e:	f003 f8e0 	bl	8003e22 <HAL_GPIO_WritePin>
}
 8000c62:	e020      	b.n	8000ca6 <HAL_TIM_PeriodElapsedCallback+0x47e>
			sonarVars.count++;
 8000c64:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	1c5a      	adds	r2, r3, #1
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8000c6c:	601a      	str	r2, [r3, #0]
			if(sonarVars.trig==1){
 8000c6e:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d117      	bne.n	8000ca6 <HAL_TIM_PeriodElapsedCallback+0x47e>
				HAL_GPIO_WritePin(TRIG_SONAR_GPIO_Port, TRIG_SONAR_Pin, 0);
 8000c76:	2380      	movs	r3, #128	; 0x80
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	4812      	ldr	r0, [pc, #72]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x49c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	0019      	movs	r1, r3
 8000c80:	f003 f8cf 	bl	8003e22 <HAL_GPIO_WritePin>
				HAL_TIM_Base_Stop(htim);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	0018      	movs	r0, r3
 8000c88:	f006 f902 	bl	8006e90 <HAL_TIM_Base_Stop>
				sonarVars.reading=sonarVars.count;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8000c92:	60da      	str	r2, [r3, #12]
				sonarVars.count=0;
 8000c94:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
				sonarVars.mode=0;
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	605a      	str	r2, [r3, #4]
				sonarVars.trig=0;
 8000ca0:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x498>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b002      	add	sp, #8
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	200003c4 	.word	0x200003c4
 8000cb4:	200003dc 	.word	0x200003dc
 8000cb8:	20000028 	.word	0x20000028
 8000cbc:	40002000 	.word	0x40002000
 8000cc0:	200003cc 	.word	0x200003cc
 8000cc4:	50000400 	.word	0x50000400

08000cc8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]

}
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b002      	add	sp, #8
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	0002      	movs	r2, r0
 8000ce0:	1dbb      	adds	r3, r7, #6
 8000ce2:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin==GPIO_PIN_15){
 8000ce4:	1dbb      	adds	r3, r7, #6
 8000ce6:	881a      	ldrh	r2, [r3, #0]
 8000ce8:	2380      	movs	r3, #128	; 0x80
 8000cea:	021b      	lsls	r3, r3, #8
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d105      	bne.n	8000cfc <HAL_GPIO_EXTI_Falling_Callback+0x24>
		if(firstBoot_flag==1){
 8000cf0:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <HAL_GPIO_EXTI_Falling_Callback+0x40>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d101      	bne.n	8000cfc <HAL_GPIO_EXTI_Falling_Callback+0x24>
			BQ24295_SetShippingMode();
 8000cf8:	f7ff fbb4 	bl	8000464 <BQ24295_SetShippingMode>
		}
	}
	if(GPIO_Pin==GPIO_PIN_10){
 8000cfc:	1dbb      	adds	r3, r7, #6
 8000cfe:	881a      	ldrh	r2, [r3, #0]
 8000d00:	2380      	movs	r3, #128	; 0x80
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d102      	bne.n	8000d0e <HAL_GPIO_EXTI_Falling_Callback+0x36>
		sonarVars.trig=1;
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <HAL_GPIO_EXTI_Falling_Callback+0x44>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	609a      	str	r2, [r3, #8]
	}

}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b002      	add	sp, #8
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	20000430 	.word	0x20000430
 8000d1c:	200003cc 	.word	0x200003cc

08000d20 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	0002      	movs	r2, r0
 8000d28:	1dbb      	adds	r3, r7, #6
 8000d2a:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin==GPIO_PIN_10){
 8000d2c:	1dbb      	adds	r3, r7, #6
 8000d2e:	881a      	ldrh	r2, [r3, #0]
 8000d30:	2380      	movs	r3, #128	; 0x80
 8000d32:	00db      	lsls	r3, r3, #3
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d113      	bne.n	8000d60 <HAL_GPIO_EXTI_Rising_Callback+0x40>
		sonarVars.count=0;
 8000d38:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <HAL_GPIO_EXTI_Rising_Callback+0x48>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
		sonarVars.mode=3;
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <HAL_GPIO_EXTI_Rising_Callback+0x48>)
 8000d40:	2203      	movs	r2, #3
 8000d42:	605a      	str	r2, [r3, #4]
		if(HAL_TIM_Base_Start_IT(&htim14)==1){HAL_GPIO_WritePin(TRIG_SONAR_GPIO_Port, TRIG_SONAR_Pin, 0);};
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <HAL_GPIO_EXTI_Rising_Callback+0x4c>)
 8000d46:	0018      	movs	r0, r3
 8000d48:	f006 f8c8 	bl	8006edc <HAL_TIM_Base_Start_IT>
 8000d4c:	0003      	movs	r3, r0
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d106      	bne.n	8000d60 <HAL_GPIO_EXTI_Rising_Callback+0x40>
 8000d52:	2380      	movs	r3, #128	; 0x80
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <HAL_GPIO_EXTI_Rising_Callback+0x50>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	0019      	movs	r1, r3
 8000d5c:	f003 f861 	bl	8003e22 <HAL_GPIO_WritePin>
	}
}
 8000d60:	46c0      	nop			; (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b002      	add	sp, #8
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	200003cc 	.word	0x200003cc
 8000d6c:	20000320 	.word	0x20000320
 8000d70:	50000400 	.word	0x50000400

08000d74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d74:	b590      	push	{r4, r7, lr}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d7a:	f001 fa43 	bl	8002204 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d7e:	f000 f8b5 	bl	8000eec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d82:	f000 fd2f 	bl	80017e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d86:	f000 fd0f 	bl	80017a8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000d8a:	f000 f909 	bl	8000fa0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000d8e:	f000 fa11 	bl	80011b4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000d92:	f000 fa4f 	bl	8001234 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000d96:	f000 fa8d 	bl	80012b4 <MX_TIM1_Init>
  MX_TIM15_Init();
 8000d9a:	f000 fc61 	bl	8001660 <MX_TIM15_Init>
  MX_TIM3_Init();
 8000d9e:	f000 fb73 	bl	8001488 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000da2:	f000 fbc5 	bl	8001530 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000da6:	f000 fbfd 	bl	80015a4 <MX_TIM7_Init>
  MX_TIM14_Init();
 8000daa:	f000 fc35 	bl	8001618 <MX_TIM14_Init>

  //DMA for ADC
  //HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcDMAbuf, 1);

  //enable i2c
  HAL_I2C_Init(&hi2c2);
 8000dae:	4b44      	ldr	r3, [pc, #272]	; (8000ec0 <main+0x14c>)
 8000db0:	0018      	movs	r0, r3
 8000db2:	f003 f899 	bl	8003ee8 <HAL_I2C_Init>
  HAL_I2C_EnableListen_IT(&hi2c2);
 8000db6:	4b42      	ldr	r3, [pc, #264]	; (8000ec0 <main+0x14c>)
 8000db8:	0018      	movs	r0, r3
 8000dba:	f003 fd4b 	bl	8004854 <HAL_I2C_EnableListen_IT>

  //enable motor PWM
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000dbe:	4b41      	ldr	r3, [pc, #260]	; (8000ec4 <main+0x150>)
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f006 f938 	bl	8007038 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000dc8:	4b3e      	ldr	r3, [pc, #248]	; (8000ec4 <main+0x150>)
 8000dca:	2104      	movs	r1, #4
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f006 f933 	bl	8007038 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000dd2:	4b3c      	ldr	r3, [pc, #240]	; (8000ec4 <main+0x150>)
 8000dd4:	2108      	movs	r1, #8
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f006 f92e 	bl	8007038 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000ddc:	4b39      	ldr	r3, [pc, #228]	; (8000ec4 <main+0x150>)
 8000dde:	210c      	movs	r1, #12
 8000de0:	0018      	movs	r0, r3
 8000de2:	f006 f929 	bl	8007038 <HAL_TIM_PWM_Start>

  //enable timer interrupts
  HAL_TIM_Base_Start_IT(&htim3);
 8000de6:	4b38      	ldr	r3, [pc, #224]	; (8000ec8 <main+0x154>)
 8000de8:	0018      	movs	r0, r3
 8000dea:	f006 f877 	bl	8006edc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8000dee:	4b37      	ldr	r3, [pc, #220]	; (8000ecc <main+0x158>)
 8000df0:	0018      	movs	r0, r3
 8000df2:	f006 f873 	bl	8006edc <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim14);

  //calibrate ADC
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000df6:	4b36      	ldr	r3, [pc, #216]	; (8000ed0 <main+0x15c>)
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f002 fa15 	bl	8003228 <HAL_ADCEx_Calibration_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  input1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
 8000dfe:	1dfc      	adds	r4, r7, #7
 8000e00:	2380      	movs	r3, #128	; 0x80
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	4a33      	ldr	r2, [pc, #204]	; (8000ed4 <main+0x160>)
 8000e06:	0019      	movs	r1, r3
 8000e08:	0010      	movs	r0, r2
 8000e0a:	f002 ffed 	bl	8003de8 <HAL_GPIO_ReadPin>
 8000e0e:	0003      	movs	r3, r0
 8000e10:	7023      	strb	r3, [r4, #0]

	  if(firstBoot_flag==0){
 8000e12:	4b31      	ldr	r3, [pc, #196]	; (8000ed8 <main+0x164>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d10f      	bne.n	8000e3a <main+0xc6>
		  if(HAL_GetTick()>1000){
 8000e1a:	f001 fa6f 	bl	80022fc <HAL_GetTick>
 8000e1e:	0002      	movs	r2, r0
 8000e20:	23fa      	movs	r3, #250	; 0xfa
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d908      	bls.n	8000e3a <main+0xc6>

			  HAL_GPIO_WritePin(EN_ESP_GPIO_Port, EN_ESP_Pin, 1);
 8000e28:	4b2c      	ldr	r3, [pc, #176]	; (8000edc <main+0x168>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2180      	movs	r1, #128	; 0x80
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f002 fff7 	bl	8003e22 <HAL_GPIO_WritePin>
			  firstBoot_flag=1;
 8000e34:	4b28      	ldr	r3, [pc, #160]	; (8000ed8 <main+0x164>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  if(i2cCheck_flag==1){
 8000e3a:	4b29      	ldr	r3, [pc, #164]	; (8000ee0 <main+0x16c>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d136      	bne.n	8000eb2 <main+0x13e>
			if(i2cReg.ec.irleds==0){
 8000e44:	4b27      	ldr	r3, [pc, #156]	; (8000ee4 <main+0x170>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2202      	movs	r2, #2
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d12f      	bne.n	8000eb2 <main+0x13e>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,0);
 8000e52:	4b22      	ldr	r3, [pc, #136]	; (8000edc <main+0x168>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	2108      	movs	r1, #8
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f002 ffe2 	bl	8003e22 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD,GPIO_PIN_0,0);
 8000e5e:	4b22      	ldr	r3, [pc, #136]	; (8000ee8 <main+0x174>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	2101      	movs	r1, #1
 8000e64:	0018      	movs	r0, r3
 8000e66:	f002 ffdc 	bl	8003e22 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD,GPIO_PIN_1,0);
 8000e6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ee8 <main+0x174>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2102      	movs	r1, #2
 8000e70:	0018      	movs	r0, r3
 8000e72:	f002 ffd6 	bl	8003e22 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,0);
 8000e76:	4b1c      	ldr	r3, [pc, #112]	; (8000ee8 <main+0x174>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2104      	movs	r1, #4
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f002 ffd0 	bl	8003e22 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD,GPIO_PIN_3,0);
 8000e82:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <main+0x174>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	2108      	movs	r1, #8
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f002 ffca 	bl	8003e22 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD,GPIO_PIN_4,0);
 8000e8e:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <main+0x174>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	2110      	movs	r1, #16
 8000e94:	0018      	movs	r0, r3
 8000e96:	f002 ffc4 	bl	8003e22 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,0);
 8000e9a:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <main+0x174>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2120      	movs	r1, #32
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f002 ffbe 	bl	8003e22 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD,GPIO_PIN_6,0);
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <main+0x174>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2140      	movs	r1, #64	; 0x40
 8000eac:	0018      	movs	r0, r3
 8000eae:	f002 ffb8 	bl	8003e22 <HAL_GPIO_WritePin>
	  }

	  //HAL_TIM_Base_Start(&htim7);

	  //HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,1);
	  HAL_Delay(1);
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f001 fa2c 	bl	8002310 <HAL_Delay>
	  }else{
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, (uint8_t)abs(i2cReg.m2.data)<<1);
	  }
*/
	  PollToggleButton();
 8000eb8:	f7ff fa98 	bl	80003ec <PollToggleButton>
	  input1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
 8000ebc:	e79f      	b.n	8000dfe <main+0x8a>
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	2000016c 	.word	0x2000016c
 8000ec4:	200001f0 	.word	0x200001f0
 8000ec8:	2000023c 	.word	0x2000023c
 8000ecc:	20000288 	.word	0x20000288
 8000ed0:	20000028 	.word	0x20000028
 8000ed4:	50000800 	.word	0x50000800
 8000ed8:	20000430 	.word	0x20000430
 8000edc:	50000400 	.word	0x50000400
 8000ee0:	20000431 	.word	0x20000431
 8000ee4:	200003b8 	.word	0x200003b8
 8000ee8:	50000c00 	.word	0x50000c00

08000eec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eec:	b590      	push	{r4, r7, lr}
 8000eee:	b093      	sub	sp, #76	; 0x4c
 8000ef0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef2:	2414      	movs	r4, #20
 8000ef4:	193b      	adds	r3, r7, r4
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	2334      	movs	r3, #52	; 0x34
 8000efa:	001a      	movs	r2, r3
 8000efc:	2100      	movs	r1, #0
 8000efe:	f007 f9c7 	bl	8008290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	0018      	movs	r0, r3
 8000f06:	2310      	movs	r3, #16
 8000f08:	001a      	movs	r2, r3
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	f007 f9c0 	bl	8008290 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f10:	2380      	movs	r3, #128	; 0x80
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	0018      	movs	r0, r3
 8000f16:	f005 f955 	bl	80061c4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f1a:	193b      	adds	r3, r7, r4
 8000f1c:	2202      	movs	r2, #2
 8000f1e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f20:	193b      	adds	r3, r7, r4
 8000f22:	2280      	movs	r2, #128	; 0x80
 8000f24:	0052      	lsls	r2, r2, #1
 8000f26:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000f28:	0021      	movs	r1, r4
 8000f2a:	187b      	adds	r3, r7, r1
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f30:	187b      	adds	r3, r7, r1
 8000f32:	2240      	movs	r2, #64	; 0x40
 8000f34:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f36:	187b      	adds	r3, r7, r1
 8000f38:	2202      	movs	r2, #2
 8000f3a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f3c:	187b      	adds	r3, r7, r1
 8000f3e:	2202      	movs	r2, #2
 8000f40:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000f42:	187b      	adds	r3, r7, r1
 8000f44:	2200      	movs	r2, #0
 8000f46:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000f48:	187b      	adds	r3, r7, r1
 8000f4a:	2208      	movs	r2, #8
 8000f4c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f4e:	187b      	adds	r3, r7, r1
 8000f50:	2280      	movs	r2, #128	; 0x80
 8000f52:	0292      	lsls	r2, r2, #10
 8000f54:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f56:	187b      	adds	r3, r7, r1
 8000f58:	2280      	movs	r2, #128	; 0x80
 8000f5a:	0592      	lsls	r2, r2, #22
 8000f5c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f5e:	187b      	adds	r3, r7, r1
 8000f60:	0018      	movs	r0, r3
 8000f62:	f005 f96f 	bl	8006244 <HAL_RCC_OscConfig>
 8000f66:	1e03      	subs	r3, r0, #0
 8000f68:	d001      	beq.n	8000f6e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f6a:	f000 fd63 	bl	8001a34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	2207      	movs	r2, #7
 8000f72:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	2202      	movs	r2, #2
 8000f78:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2102      	movs	r1, #2
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f005 fc6a 	bl	8006864 <HAL_RCC_ClockConfig>
 8000f90:	1e03      	subs	r3, r0, #0
 8000f92:	d001      	beq.n	8000f98 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000f94:	f000 fd4e 	bl	8001a34 <Error_Handler>
  }
}
 8000f98:	46c0      	nop			; (mov r8, r8)
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	b013      	add	sp, #76	; 0x4c
 8000f9e:	bd90      	pop	{r4, r7, pc}

08000fa0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	0018      	movs	r0, r3
 8000faa:	230c      	movs	r3, #12
 8000fac:	001a      	movs	r2, r3
 8000fae:	2100      	movs	r1, #0
 8000fb0:	f007 f96e 	bl	8008290 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fb4:	4b72      	ldr	r3, [pc, #456]	; (8001180 <MX_ADC1_Init+0x1e0>)
 8000fb6:	4a73      	ldr	r2, [pc, #460]	; (8001184 <MX_ADC1_Init+0x1e4>)
 8000fb8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fba:	4b71      	ldr	r3, [pc, #452]	; (8001180 <MX_ADC1_Init+0x1e0>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fc0:	4b6f      	ldr	r3, [pc, #444]	; (8001180 <MX_ADC1_Init+0x1e0>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc6:	4b6e      	ldr	r3, [pc, #440]	; (8001180 <MX_ADC1_Init+0x1e0>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 8000fcc:	4b6c      	ldr	r3, [pc, #432]	; (8001180 <MX_ADC1_Init+0x1e0>)
 8000fce:	2280      	movs	r2, #128	; 0x80
 8000fd0:	0612      	lsls	r2, r2, #24
 8000fd2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000fd4:	4b6a      	ldr	r3, [pc, #424]	; (8001180 <MX_ADC1_Init+0x1e0>)
 8000fd6:	2208      	movs	r2, #8
 8000fd8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fda:	4b69      	ldr	r3, [pc, #420]	; (8001180 <MX_ADC1_Init+0x1e0>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000fe0:	4b67      	ldr	r3, [pc, #412]	; (8001180 <MX_ADC1_Init+0x1e0>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fe6:	4b66      	ldr	r3, [pc, #408]	; (8001180 <MX_ADC1_Init+0x1e0>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000fec:	4b64      	ldr	r3, [pc, #400]	; (8001180 <MX_ADC1_Init+0x1e0>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ff2:	4b63      	ldr	r3, [pc, #396]	; (8001180 <MX_ADC1_Init+0x1e0>)
 8000ff4:	2220      	movs	r2, #32
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ffa:	4b61      	ldr	r3, [pc, #388]	; (8001180 <MX_ADC1_Init+0x1e0>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001000:	4b5f      	ldr	r3, [pc, #380]	; (8001180 <MX_ADC1_Init+0x1e0>)
 8001002:	2200      	movs	r2, #0
 8001004:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001006:	4b5e      	ldr	r3, [pc, #376]	; (8001180 <MX_ADC1_Init+0x1e0>)
 8001008:	222c      	movs	r2, #44	; 0x2c
 800100a:	2100      	movs	r1, #0
 800100c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800100e:	4b5c      	ldr	r3, [pc, #368]	; (8001180 <MX_ADC1_Init+0x1e0>)
 8001010:	2200      	movs	r2, #0
 8001012:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_39CYCLES_5;
 8001014:	4b5a      	ldr	r3, [pc, #360]	; (8001180 <MX_ADC1_Init+0x1e0>)
 8001016:	2205      	movs	r2, #5
 8001018:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800101a:	4b59      	ldr	r3, [pc, #356]	; (8001180 <MX_ADC1_Init+0x1e0>)
 800101c:	223c      	movs	r2, #60	; 0x3c
 800101e:	2100      	movs	r1, #0
 8001020:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001022:	4b57      	ldr	r3, [pc, #348]	; (8001180 <MX_ADC1_Init+0x1e0>)
 8001024:	2200      	movs	r2, #0
 8001026:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001028:	4b55      	ldr	r3, [pc, #340]	; (8001180 <MX_ADC1_Init+0x1e0>)
 800102a:	0018      	movs	r0, r3
 800102c:	f001 faec 	bl	8002608 <HAL_ADC_Init>
 8001030:	1e03      	subs	r3, r0, #0
 8001032:	d001      	beq.n	8001038 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001034:	f000 fcfe 	bl	8001a34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	2201      	movs	r2, #1
 800103c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2201      	movs	r2, #1
 8001042:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001044:	1d3a      	adds	r2, r7, #4
 8001046:	4b4e      	ldr	r3, [pc, #312]	; (8001180 <MX_ADC1_Init+0x1e0>)
 8001048:	0011      	movs	r1, r2
 800104a:	0018      	movs	r0, r3
 800104c:	f001 fd22 	bl	8002a94 <HAL_ADC_ConfigChannel>
 8001050:	1e03      	subs	r3, r0, #0
 8001052:	d001      	beq.n	8001058 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8001054:	f000 fcee 	bl	8001a34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	4a4b      	ldr	r2, [pc, #300]	; (8001188 <MX_ADC1_Init+0x1e8>)
 800105c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800105e:	1d3a      	adds	r2, r7, #4
 8001060:	4b47      	ldr	r3, [pc, #284]	; (8001180 <MX_ADC1_Init+0x1e0>)
 8001062:	0011      	movs	r1, r2
 8001064:	0018      	movs	r0, r3
 8001066:	f001 fd15 	bl	8002a94 <HAL_ADC_ConfigChannel>
 800106a:	1e03      	subs	r3, r0, #0
 800106c:	d001      	beq.n	8001072 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800106e:	f000 fce1 	bl	8001a34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	4a45      	ldr	r2, [pc, #276]	; (800118c <MX_ADC1_Init+0x1ec>)
 8001076:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001078:	1d3a      	adds	r2, r7, #4
 800107a:	4b41      	ldr	r3, [pc, #260]	; (8001180 <MX_ADC1_Init+0x1e0>)
 800107c:	0011      	movs	r1, r2
 800107e:	0018      	movs	r0, r3
 8001080:	f001 fd08 	bl	8002a94 <HAL_ADC_ConfigChannel>
 8001084:	1e03      	subs	r3, r0, #0
 8001086:	d001      	beq.n	800108c <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8001088:	f000 fcd4 	bl	8001a34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	4a40      	ldr	r2, [pc, #256]	; (8001190 <MX_ADC1_Init+0x1f0>)
 8001090:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001092:	1d3a      	adds	r2, r7, #4
 8001094:	4b3a      	ldr	r3, [pc, #232]	; (8001180 <MX_ADC1_Init+0x1e0>)
 8001096:	0011      	movs	r1, r2
 8001098:	0018      	movs	r0, r3
 800109a:	f001 fcfb 	bl	8002a94 <HAL_ADC_ConfigChannel>
 800109e:	1e03      	subs	r3, r0, #0
 80010a0:	d001      	beq.n	80010a6 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 80010a2:	f000 fcc7 	bl	8001a34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	4a3a      	ldr	r2, [pc, #232]	; (8001194 <MX_ADC1_Init+0x1f4>)
 80010aa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ac:	1d3a      	adds	r2, r7, #4
 80010ae:	4b34      	ldr	r3, [pc, #208]	; (8001180 <MX_ADC1_Init+0x1e0>)
 80010b0:	0011      	movs	r1, r2
 80010b2:	0018      	movs	r0, r3
 80010b4:	f001 fcee 	bl	8002a94 <HAL_ADC_ConfigChannel>
 80010b8:	1e03      	subs	r3, r0, #0
 80010ba:	d001      	beq.n	80010c0 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 80010bc:	f000 fcba 	bl	8001a34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	4a35      	ldr	r2, [pc, #212]	; (8001198 <MX_ADC1_Init+0x1f8>)
 80010c4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c6:	1d3a      	adds	r2, r7, #4
 80010c8:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <MX_ADC1_Init+0x1e0>)
 80010ca:	0011      	movs	r1, r2
 80010cc:	0018      	movs	r0, r3
 80010ce:	f001 fce1 	bl	8002a94 <HAL_ADC_ConfigChannel>
 80010d2:	1e03      	subs	r3, r0, #0
 80010d4:	d001      	beq.n	80010da <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 80010d6:	f000 fcad 	bl	8001a34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	4a2f      	ldr	r2, [pc, #188]	; (800119c <MX_ADC1_Init+0x1fc>)
 80010de:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e0:	1d3a      	adds	r2, r7, #4
 80010e2:	4b27      	ldr	r3, [pc, #156]	; (8001180 <MX_ADC1_Init+0x1e0>)
 80010e4:	0011      	movs	r1, r2
 80010e6:	0018      	movs	r0, r3
 80010e8:	f001 fcd4 	bl	8002a94 <HAL_ADC_ConfigChannel>
 80010ec:	1e03      	subs	r3, r0, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80010f0:	f000 fca0 	bl	8001a34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	4a2a      	ldr	r2, [pc, #168]	; (80011a0 <MX_ADC1_Init+0x200>)
 80010f8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fa:	1d3a      	adds	r2, r7, #4
 80010fc:	4b20      	ldr	r3, [pc, #128]	; (8001180 <MX_ADC1_Init+0x1e0>)
 80010fe:	0011      	movs	r1, r2
 8001100:	0018      	movs	r0, r3
 8001102:	f001 fcc7 	bl	8002a94 <HAL_ADC_ConfigChannel>
 8001106:	1e03      	subs	r3, r0, #0
 8001108:	d001      	beq.n	800110e <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 800110a:	f000 fc93 	bl	8001a34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	4a24      	ldr	r2, [pc, #144]	; (80011a4 <MX_ADC1_Init+0x204>)
 8001112:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001114:	1d3a      	adds	r2, r7, #4
 8001116:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <MX_ADC1_Init+0x1e0>)
 8001118:	0011      	movs	r1, r2
 800111a:	0018      	movs	r0, r3
 800111c:	f001 fcba 	bl	8002a94 <HAL_ADC_ConfigChannel>
 8001120:	1e03      	subs	r3, r0, #0
 8001122:	d001      	beq.n	8001128 <MX_ADC1_Init+0x188>
  {
    Error_Handler();
 8001124:	f000 fc86 	bl	8001a34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	4a1f      	ldr	r2, [pc, #124]	; (80011a8 <MX_ADC1_Init+0x208>)
 800112c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800112e:	1d3a      	adds	r2, r7, #4
 8001130:	4b13      	ldr	r3, [pc, #76]	; (8001180 <MX_ADC1_Init+0x1e0>)
 8001132:	0011      	movs	r1, r2
 8001134:	0018      	movs	r0, r3
 8001136:	f001 fcad 	bl	8002a94 <HAL_ADC_ConfigChannel>
 800113a:	1e03      	subs	r3, r0, #0
 800113c:	d001      	beq.n	8001142 <MX_ADC1_Init+0x1a2>
  {
    Error_Handler();
 800113e:	f000 fc79 	bl	8001a34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	4a19      	ldr	r2, [pc, #100]	; (80011ac <MX_ADC1_Init+0x20c>)
 8001146:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001148:	1d3a      	adds	r2, r7, #4
 800114a:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <MX_ADC1_Init+0x1e0>)
 800114c:	0011      	movs	r1, r2
 800114e:	0018      	movs	r0, r3
 8001150:	f001 fca0 	bl	8002a94 <HAL_ADC_ConfigChannel>
 8001154:	1e03      	subs	r3, r0, #0
 8001156:	d001      	beq.n	800115c <MX_ADC1_Init+0x1bc>
  {
    Error_Handler();
 8001158:	f000 fc6c 	bl	8001a34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	4a14      	ldr	r2, [pc, #80]	; (80011b0 <MX_ADC1_Init+0x210>)
 8001160:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001162:	1d3a      	adds	r2, r7, #4
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <MX_ADC1_Init+0x1e0>)
 8001166:	0011      	movs	r1, r2
 8001168:	0018      	movs	r0, r3
 800116a:	f001 fc93 	bl	8002a94 <HAL_ADC_ConfigChannel>
 800116e:	1e03      	subs	r3, r0, #0
 8001170:	d001      	beq.n	8001176 <MX_ADC1_Init+0x1d6>
  {
    Error_Handler();
 8001172:	f000 fc5f 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	46bd      	mov	sp, r7
 800117a:	b004      	add	sp, #16
 800117c:	bd80      	pop	{r7, pc}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	20000028 	.word	0x20000028
 8001184:	40012400 	.word	0x40012400
 8001188:	04000002 	.word	0x04000002
 800118c:	08000004 	.word	0x08000004
 8001190:	0c000008 	.word	0x0c000008
 8001194:	10000010 	.word	0x10000010
 8001198:	14000020 	.word	0x14000020
 800119c:	18000040 	.word	0x18000040
 80011a0:	1c000080 	.word	0x1c000080
 80011a4:	20000100 	.word	0x20000100
 80011a8:	24000200 	.word	0x24000200
 80011ac:	44020000 	.word	0x44020000
 80011b0:	48040000 	.word	0x48040000

080011b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <MX_I2C1_Init+0x74>)
 80011ba:	4a1c      	ldr	r2, [pc, #112]	; (800122c <MX_I2C1_Init+0x78>)
 80011bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 80011be:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <MX_I2C1_Init+0x74>)
 80011c0:	4a1b      	ldr	r2, [pc, #108]	; (8001230 <MX_I2C1_Init+0x7c>)
 80011c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 2;
 80011c4:	4b18      	ldr	r3, [pc, #96]	; (8001228 <MX_I2C1_Init+0x74>)
 80011c6:	2202      	movs	r2, #2
 80011c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <MX_I2C1_Init+0x74>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d0:	4b15      	ldr	r3, [pc, #84]	; (8001228 <MX_I2C1_Init+0x74>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <MX_I2C1_Init+0x74>)
 80011d8:	2200      	movs	r2, #0
 80011da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <MX_I2C1_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <MX_I2C1_Init+0x74>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <MX_I2C1_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <MX_I2C1_Init+0x74>)
 80011f0:	0018      	movs	r0, r3
 80011f2:	f002 fe79 	bl	8003ee8 <HAL_I2C_Init>
 80011f6:	1e03      	subs	r3, r0, #0
 80011f8:	d001      	beq.n	80011fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011fa:	f000 fc1b 	bl	8001a34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <MX_I2C1_Init+0x74>)
 8001200:	2100      	movs	r1, #0
 8001202:	0018      	movs	r0, r3
 8001204:	f004 ff46 	bl	8006094 <HAL_I2CEx_ConfigAnalogFilter>
 8001208:	1e03      	subs	r3, r0, #0
 800120a:	d001      	beq.n	8001210 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800120c:	f000 fc12 	bl	8001a34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <MX_I2C1_Init+0x74>)
 8001212:	2100      	movs	r1, #0
 8001214:	0018      	movs	r0, r3
 8001216:	f004 ff89 	bl	800612c <HAL_I2CEx_ConfigDigitalFilter>
 800121a:	1e03      	subs	r3, r0, #0
 800121c:	d001      	beq.n	8001222 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800121e:	f000 fc09 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	200000e8 	.word	0x200000e8
 800122c:	40005400 	.word	0x40005400
 8001230:	00602173 	.word	0x00602173

08001234 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001238:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <MX_I2C2_Init+0x74>)
 800123a:	4a1c      	ldr	r2, [pc, #112]	; (80012ac <MX_I2C2_Init+0x78>)
 800123c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00602173;
 800123e:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <MX_I2C2_Init+0x74>)
 8001240:	4a1b      	ldr	r2, [pc, #108]	; (80012b0 <MX_I2C2_Init+0x7c>)
 8001242:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 2;
 8001244:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <MX_I2C2_Init+0x74>)
 8001246:	2202      	movs	r2, #2
 8001248:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800124a:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <MX_I2C2_Init+0x74>)
 800124c:	2201      	movs	r2, #1
 800124e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001250:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <MX_I2C2_Init+0x74>)
 8001252:	2200      	movs	r2, #0
 8001254:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001256:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <MX_I2C2_Init+0x74>)
 8001258:	2200      	movs	r2, #0
 800125a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <MX_I2C2_Init+0x74>)
 800125e:	2200      	movs	r2, #0
 8001260:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <MX_I2C2_Init+0x74>)
 8001264:	2200      	movs	r2, #0
 8001266:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <MX_I2C2_Init+0x74>)
 800126a:	2200      	movs	r2, #0
 800126c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <MX_I2C2_Init+0x74>)
 8001270:	0018      	movs	r0, r3
 8001272:	f002 fe39 	bl	8003ee8 <HAL_I2C_Init>
 8001276:	1e03      	subs	r3, r0, #0
 8001278:	d001      	beq.n	800127e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800127a:	f000 fbdb 	bl	8001a34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800127e:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <MX_I2C2_Init+0x74>)
 8001280:	2100      	movs	r1, #0
 8001282:	0018      	movs	r0, r3
 8001284:	f004 ff06 	bl	8006094 <HAL_I2CEx_ConfigAnalogFilter>
 8001288:	1e03      	subs	r3, r0, #0
 800128a:	d001      	beq.n	8001290 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800128c:	f000 fbd2 	bl	8001a34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <MX_I2C2_Init+0x74>)
 8001292:	2100      	movs	r1, #0
 8001294:	0018      	movs	r0, r3
 8001296:	f004 ff49 	bl	800612c <HAL_I2CEx_ConfigDigitalFilter>
 800129a:	1e03      	subs	r3, r0, #0
 800129c:	d001      	beq.n	80012a2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800129e:	f000 fbc9 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	2000016c 	.word	0x2000016c
 80012ac:	40005800 	.word	0x40005800
 80012b0:	00602173 	.word	0x00602173

080012b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b09c      	sub	sp, #112	; 0x70
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ba:	2360      	movs	r3, #96	; 0x60
 80012bc:	18fb      	adds	r3, r7, r3
 80012be:	0018      	movs	r0, r3
 80012c0:	2310      	movs	r3, #16
 80012c2:	001a      	movs	r2, r3
 80012c4:	2100      	movs	r1, #0
 80012c6:	f006 ffe3 	bl	8008290 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ca:	2354      	movs	r3, #84	; 0x54
 80012cc:	18fb      	adds	r3, r7, r3
 80012ce:	0018      	movs	r0, r3
 80012d0:	230c      	movs	r3, #12
 80012d2:	001a      	movs	r2, r3
 80012d4:	2100      	movs	r1, #0
 80012d6:	f006 ffdb 	bl	8008290 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012da:	2338      	movs	r3, #56	; 0x38
 80012dc:	18fb      	adds	r3, r7, r3
 80012de:	0018      	movs	r0, r3
 80012e0:	231c      	movs	r3, #28
 80012e2:	001a      	movs	r2, r3
 80012e4:	2100      	movs	r1, #0
 80012e6:	f006 ffd3 	bl	8008290 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	0018      	movs	r0, r3
 80012ee:	2334      	movs	r3, #52	; 0x34
 80012f0:	001a      	movs	r2, r3
 80012f2:	2100      	movs	r1, #0
 80012f4:	f006 ffcc 	bl	8008290 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012f8:	4b61      	ldr	r3, [pc, #388]	; (8001480 <MX_TIM1_Init+0x1cc>)
 80012fa:	4a62      	ldr	r2, [pc, #392]	; (8001484 <MX_TIM1_Init+0x1d0>)
 80012fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012fe:	4b60      	ldr	r3, [pc, #384]	; (8001480 <MX_TIM1_Init+0x1cc>)
 8001300:	2200      	movs	r2, #0
 8001302:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001304:	4b5e      	ldr	r3, [pc, #376]	; (8001480 <MX_TIM1_Init+0x1cc>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 800130a:	4b5d      	ldr	r3, [pc, #372]	; (8001480 <MX_TIM1_Init+0x1cc>)
 800130c:	22ff      	movs	r2, #255	; 0xff
 800130e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001310:	4b5b      	ldr	r3, [pc, #364]	; (8001480 <MX_TIM1_Init+0x1cc>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001316:	4b5a      	ldr	r3, [pc, #360]	; (8001480 <MX_TIM1_Init+0x1cc>)
 8001318:	2200      	movs	r2, #0
 800131a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131c:	4b58      	ldr	r3, [pc, #352]	; (8001480 <MX_TIM1_Init+0x1cc>)
 800131e:	2200      	movs	r2, #0
 8001320:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001322:	4b57      	ldr	r3, [pc, #348]	; (8001480 <MX_TIM1_Init+0x1cc>)
 8001324:	0018      	movs	r0, r3
 8001326:	f005 fd5b 	bl	8006de0 <HAL_TIM_Base_Init>
 800132a:	1e03      	subs	r3, r0, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800132e:	f000 fb81 	bl	8001a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001332:	2160      	movs	r1, #96	; 0x60
 8001334:	187b      	adds	r3, r7, r1
 8001336:	2280      	movs	r2, #128	; 0x80
 8001338:	0152      	lsls	r2, r2, #5
 800133a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800133c:	187a      	adds	r2, r7, r1
 800133e:	4b50      	ldr	r3, [pc, #320]	; (8001480 <MX_TIM1_Init+0x1cc>)
 8001340:	0011      	movs	r1, r2
 8001342:	0018      	movs	r0, r3
 8001344:	f006 f98e 	bl	8007664 <HAL_TIM_ConfigClockSource>
 8001348:	1e03      	subs	r3, r0, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800134c:	f000 fb72 	bl	8001a34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001350:	4b4b      	ldr	r3, [pc, #300]	; (8001480 <MX_TIM1_Init+0x1cc>)
 8001352:	0018      	movs	r0, r3
 8001354:	f005 fe18 	bl	8006f88 <HAL_TIM_PWM_Init>
 8001358:	1e03      	subs	r3, r0, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 800135c:	f000 fb6a 	bl	8001a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001360:	2154      	movs	r1, #84	; 0x54
 8001362:	187b      	adds	r3, r7, r1
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001368:	187b      	adds	r3, r7, r1
 800136a:	2200      	movs	r2, #0
 800136c:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136e:	187b      	adds	r3, r7, r1
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001374:	187a      	adds	r2, r7, r1
 8001376:	4b42      	ldr	r3, [pc, #264]	; (8001480 <MX_TIM1_Init+0x1cc>)
 8001378:	0011      	movs	r1, r2
 800137a:	0018      	movs	r0, r3
 800137c:	f006 fe62 	bl	8008044 <HAL_TIMEx_MasterConfigSynchronization>
 8001380:	1e03      	subs	r3, r0, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8001384:	f000 fb56 	bl	8001a34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001388:	2138      	movs	r1, #56	; 0x38
 800138a:	187b      	adds	r3, r7, r1
 800138c:	2260      	movs	r2, #96	; 0x60
 800138e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001390:	187b      	adds	r3, r7, r1
 8001392:	2200      	movs	r2, #0
 8001394:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001396:	187b      	adds	r3, r7, r1
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800139c:	187b      	adds	r3, r7, r1
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013a2:	187b      	adds	r3, r7, r1
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013a8:	187b      	adds	r3, r7, r1
 80013aa:	2200      	movs	r2, #0
 80013ac:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013ae:	187b      	adds	r3, r7, r1
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013b4:	1879      	adds	r1, r7, r1
 80013b6:	4b32      	ldr	r3, [pc, #200]	; (8001480 <MX_TIM1_Init+0x1cc>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	0018      	movs	r0, r3
 80013bc:	f006 f852 	bl	8007464 <HAL_TIM_PWM_ConfigChannel>
 80013c0:	1e03      	subs	r3, r0, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80013c4:	f000 fb36 	bl	8001a34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013c8:	2338      	movs	r3, #56	; 0x38
 80013ca:	18f9      	adds	r1, r7, r3
 80013cc:	4b2c      	ldr	r3, [pc, #176]	; (8001480 <MX_TIM1_Init+0x1cc>)
 80013ce:	2204      	movs	r2, #4
 80013d0:	0018      	movs	r0, r3
 80013d2:	f006 f847 	bl	8007464 <HAL_TIM_PWM_ConfigChannel>
 80013d6:	1e03      	subs	r3, r0, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80013da:	f000 fb2b 	bl	8001a34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013de:	2338      	movs	r3, #56	; 0x38
 80013e0:	18f9      	adds	r1, r7, r3
 80013e2:	4b27      	ldr	r3, [pc, #156]	; (8001480 <MX_TIM1_Init+0x1cc>)
 80013e4:	2208      	movs	r2, #8
 80013e6:	0018      	movs	r0, r3
 80013e8:	f006 f83c 	bl	8007464 <HAL_TIM_PWM_ConfigChannel>
 80013ec:	1e03      	subs	r3, r0, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80013f0:	f000 fb20 	bl	8001a34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013f4:	2338      	movs	r3, #56	; 0x38
 80013f6:	18f9      	adds	r1, r7, r3
 80013f8:	4b21      	ldr	r3, [pc, #132]	; (8001480 <MX_TIM1_Init+0x1cc>)
 80013fa:	220c      	movs	r2, #12
 80013fc:	0018      	movs	r0, r3
 80013fe:	f006 f831 	bl	8007464 <HAL_TIM_PWM_ConfigChannel>
 8001402:	1e03      	subs	r3, r0, #0
 8001404:	d001      	beq.n	800140a <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 8001406:	f000 fb15 	bl	8001a34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	2200      	movs	r2, #0
 8001414:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	0192      	lsls	r2, r2, #6
 800142e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	2200      	movs	r2, #0
 8001434:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	2200      	movs	r2, #0
 800143a:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	2200      	movs	r2, #0
 8001440:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	2280      	movs	r2, #128	; 0x80
 8001446:	0492      	lsls	r2, r2, #18
 8001448:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	2200      	movs	r2, #0
 800144e:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	2200      	movs	r2, #0
 8001454:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	2200      	movs	r2, #0
 800145a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800145c:	1d3a      	adds	r2, r7, #4
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <MX_TIM1_Init+0x1cc>)
 8001460:	0011      	movs	r1, r2
 8001462:	0018      	movs	r0, r3
 8001464:	f006 fe56 	bl	8008114 <HAL_TIMEx_ConfigBreakDeadTime>
 8001468:	1e03      	subs	r3, r0, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM1_Init+0x1bc>
  {
    Error_Handler();
 800146c:	f000 fae2 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001470:	4b03      	ldr	r3, [pc, #12]	; (8001480 <MX_TIM1_Init+0x1cc>)
 8001472:	0018      	movs	r0, r3
 8001474:	f000 fd3c 	bl	8001ef0 <HAL_TIM_MspPostInit>

}
 8001478:	46c0      	nop			; (mov r8, r8)
 800147a:	46bd      	mov	sp, r7
 800147c:	b01c      	add	sp, #112	; 0x70
 800147e:	bd80      	pop	{r7, pc}
 8001480:	200001f0 	.word	0x200001f0
 8001484:	40012c00 	.word	0x40012c00

08001488 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800148e:	2310      	movs	r3, #16
 8001490:	18fb      	adds	r3, r7, r3
 8001492:	0018      	movs	r0, r3
 8001494:	2310      	movs	r3, #16
 8001496:	001a      	movs	r2, r3
 8001498:	2100      	movs	r1, #0
 800149a:	f006 fef9 	bl	8008290 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	0018      	movs	r0, r3
 80014a2:	230c      	movs	r3, #12
 80014a4:	001a      	movs	r2, r3
 80014a6:	2100      	movs	r1, #0
 80014a8:	f006 fef2 	bl	8008290 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014ac:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <MX_TIM3_Init+0xa0>)
 80014ae:	4a1f      	ldr	r2, [pc, #124]	; (800152c <MX_TIM3_Init+0xa4>)
 80014b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014b2:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <MX_TIM3_Init+0xa0>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b8:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <MX_TIM3_Init+0xa0>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80014be:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <MX_TIM3_Init+0xa0>)
 80014c0:	22fa      	movs	r2, #250	; 0xfa
 80014c2:	0092      	lsls	r2, r2, #2
 80014c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c6:	4b18      	ldr	r3, [pc, #96]	; (8001528 <MX_TIM3_Init+0xa0>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014cc:	4b16      	ldr	r3, [pc, #88]	; (8001528 <MX_TIM3_Init+0xa0>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <MX_TIM3_Init+0xa0>)
 80014d4:	0018      	movs	r0, r3
 80014d6:	f005 fc83 	bl	8006de0 <HAL_TIM_Base_Init>
 80014da:	1e03      	subs	r3, r0, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80014de:	f000 faa9 	bl	8001a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e2:	2110      	movs	r1, #16
 80014e4:	187b      	adds	r3, r7, r1
 80014e6:	2280      	movs	r2, #128	; 0x80
 80014e8:	0152      	lsls	r2, r2, #5
 80014ea:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014ec:	187a      	adds	r2, r7, r1
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <MX_TIM3_Init+0xa0>)
 80014f0:	0011      	movs	r1, r2
 80014f2:	0018      	movs	r0, r3
 80014f4:	f006 f8b6 	bl	8007664 <HAL_TIM_ConfigClockSource>
 80014f8:	1e03      	subs	r3, r0, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80014fc:	f000 fa9a 	bl	8001a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800150c:	1d3a      	adds	r2, r7, #4
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <MX_TIM3_Init+0xa0>)
 8001510:	0011      	movs	r1, r2
 8001512:	0018      	movs	r0, r3
 8001514:	f006 fd96 	bl	8008044 <HAL_TIMEx_MasterConfigSynchronization>
 8001518:	1e03      	subs	r3, r0, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800151c:	f000 fa8a 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001520:	46c0      	nop			; (mov r8, r8)
 8001522:	46bd      	mov	sp, r7
 8001524:	b008      	add	sp, #32
 8001526:	bd80      	pop	{r7, pc}
 8001528:	2000023c 	.word	0x2000023c
 800152c:	40000400 	.word	0x40000400

08001530 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	0018      	movs	r0, r3
 800153a:	230c      	movs	r3, #12
 800153c:	001a      	movs	r2, r3
 800153e:	2100      	movs	r1, #0
 8001540:	f006 fea6 	bl	8008290 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001544:	4b15      	ldr	r3, [pc, #84]	; (800159c <MX_TIM6_Init+0x6c>)
 8001546:	4a16      	ldr	r2, [pc, #88]	; (80015a0 <MX_TIM6_Init+0x70>)
 8001548:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800154a:	4b14      	ldr	r3, [pc, #80]	; (800159c <MX_TIM6_Init+0x6c>)
 800154c:	2200      	movs	r2, #0
 800154e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001550:	4b12      	ldr	r3, [pc, #72]	; (800159c <MX_TIM6_Init+0x6c>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 64000;
 8001556:	4b11      	ldr	r3, [pc, #68]	; (800159c <MX_TIM6_Init+0x6c>)
 8001558:	22fa      	movs	r2, #250	; 0xfa
 800155a:	0212      	lsls	r2, r2, #8
 800155c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155e:	4b0f      	ldr	r3, [pc, #60]	; (800159c <MX_TIM6_Init+0x6c>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001564:	4b0d      	ldr	r3, [pc, #52]	; (800159c <MX_TIM6_Init+0x6c>)
 8001566:	0018      	movs	r0, r3
 8001568:	f005 fc3a 	bl	8006de0 <HAL_TIM_Base_Init>
 800156c:	1e03      	subs	r3, r0, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8001570:	f000 fa60 	bl	8001a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001580:	1d3a      	adds	r2, r7, #4
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <MX_TIM6_Init+0x6c>)
 8001584:	0011      	movs	r1, r2
 8001586:	0018      	movs	r0, r3
 8001588:	f006 fd5c 	bl	8008044 <HAL_TIMEx_MasterConfigSynchronization>
 800158c:	1e03      	subs	r3, r0, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8001590:	f000 fa50 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001594:	46c0      	nop			; (mov r8, r8)
 8001596:	46bd      	mov	sp, r7
 8001598:	b004      	add	sp, #16
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000288 	.word	0x20000288
 80015a0:	40001000 	.word	0x40001000

080015a4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	0018      	movs	r0, r3
 80015ae:	230c      	movs	r3, #12
 80015b0:	001a      	movs	r2, r3
 80015b2:	2100      	movs	r1, #0
 80015b4:	f006 fe6c 	bl	8008290 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80015b8:	4b15      	ldr	r3, [pc, #84]	; (8001610 <MX_TIM7_Init+0x6c>)
 80015ba:	4a16      	ldr	r2, [pc, #88]	; (8001614 <MX_TIM7_Init+0x70>)
 80015bc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80015be:	4b14      	ldr	r3, [pc, #80]	; (8001610 <MX_TIM7_Init+0x6c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <MX_TIM7_Init+0x6c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9600;
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <MX_TIM7_Init+0x6c>)
 80015cc:	2296      	movs	r2, #150	; 0x96
 80015ce:	0192      	lsls	r2, r2, #6
 80015d0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d2:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <MX_TIM7_Init+0x6c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80015d8:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <MX_TIM7_Init+0x6c>)
 80015da:	0018      	movs	r0, r3
 80015dc:	f005 fc00 	bl	8006de0 <HAL_TIM_Base_Init>
 80015e0:	1e03      	subs	r3, r0, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM7_Init+0x44>
  {
    Error_Handler();
 80015e4:	f000 fa26 	bl	8001a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80015f4:	1d3a      	adds	r2, r7, #4
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <MX_TIM7_Init+0x6c>)
 80015f8:	0011      	movs	r1, r2
 80015fa:	0018      	movs	r0, r3
 80015fc:	f006 fd22 	bl	8008044 <HAL_TIMEx_MasterConfigSynchronization>
 8001600:	1e03      	subs	r3, r0, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM7_Init+0x64>
  {
    Error_Handler();
 8001604:	f000 fa16 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001608:	46c0      	nop			; (mov r8, r8)
 800160a:	46bd      	mov	sp, r7
 800160c:	b004      	add	sp, #16
 800160e:	bd80      	pop	{r7, pc}
 8001610:	200002d4 	.word	0x200002d4
 8001614:	40001400 	.word	0x40001400

08001618 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800161c:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <MX_TIM14_Init+0x40>)
 800161e:	4a0f      	ldr	r2, [pc, #60]	; (800165c <MX_TIM14_Init+0x44>)
 8001620:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8001622:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <MX_TIM14_Init+0x40>)
 8001624:	2200      	movs	r2, #0
 8001626:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <MX_TIM14_Init+0x40>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2400;
 800162e:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <MX_TIM14_Init+0x40>)
 8001630:	2296      	movs	r2, #150	; 0x96
 8001632:	0112      	lsls	r2, r2, #4
 8001634:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001636:	4b08      	ldr	r3, [pc, #32]	; (8001658 <MX_TIM14_Init+0x40>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <MX_TIM14_Init+0x40>)
 800163e:	2200      	movs	r2, #0
 8001640:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001642:	4b05      	ldr	r3, [pc, #20]	; (8001658 <MX_TIM14_Init+0x40>)
 8001644:	0018      	movs	r0, r3
 8001646:	f005 fbcb 	bl	8006de0 <HAL_TIM_Base_Init>
 800164a:	1e03      	subs	r3, r0, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800164e:	f000 f9f1 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000320 	.word	0x20000320
 800165c:	40002000 	.word	0x40002000

08001660 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b098      	sub	sp, #96	; 0x60
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001666:	2354      	movs	r3, #84	; 0x54
 8001668:	18fb      	adds	r3, r7, r3
 800166a:	0018      	movs	r0, r3
 800166c:	230c      	movs	r3, #12
 800166e:	001a      	movs	r2, r3
 8001670:	2100      	movs	r1, #0
 8001672:	f006 fe0d 	bl	8008290 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001676:	2338      	movs	r3, #56	; 0x38
 8001678:	18fb      	adds	r3, r7, r3
 800167a:	0018      	movs	r0, r3
 800167c:	231c      	movs	r3, #28
 800167e:	001a      	movs	r2, r3
 8001680:	2100      	movs	r1, #0
 8001682:	f006 fe05 	bl	8008290 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	0018      	movs	r0, r3
 800168a:	2334      	movs	r3, #52	; 0x34
 800168c:	001a      	movs	r2, r3
 800168e:	2100      	movs	r1, #0
 8001690:	f006 fdfe 	bl	8008290 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001694:	4b41      	ldr	r3, [pc, #260]	; (800179c <MX_TIM15_Init+0x13c>)
 8001696:	4a42      	ldr	r2, [pc, #264]	; (80017a0 <MX_TIM15_Init+0x140>)
 8001698:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800169a:	4b40      	ldr	r3, [pc, #256]	; (800179c <MX_TIM15_Init+0x13c>)
 800169c:	2200      	movs	r2, #0
 800169e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a0:	4b3e      	ldr	r3, [pc, #248]	; (800179c <MX_TIM15_Init+0x13c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80016a6:	4b3d      	ldr	r3, [pc, #244]	; (800179c <MX_TIM15_Init+0x13c>)
 80016a8:	4a3e      	ldr	r2, [pc, #248]	; (80017a4 <MX_TIM15_Init+0x144>)
 80016aa:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ac:	4b3b      	ldr	r3, [pc, #236]	; (800179c <MX_TIM15_Init+0x13c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80016b2:	4b3a      	ldr	r3, [pc, #232]	; (800179c <MX_TIM15_Init+0x13c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b8:	4b38      	ldr	r3, [pc, #224]	; (800179c <MX_TIM15_Init+0x13c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80016be:	4b37      	ldr	r3, [pc, #220]	; (800179c <MX_TIM15_Init+0x13c>)
 80016c0:	0018      	movs	r0, r3
 80016c2:	f005 fc61 	bl	8006f88 <HAL_TIM_PWM_Init>
 80016c6:	1e03      	subs	r3, r0, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80016ca:	f000 f9b3 	bl	8001a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ce:	2154      	movs	r1, #84	; 0x54
 80016d0:	187b      	adds	r3, r7, r1
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d6:	187b      	adds	r3, r7, r1
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80016dc:	187a      	adds	r2, r7, r1
 80016de:	4b2f      	ldr	r3, [pc, #188]	; (800179c <MX_TIM15_Init+0x13c>)
 80016e0:	0011      	movs	r1, r2
 80016e2:	0018      	movs	r0, r3
 80016e4:	f006 fcae 	bl	8008044 <HAL_TIMEx_MasterConfigSynchronization>
 80016e8:	1e03      	subs	r3, r0, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 80016ec:	f000 f9a2 	bl	8001a34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016f0:	2138      	movs	r1, #56	; 0x38
 80016f2:	187b      	adds	r3, r7, r1
 80016f4:	2260      	movs	r2, #96	; 0x60
 80016f6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80016f8:	187b      	adds	r3, r7, r1
 80016fa:	2200      	movs	r2, #0
 80016fc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016fe:	187b      	adds	r3, r7, r1
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001704:	187b      	adds	r3, r7, r1
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800170a:	187b      	adds	r3, r7, r1
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001710:	187b      	adds	r3, r7, r1
 8001712:	2200      	movs	r2, #0
 8001714:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001716:	187b      	adds	r3, r7, r1
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800171c:	1879      	adds	r1, r7, r1
 800171e:	4b1f      	ldr	r3, [pc, #124]	; (800179c <MX_TIM15_Init+0x13c>)
 8001720:	2200      	movs	r2, #0
 8001722:	0018      	movs	r0, r3
 8001724:	f005 fe9e 	bl	8007464 <HAL_TIM_PWM_ConfigChannel>
 8001728:	1e03      	subs	r3, r0, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 800172c:	f000 f982 	bl	8001a34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001730:	2338      	movs	r3, #56	; 0x38
 8001732:	18f9      	adds	r1, r7, r3
 8001734:	4b19      	ldr	r3, [pc, #100]	; (800179c <MX_TIM15_Init+0x13c>)
 8001736:	2204      	movs	r2, #4
 8001738:	0018      	movs	r0, r3
 800173a:	f005 fe93 	bl	8007464 <HAL_TIM_PWM_ConfigChannel>
 800173e:	1e03      	subs	r3, r0, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM15_Init+0xe6>
  {
    Error_Handler();
 8001742:	f000 f977 	bl	8001a34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001746:	1d3b      	adds	r3, r7, #4
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	2200      	movs	r2, #0
 8001750:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001752:	1d3b      	adds	r3, r7, #4
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001764:	1d3b      	adds	r3, r7, #4
 8001766:	2280      	movs	r2, #128	; 0x80
 8001768:	0192      	lsls	r2, r2, #6
 800176a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	2200      	movs	r2, #0
 8001770:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	2200      	movs	r2, #0
 8001776:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001778:	1d3a      	adds	r2, r7, #4
 800177a:	4b08      	ldr	r3, [pc, #32]	; (800179c <MX_TIM15_Init+0x13c>)
 800177c:	0011      	movs	r1, r2
 800177e:	0018      	movs	r0, r3
 8001780:	f006 fcc8 	bl	8008114 <HAL_TIMEx_ConfigBreakDeadTime>
 8001784:	1e03      	subs	r3, r0, #0
 8001786:	d001      	beq.n	800178c <MX_TIM15_Init+0x12c>
  {
    Error_Handler();
 8001788:	f000 f954 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800178c:	4b03      	ldr	r3, [pc, #12]	; (800179c <MX_TIM15_Init+0x13c>)
 800178e:	0018      	movs	r0, r3
 8001790:	f000 fbae 	bl	8001ef0 <HAL_TIM_MspPostInit>

}
 8001794:	46c0      	nop			; (mov r8, r8)
 8001796:	46bd      	mov	sp, r7
 8001798:	b018      	add	sp, #96	; 0x60
 800179a:	bd80      	pop	{r7, pc}
 800179c:	2000036c 	.word	0x2000036c
 80017a0:	40014000 	.word	0x40014000
 80017a4:	0000ffff 	.word	0x0000ffff

080017a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017ae:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <MX_DMA_Init+0x38>)
 80017b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017b2:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <MX_DMA_Init+0x38>)
 80017b4:	2101      	movs	r1, #1
 80017b6:	430a      	orrs	r2, r1
 80017b8:	639a      	str	r2, [r3, #56]	; 0x38
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <MX_DMA_Init+0x38>)
 80017bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017be:	2201      	movs	r2, #1
 80017c0:	4013      	ands	r3, r2
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2101      	movs	r1, #1
 80017ca:	2009      	movs	r0, #9
 80017cc:	f001 feae 	bl	800352c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017d0:	2009      	movs	r0, #9
 80017d2:	f001 fec0 	bl	8003556 <HAL_NVIC_EnableIRQ>

}
 80017d6:	46c0      	nop			; (mov r8, r8)
 80017d8:	46bd      	mov	sp, r7
 80017da:	b002      	add	sp, #8
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	40021000 	.word	0x40021000

080017e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017e4:	b590      	push	{r4, r7, lr}
 80017e6:	b08b      	sub	sp, #44	; 0x2c
 80017e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ea:	2414      	movs	r4, #20
 80017ec:	193b      	adds	r3, r7, r4
 80017ee:	0018      	movs	r0, r3
 80017f0:	2314      	movs	r3, #20
 80017f2:	001a      	movs	r2, r3
 80017f4:	2100      	movs	r1, #0
 80017f6:	f006 fd4b 	bl	8008290 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fa:	4b86      	ldr	r3, [pc, #536]	; (8001a14 <MX_GPIO_Init+0x230>)
 80017fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017fe:	4b85      	ldr	r3, [pc, #532]	; (8001a14 <MX_GPIO_Init+0x230>)
 8001800:	2104      	movs	r1, #4
 8001802:	430a      	orrs	r2, r1
 8001804:	635a      	str	r2, [r3, #52]	; 0x34
 8001806:	4b83      	ldr	r3, [pc, #524]	; (8001a14 <MX_GPIO_Init+0x230>)
 8001808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800180a:	2204      	movs	r2, #4
 800180c:	4013      	ands	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	4b80      	ldr	r3, [pc, #512]	; (8001a14 <MX_GPIO_Init+0x230>)
 8001814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001816:	4b7f      	ldr	r3, [pc, #508]	; (8001a14 <MX_GPIO_Init+0x230>)
 8001818:	2101      	movs	r1, #1
 800181a:	430a      	orrs	r2, r1
 800181c:	635a      	str	r2, [r3, #52]	; 0x34
 800181e:	4b7d      	ldr	r3, [pc, #500]	; (8001a14 <MX_GPIO_Init+0x230>)
 8001820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001822:	2201      	movs	r2, #1
 8001824:	4013      	ands	r3, r2
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800182a:	4b7a      	ldr	r3, [pc, #488]	; (8001a14 <MX_GPIO_Init+0x230>)
 800182c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800182e:	4b79      	ldr	r3, [pc, #484]	; (8001a14 <MX_GPIO_Init+0x230>)
 8001830:	2102      	movs	r1, #2
 8001832:	430a      	orrs	r2, r1
 8001834:	635a      	str	r2, [r3, #52]	; 0x34
 8001836:	4b77      	ldr	r3, [pc, #476]	; (8001a14 <MX_GPIO_Init+0x230>)
 8001838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800183a:	2202      	movs	r2, #2
 800183c:	4013      	ands	r3, r2
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001842:	4b74      	ldr	r3, [pc, #464]	; (8001a14 <MX_GPIO_Init+0x230>)
 8001844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001846:	4b73      	ldr	r3, [pc, #460]	; (8001a14 <MX_GPIO_Init+0x230>)
 8001848:	2108      	movs	r1, #8
 800184a:	430a      	orrs	r2, r1
 800184c:	635a      	str	r2, [r3, #52]	; 0x34
 800184e:	4b71      	ldr	r3, [pc, #452]	; (8001a14 <MX_GPIO_Init+0x230>)
 8001850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001852:	2208      	movs	r2, #8
 8001854:	4013      	ands	r3, r2
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CE_BOOST_Pin|OE_MUX_Pin, GPIO_PIN_RESET);
 800185a:	496f      	ldr	r1, [pc, #444]	; (8001a18 <MX_GPIO_Init+0x234>)
 800185c:	4b6f      	ldr	r3, [pc, #444]	; (8001a1c <MX_GPIO_Init+0x238>)
 800185e:	2200      	movs	r2, #0
 8001860:	0018      	movs	r0, r3
 8001862:	f002 fade 	bl	8003e22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OTG1_Pin|S_MUX_Pin|NEOPIXEL_DI_Pin, GPIO_PIN_SET);
 8001866:	4b6d      	ldr	r3, [pc, #436]	; (8001a1c <MX_GPIO_Init+0x238>)
 8001868:	2201      	movs	r2, #1
 800186a:	210d      	movs	r1, #13
 800186c:	0018      	movs	r0, r3
 800186e:	f002 fad8 	bl	8003e22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STM_INT_OUT2_Pin|STM_INT_OUT1_Pin|LED_Pin|GPIO_PIN_3
 8001872:	496b      	ldr	r1, [pc, #428]	; (8001a20 <MX_GPIO_Init+0x23c>)
 8001874:	4b6b      	ldr	r3, [pc, #428]	; (8001a24 <MX_GPIO_Init+0x240>)
 8001876:	2200      	movs	r2, #0
 8001878:	0018      	movs	r0, r3
 800187a:	f002 fad2 	bl	8003e22 <HAL_GPIO_WritePin>
                          |EN_ESP_Pin|TRIG_SONAR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800187e:	4b6a      	ldr	r3, [pc, #424]	; (8001a28 <MX_GPIO_Init+0x244>)
 8001880:	2200      	movs	r2, #0
 8001882:	217f      	movs	r1, #127	; 0x7f
 8001884:	0018      	movs	r0, r3
 8001886:	f002 facc 	bl	8003e22 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nSLEEP_MOTORS_GPIO_Port, nSLEEP_MOTORS_Pin, GPIO_PIN_SET);
 800188a:	2380      	movs	r3, #128	; 0x80
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4865      	ldr	r0, [pc, #404]	; (8001a24 <MX_GPIO_Init+0x240>)
 8001890:	2201      	movs	r2, #1
 8001892:	0019      	movs	r1, r3
 8001894:	f002 fac5 	bl	8003e22 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CE_BOOST_Pin OTG1_Pin OE_MUX_Pin S_MUX_Pin */
  GPIO_InitStruct.Pin = CE_BOOST_Pin|OTG1_Pin|OE_MUX_Pin|S_MUX_Pin;
 8001898:	193b      	adds	r3, r7, r4
 800189a:	4a64      	ldr	r2, [pc, #400]	; (8001a2c <MX_GPIO_Init+0x248>)
 800189c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189e:	193b      	adds	r3, r7, r4
 80018a0:	2201      	movs	r2, #1
 80018a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	193b      	adds	r3, r7, r4
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	193b      	adds	r3, r7, r4
 80018ac:	2200      	movs	r2, #0
 80018ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b0:	193b      	adds	r3, r7, r4
 80018b2:	4a5a      	ldr	r2, [pc, #360]	; (8001a1c <MX_GPIO_Init+0x238>)
 80018b4:	0019      	movs	r1, r3
 80018b6:	0010      	movs	r0, r2
 80018b8:	f002 f932 	bl	8003b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : NEOPIXEL_DI_Pin */
  GPIO_InitStruct.Pin = NEOPIXEL_DI_Pin;
 80018bc:	193b      	adds	r3, r7, r4
 80018be:	2208      	movs	r2, #8
 80018c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80018c2:	193b      	adds	r3, r7, r4
 80018c4:	2211      	movs	r2, #17
 80018c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	193b      	adds	r3, r7, r4
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	193b      	adds	r3, r7, r4
 80018d0:	2200      	movs	r2, #0
 80018d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NEOPIXEL_DI_GPIO_Port, &GPIO_InitStruct);
 80018d4:	193b      	adds	r3, r7, r4
 80018d6:	4a51      	ldr	r2, [pc, #324]	; (8001a1c <MX_GPIO_Init+0x238>)
 80018d8:	0019      	movs	r1, r3
 80018da:	0010      	movs	r0, r2
 80018dc:	f002 f920 	bl	8003b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : STM_INT_OUT2_Pin STM_INT_OUT1_Pin LED_Pin PB3
                           EN_ESP_Pin nSLEEP_MOTORS_Pin TRIG_SONAR_Pin */
  GPIO_InitStruct.Pin = STM_INT_OUT2_Pin|STM_INT_OUT1_Pin|LED_Pin|GPIO_PIN_3
 80018e0:	193b      	adds	r3, r7, r4
 80018e2:	4a53      	ldr	r2, [pc, #332]	; (8001a30 <MX_GPIO_Init+0x24c>)
 80018e4:	601a      	str	r2, [r3, #0]
                          |EN_ESP_Pin|nSLEEP_MOTORS_Pin|TRIG_SONAR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e6:	193b      	adds	r3, r7, r4
 80018e8:	2201      	movs	r2, #1
 80018ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	193b      	adds	r3, r7, r4
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	193b      	adds	r3, r7, r4
 80018f4:	2200      	movs	r2, #0
 80018f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f8:	193b      	adds	r3, r7, r4
 80018fa:	4a4a      	ldr	r2, [pc, #296]	; (8001a24 <MX_GPIO_Init+0x240>)
 80018fc:	0019      	movs	r1, r3
 80018fe:	0010      	movs	r0, r2
 8001900:	f002 f90e 	bl	8003b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : Hall1_1_Pin Hall1_2_Pin */
  GPIO_InitStruct.Pin = Hall1_1_Pin|Hall1_2_Pin;
 8001904:	193b      	adds	r3, r7, r4
 8001906:	22c0      	movs	r2, #192	; 0xc0
 8001908:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800190a:	193b      	adds	r3, r7, r4
 800190c:	2288      	movs	r2, #136	; 0x88
 800190e:	0352      	lsls	r2, r2, #13
 8001910:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	193b      	adds	r3, r7, r4
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001918:	193b      	adds	r3, r7, r4
 800191a:	4a40      	ldr	r2, [pc, #256]	; (8001a1c <MX_GPIO_Init+0x238>)
 800191c:	0019      	movs	r1, r3
 800191e:	0010      	movs	r0, r2
 8001920:	f002 f8fe 	bl	8003b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : Hall2_1_Pin Hall2_2_Pin */
  GPIO_InitStruct.Pin = Hall2_1_Pin|Hall2_2_Pin;
 8001924:	193b      	adds	r3, r7, r4
 8001926:	22c0      	movs	r2, #192	; 0xc0
 8001928:	0092      	lsls	r2, r2, #2
 800192a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800192c:	193b      	adds	r3, r7, r4
 800192e:	2288      	movs	r2, #136	; 0x88
 8001930:	0352      	lsls	r2, r2, #13
 8001932:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	193b      	adds	r3, r7, r4
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800193a:	193b      	adds	r3, r7, r4
 800193c:	4a3a      	ldr	r2, [pc, #232]	; (8001a28 <MX_GPIO_Init+0x244>)
 800193e:	0019      	movs	r1, r3
 8001940:	0010      	movs	r0, r2
 8001942:	f002 f8ed 	bl	8003b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : ON_PRESS_Pin */
  GPIO_InitStruct.Pin = ON_PRESS_Pin;
 8001946:	193b      	adds	r3, r7, r4
 8001948:	2280      	movs	r2, #128	; 0x80
 800194a:	0212      	lsls	r2, r2, #8
 800194c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800194e:	193b      	adds	r3, r7, r4
 8001950:	2284      	movs	r2, #132	; 0x84
 8001952:	0392      	lsls	r2, r2, #14
 8001954:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	193b      	adds	r3, r7, r4
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ON_PRESS_GPIO_Port, &GPIO_InitStruct);
 800195c:	193a      	adds	r2, r7, r4
 800195e:	23a0      	movs	r3, #160	; 0xa0
 8001960:	05db      	lsls	r3, r3, #23
 8001962:	0011      	movs	r1, r2
 8001964:	0018      	movs	r0, r3
 8001966:	f002 f8db 	bl	8003b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : INPUT_BUTTON_Pin */
  GPIO_InitStruct.Pin = INPUT_BUTTON_Pin;
 800196a:	0021      	movs	r1, r4
 800196c:	187b      	adds	r3, r7, r1
 800196e:	2280      	movs	r2, #128	; 0x80
 8001970:	0052      	lsls	r2, r2, #1
 8001972:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001974:	000c      	movs	r4, r1
 8001976:	193b      	adds	r3, r7, r4
 8001978:	2200      	movs	r2, #0
 800197a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	193b      	adds	r3, r7, r4
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(INPUT_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001982:	193b      	adds	r3, r7, r4
 8001984:	4a25      	ldr	r2, [pc, #148]	; (8001a1c <MX_GPIO_Init+0x238>)
 8001986:	0019      	movs	r1, r3
 8001988:	0010      	movs	r0, r2
 800198a:	f002 f8c9 	bl	8003b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800198e:	193b      	adds	r3, r7, r4
 8001990:	227f      	movs	r2, #127	; 0x7f
 8001992:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001994:	193b      	adds	r3, r7, r4
 8001996:	2201      	movs	r2, #1
 8001998:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	193b      	adds	r3, r7, r4
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a0:	193b      	adds	r3, r7, r4
 80019a2:	2200      	movs	r2, #0
 80019a4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019a6:	193b      	adds	r3, r7, r4
 80019a8:	4a1f      	ldr	r2, [pc, #124]	; (8001a28 <MX_GPIO_Init+0x244>)
 80019aa:	0019      	movs	r1, r3
 80019ac:	0010      	movs	r0, r2
 80019ae:	f002 f8b7 	bl	8003b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_BOOST_Pin INT_ACCEL_Pin */
  GPIO_InitStruct.Pin = INT_BOOST_Pin|INT_ACCEL_Pin;
 80019b2:	0021      	movs	r1, r4
 80019b4:	187b      	adds	r3, r7, r1
 80019b6:	2230      	movs	r2, #48	; 0x30
 80019b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019ba:	187b      	adds	r3, r7, r1
 80019bc:	2288      	movs	r2, #136	; 0x88
 80019be:	0352      	lsls	r2, r2, #13
 80019c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	187b      	adds	r3, r7, r1
 80019c4:	2200      	movs	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c8:	000c      	movs	r4, r1
 80019ca:	187b      	adds	r3, r7, r1
 80019cc:	4a15      	ldr	r2, [pc, #84]	; (8001a24 <MX_GPIO_Init+0x240>)
 80019ce:	0019      	movs	r1, r3
 80019d0:	0010      	movs	r0, r2
 80019d2:	f002 f8a5 	bl	8003b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_SONAR_Pin */
  GPIO_InitStruct.Pin = ECHO_SONAR_Pin;
 80019d6:	0021      	movs	r1, r4
 80019d8:	187b      	adds	r3, r7, r1
 80019da:	2280      	movs	r2, #128	; 0x80
 80019dc:	00d2      	lsls	r2, r2, #3
 80019de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80019e0:	187b      	adds	r3, r7, r1
 80019e2:	22c4      	movs	r2, #196	; 0xc4
 80019e4:	0392      	lsls	r2, r2, #14
 80019e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	187b      	adds	r3, r7, r1
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ECHO_SONAR_GPIO_Port, &GPIO_InitStruct);
 80019ee:	187b      	adds	r3, r7, r1
 80019f0:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <MX_GPIO_Init+0x238>)
 80019f2:	0019      	movs	r1, r3
 80019f4:	0010      	movs	r0, r2
 80019f6:	f002 f893 	bl	8003b20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2101      	movs	r1, #1
 80019fe:	2007      	movs	r0, #7
 8001a00:	f001 fd94 	bl	800352c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001a04:	2007      	movs	r0, #7
 8001a06:	f001 fda6 	bl	8003556 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	b00b      	add	sp, #44	; 0x2c
 8001a10:	bd90      	pop	{r4, r7, pc}
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	40021000 	.word	0x40021000
 8001a18:	00001002 	.word	0x00001002
 8001a1c:	50000800 	.word	0x50000800
 8001a20:	0000328c 	.word	0x0000328c
 8001a24:	50000400 	.word	0x50000400
 8001a28:	50000c00 	.word	0x50000c00
 8001a2c:	00001007 	.word	0x00001007
 8001a30:	0000338c 	.word	0x0000338c

08001a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a38:	b672      	cpsid	i
}
 8001a3a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <Error_Handler+0x8>
	...

08001a40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a46:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <HAL_MspInit+0x60>)
 8001a48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <HAL_MspInit+0x60>)
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	641a      	str	r2, [r3, #64]	; 0x40
 8001a52:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <HAL_MspInit+0x60>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	2201      	movs	r2, #1
 8001a58:	4013      	ands	r3, r2
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5e:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <HAL_MspInit+0x60>)
 8001a60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a62:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <HAL_MspInit+0x60>)
 8001a64:	2180      	movs	r1, #128	; 0x80
 8001a66:	0549      	lsls	r1, r1, #21
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <HAL_MspInit+0x60>)
 8001a6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a70:	2380      	movs	r3, #128	; 0x80
 8001a72:	055b      	lsls	r3, r3, #21
 8001a74:	4013      	ands	r3, r2
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 1, 0);
 8001a7a:	2305      	movs	r3, #5
 8001a7c:	425b      	negs	r3, r3
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2101      	movs	r1, #1
 8001a82:	0018      	movs	r0, r3
 8001a84:	f001 fd52 	bl	800352c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8001a88:	2302      	movs	r3, #2
 8001a8a:	425b      	negs	r3, r3
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2101      	movs	r1, #1
 8001a90:	0018      	movs	r0, r3
 8001a92:	f001 fd4b 	bl	800352c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	b002      	add	sp, #8
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	40021000 	.word	0x40021000

08001aa4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001aa4:	b590      	push	{r4, r7, lr}
 8001aa6:	b093      	sub	sp, #76	; 0x4c
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aac:	2334      	movs	r3, #52	; 0x34
 8001aae:	18fb      	adds	r3, r7, r3
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	2314      	movs	r3, #20
 8001ab4:	001a      	movs	r2, r3
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	f006 fbea 	bl	8008290 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001abc:	2418      	movs	r4, #24
 8001abe:	193b      	adds	r3, r7, r4
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	231c      	movs	r3, #28
 8001ac4:	001a      	movs	r2, r3
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	f006 fbe2 	bl	8008290 <memset>
  if(hadc->Instance==ADC1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a52      	ldr	r2, [pc, #328]	; (8001c1c <HAL_ADC_MspInit+0x178>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d000      	beq.n	8001ad8 <HAL_ADC_MspInit+0x34>
 8001ad6:	e09c      	b.n	8001c12 <HAL_ADC_MspInit+0x16e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ad8:	193b      	adds	r3, r7, r4
 8001ada:	2280      	movs	r2, #128	; 0x80
 8001adc:	01d2      	lsls	r2, r2, #7
 8001ade:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001ae0:	193b      	adds	r3, r7, r4
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ae6:	193b      	adds	r3, r7, r4
 8001ae8:	0018      	movs	r0, r3
 8001aea:	f005 f845 	bl	8006b78 <HAL_RCCEx_PeriphCLKConfig>
 8001aee:	1e03      	subs	r3, r0, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001af2:	f7ff ff9f 	bl	8001a34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001af6:	4b4a      	ldr	r3, [pc, #296]	; (8001c20 <HAL_ADC_MspInit+0x17c>)
 8001af8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001afa:	4b49      	ldr	r3, [pc, #292]	; (8001c20 <HAL_ADC_MspInit+0x17c>)
 8001afc:	2180      	movs	r1, #128	; 0x80
 8001afe:	0349      	lsls	r1, r1, #13
 8001b00:	430a      	orrs	r2, r1
 8001b02:	641a      	str	r2, [r3, #64]	; 0x40
 8001b04:	4b46      	ldr	r3, [pc, #280]	; (8001c20 <HAL_ADC_MspInit+0x17c>)
 8001b06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b08:	2380      	movs	r3, #128	; 0x80
 8001b0a:	035b      	lsls	r3, r3, #13
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b12:	4b43      	ldr	r3, [pc, #268]	; (8001c20 <HAL_ADC_MspInit+0x17c>)
 8001b14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b16:	4b42      	ldr	r3, [pc, #264]	; (8001c20 <HAL_ADC_MspInit+0x17c>)
 8001b18:	2101      	movs	r1, #1
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b1e:	4b40      	ldr	r3, [pc, #256]	; (8001c20 <HAL_ADC_MspInit+0x17c>)
 8001b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b22:	2201      	movs	r2, #1
 8001b24:	4013      	ands	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b2a:	4b3d      	ldr	r3, [pc, #244]	; (8001c20 <HAL_ADC_MspInit+0x17c>)
 8001b2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b2e:	4b3c      	ldr	r3, [pc, #240]	; (8001c20 <HAL_ADC_MspInit+0x17c>)
 8001b30:	2104      	movs	r1, #4
 8001b32:	430a      	orrs	r2, r1
 8001b34:	635a      	str	r2, [r3, #52]	; 0x34
 8001b36:	4b3a      	ldr	r3, [pc, #232]	; (8001c20 <HAL_ADC_MspInit+0x17c>)
 8001b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b3a:	2204      	movs	r2, #4
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b42:	4b37      	ldr	r3, [pc, #220]	; (8001c20 <HAL_ADC_MspInit+0x17c>)
 8001b44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b46:	4b36      	ldr	r3, [pc, #216]	; (8001c20 <HAL_ADC_MspInit+0x17c>)
 8001b48:	2102      	movs	r1, #2
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b4e:	4b34      	ldr	r3, [pc, #208]	; (8001c20 <HAL_ADC_MspInit+0x17c>)
 8001b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b52:	2202      	movs	r2, #2
 8001b54:	4013      	ands	r3, r2
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_IN17
    PC5     ------> ADC1_IN18
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b5a:	2434      	movs	r4, #52	; 0x34
 8001b5c:	193b      	adds	r3, r7, r4
 8001b5e:	22ff      	movs	r2, #255	; 0xff
 8001b60:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b62:	193b      	adds	r3, r7, r4
 8001b64:	2203      	movs	r2, #3
 8001b66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	193b      	adds	r3, r7, r4
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6e:	193a      	adds	r2, r7, r4
 8001b70:	23a0      	movs	r3, #160	; 0xa0
 8001b72:	05db      	lsls	r3, r3, #23
 8001b74:	0011      	movs	r1, r2
 8001b76:	0018      	movs	r0, r3
 8001b78:	f001 ffd2 	bl	8003b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_PMID_MEAS_Pin|ADC_3V3_MEAS_Pin;
 8001b7c:	193b      	adds	r3, r7, r4
 8001b7e:	2230      	movs	r2, #48	; 0x30
 8001b80:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b82:	193b      	adds	r3, r7, r4
 8001b84:	2203      	movs	r2, #3
 8001b86:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	193b      	adds	r3, r7, r4
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b8e:	193b      	adds	r3, r7, r4
 8001b90:	4a24      	ldr	r2, [pc, #144]	; (8001c24 <HAL_ADC_MspInit+0x180>)
 8001b92:	0019      	movs	r1, r3
 8001b94:	0010      	movs	r0, r2
 8001b96:	f001 ffc3 	bl	8003b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_VBUS_MEAS_Pin|ADC_VBAT_MEAS_Pin;
 8001b9a:	0021      	movs	r1, r4
 8001b9c:	187b      	adds	r3, r7, r1
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ba2:	187b      	adds	r3, r7, r1
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	187b      	adds	r3, r7, r1
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bae:	187b      	adds	r3, r7, r1
 8001bb0:	4a1d      	ldr	r2, [pc, #116]	; (8001c28 <HAL_ADC_MspInit+0x184>)
 8001bb2:	0019      	movs	r1, r3
 8001bb4:	0010      	movs	r0, r2
 8001bb6:	f001 ffb3 	bl	8003b20 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001bba:	4b1c      	ldr	r3, [pc, #112]	; (8001c2c <HAL_ADC_MspInit+0x188>)
 8001bbc:	4a1c      	ldr	r2, [pc, #112]	; (8001c30 <HAL_ADC_MspInit+0x18c>)
 8001bbe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001bc0:	4b1a      	ldr	r3, [pc, #104]	; (8001c2c <HAL_ADC_MspInit+0x188>)
 8001bc2:	2205      	movs	r2, #5
 8001bc4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bc6:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <HAL_ADC_MspInit+0x188>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bcc:	4b17      	ldr	r3, [pc, #92]	; (8001c2c <HAL_ADC_MspInit+0x188>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001bd2:	4b16      	ldr	r3, [pc, #88]	; (8001c2c <HAL_ADC_MspInit+0x188>)
 8001bd4:	2280      	movs	r2, #128	; 0x80
 8001bd6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bd8:	4b14      	ldr	r3, [pc, #80]	; (8001c2c <HAL_ADC_MspInit+0x188>)
 8001bda:	2280      	movs	r2, #128	; 0x80
 8001bdc:	0052      	lsls	r2, r2, #1
 8001bde:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001be0:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <HAL_ADC_MspInit+0x188>)
 8001be2:	2280      	movs	r2, #128	; 0x80
 8001be4:	00d2      	lsls	r2, r2, #3
 8001be6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001be8:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <HAL_ADC_MspInit+0x188>)
 8001bea:	2220      	movs	r2, #32
 8001bec:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001bee:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <HAL_ADC_MspInit+0x188>)
 8001bf0:	22c0      	movs	r2, #192	; 0xc0
 8001bf2:	0192      	lsls	r2, r2, #6
 8001bf4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bf6:	4b0d      	ldr	r3, [pc, #52]	; (8001c2c <HAL_ADC_MspInit+0x188>)
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f001 fcc9 	bl	8003590 <HAL_DMA_Init>
 8001bfe:	1e03      	subs	r3, r0, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_ADC_MspInit+0x162>
    {
      Error_Handler();
 8001c02:	f7ff ff17 	bl	8001a34 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a08      	ldr	r2, [pc, #32]	; (8001c2c <HAL_ADC_MspInit+0x188>)
 8001c0a:	651a      	str	r2, [r3, #80]	; 0x50
 8001c0c:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <HAL_ADC_MspInit+0x188>)
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	46bd      	mov	sp, r7
 8001c16:	b013      	add	sp, #76	; 0x4c
 8001c18:	bd90      	pop	{r4, r7, pc}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	40012400 	.word	0x40012400
 8001c20:	40021000 	.word	0x40021000
 8001c24:	50000800 	.word	0x50000800
 8001c28:	50000400 	.word	0x50000400
 8001c2c:	2000008c 	.word	0x2000008c
 8001c30:	40020008 	.word	0x40020008

08001c34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c34:	b590      	push	{r4, r7, lr}
 8001c36:	b093      	sub	sp, #76	; 0x4c
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	2334      	movs	r3, #52	; 0x34
 8001c3e:	18fb      	adds	r3, r7, r3
 8001c40:	0018      	movs	r0, r3
 8001c42:	2314      	movs	r3, #20
 8001c44:	001a      	movs	r2, r3
 8001c46:	2100      	movs	r1, #0
 8001c48:	f006 fb22 	bl	8008290 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c4c:	2418      	movs	r4, #24
 8001c4e:	193b      	adds	r3, r7, r4
 8001c50:	0018      	movs	r0, r3
 8001c52:	231c      	movs	r3, #28
 8001c54:	001a      	movs	r2, r3
 8001c56:	2100      	movs	r1, #0
 8001c58:	f006 fb1a 	bl	8008290 <memset>
  if(hi2c->Instance==I2C1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a46      	ldr	r2, [pc, #280]	; (8001d7c <HAL_I2C_MspInit+0x148>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d148      	bne.n	8001cf8 <HAL_I2C_MspInit+0xc4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c66:	193b      	adds	r3, r7, r4
 8001c68:	2220      	movs	r2, #32
 8001c6a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c6c:	193b      	adds	r3, r7, r4
 8001c6e:	2200      	movs	r2, #0
 8001c70:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c72:	193b      	adds	r3, r7, r4
 8001c74:	0018      	movs	r0, r3
 8001c76:	f004 ff7f 	bl	8006b78 <HAL_RCCEx_PeriphCLKConfig>
 8001c7a:	1e03      	subs	r3, r0, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001c7e:	f7ff fed9 	bl	8001a34 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c82:	4b3f      	ldr	r3, [pc, #252]	; (8001d80 <HAL_I2C_MspInit+0x14c>)
 8001c84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c86:	4b3e      	ldr	r3, [pc, #248]	; (8001d80 <HAL_I2C_MspInit+0x14c>)
 8001c88:	2101      	movs	r1, #1
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	635a      	str	r2, [r3, #52]	; 0x34
 8001c8e:	4b3c      	ldr	r3, [pc, #240]	; (8001d80 <HAL_I2C_MspInit+0x14c>)
 8001c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c92:	2201      	movs	r2, #1
 8001c94:	4013      	ands	r3, r2
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SYS_SCL_Pin|SYS_SDA_Pin;
 8001c9a:	2134      	movs	r1, #52	; 0x34
 8001c9c:	187b      	adds	r3, r7, r1
 8001c9e:	22c0      	movs	r2, #192	; 0xc0
 8001ca0:	00d2      	lsls	r2, r2, #3
 8001ca2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ca4:	187b      	adds	r3, r7, r1
 8001ca6:	2212      	movs	r2, #18
 8001ca8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	187b      	adds	r3, r7, r1
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb0:	187b      	adds	r3, r7, r1
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001cb6:	187b      	adds	r3, r7, r1
 8001cb8:	2206      	movs	r2, #6
 8001cba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbc:	187a      	adds	r2, r7, r1
 8001cbe:	23a0      	movs	r3, #160	; 0xa0
 8001cc0:	05db      	lsls	r3, r3, #23
 8001cc2:	0011      	movs	r1, r2
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f001 ff2b 	bl	8003b20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cca:	4b2d      	ldr	r3, [pc, #180]	; (8001d80 <HAL_I2C_MspInit+0x14c>)
 8001ccc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cce:	4b2c      	ldr	r3, [pc, #176]	; (8001d80 <HAL_I2C_MspInit+0x14c>)
 8001cd0:	2180      	movs	r1, #128	; 0x80
 8001cd2:	0389      	lsls	r1, r1, #14
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	63da      	str	r2, [r3, #60]	; 0x3c
 8001cd8:	4b29      	ldr	r3, [pc, #164]	; (8001d80 <HAL_I2C_MspInit+0x14c>)
 8001cda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cdc:	2380      	movs	r3, #128	; 0x80
 8001cde:	039b      	lsls	r3, r3, #14
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 1, 0);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2101      	movs	r1, #1
 8001cea:	2017      	movs	r0, #23
 8001cec:	f001 fc1e 	bl	800352c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8001cf0:	2017      	movs	r0, #23
 8001cf2:	f001 fc30 	bl	8003556 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001cf6:	e03d      	b.n	8001d74 <HAL_I2C_MspInit+0x140>
  else if(hi2c->Instance==I2C2)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a21      	ldr	r2, [pc, #132]	; (8001d84 <HAL_I2C_MspInit+0x150>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d138      	bne.n	8001d74 <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d02:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <HAL_I2C_MspInit+0x14c>)
 8001d04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d06:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <HAL_I2C_MspInit+0x14c>)
 8001d08:	2102      	movs	r1, #2
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	635a      	str	r2, [r3, #52]	; 0x34
 8001d0e:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <HAL_I2C_MspInit+0x14c>)
 8001d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d12:	2202      	movs	r2, #2
 8001d14:	4013      	ands	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CTRL_SCL_Pin|CTRL_SDA_Pin;
 8001d1a:	2134      	movs	r1, #52	; 0x34
 8001d1c:	187b      	adds	r3, r7, r1
 8001d1e:	22c0      	movs	r2, #192	; 0xc0
 8001d20:	0112      	lsls	r2, r2, #4
 8001d22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d24:	187b      	adds	r3, r7, r1
 8001d26:	2212      	movs	r2, #18
 8001d28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	187b      	adds	r3, r7, r1
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d30:	187b      	adds	r3, r7, r1
 8001d32:	2200      	movs	r2, #0
 8001d34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8001d36:	187b      	adds	r3, r7, r1
 8001d38:	2206      	movs	r2, #6
 8001d3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3c:	187b      	adds	r3, r7, r1
 8001d3e:	4a12      	ldr	r2, [pc, #72]	; (8001d88 <HAL_I2C_MspInit+0x154>)
 8001d40:	0019      	movs	r1, r3
 8001d42:	0010      	movs	r0, r2
 8001d44:	f001 feec 	bl	8003b20 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d48:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <HAL_I2C_MspInit+0x14c>)
 8001d4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <HAL_I2C_MspInit+0x14c>)
 8001d4e:	2180      	movs	r1, #128	; 0x80
 8001d50:	03c9      	lsls	r1, r1, #15
 8001d52:	430a      	orrs	r2, r1
 8001d54:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d56:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <HAL_I2C_MspInit+0x14c>)
 8001d58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d5a:	2380      	movs	r3, #128	; 0x80
 8001d5c:	03db      	lsls	r3, r3, #15
 8001d5e:	4013      	ands	r3, r2
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_IRQn, 1, 0);
 8001d64:	2200      	movs	r2, #0
 8001d66:	2101      	movs	r1, #1
 8001d68:	2018      	movs	r0, #24
 8001d6a:	f001 fbdf 	bl	800352c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 8001d6e:	2018      	movs	r0, #24
 8001d70:	f001 fbf1 	bl	8003556 <HAL_NVIC_EnableIRQ>
}
 8001d74:	46c0      	nop			; (mov r8, r8)
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b013      	add	sp, #76	; 0x4c
 8001d7a:	bd90      	pop	{r4, r7, pc}
 8001d7c:	40005400 	.word	0x40005400
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40005800 	.word	0x40005800
 8001d88:	50000400 	.word	0x50000400

08001d8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a3f      	ldr	r2, [pc, #252]	; (8001e98 <HAL_TIM_Base_MspInit+0x10c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d10e      	bne.n	8001dbc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d9e:	4b3f      	ldr	r3, [pc, #252]	; (8001e9c <HAL_TIM_Base_MspInit+0x110>)
 8001da0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001da2:	4b3e      	ldr	r3, [pc, #248]	; (8001e9c <HAL_TIM_Base_MspInit+0x110>)
 8001da4:	2180      	movs	r1, #128	; 0x80
 8001da6:	0109      	lsls	r1, r1, #4
 8001da8:	430a      	orrs	r2, r1
 8001daa:	641a      	str	r2, [r3, #64]	; 0x40
 8001dac:	4b3b      	ldr	r3, [pc, #236]	; (8001e9c <HAL_TIM_Base_MspInit+0x110>)
 8001dae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	011b      	lsls	r3, r3, #4
 8001db4:	4013      	ands	r3, r2
 8001db6:	61fb      	str	r3, [r7, #28]
 8001db8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001dba:	e068      	b.n	8001e8e <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM3)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a37      	ldr	r2, [pc, #220]	; (8001ea0 <HAL_TIM_Base_MspInit+0x114>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d114      	bne.n	8001df0 <HAL_TIM_Base_MspInit+0x64>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dc6:	4b35      	ldr	r3, [pc, #212]	; (8001e9c <HAL_TIM_Base_MspInit+0x110>)
 8001dc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dca:	4b34      	ldr	r3, [pc, #208]	; (8001e9c <HAL_TIM_Base_MspInit+0x110>)
 8001dcc:	2102      	movs	r1, #2
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	63da      	str	r2, [r3, #60]	; 0x3c
 8001dd2:	4b32      	ldr	r3, [pc, #200]	; (8001e9c <HAL_TIM_Base_MspInit+0x110>)
 8001dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
 8001ddc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001dde:	2200      	movs	r2, #0
 8001de0:	2100      	movs	r1, #0
 8001de2:	2010      	movs	r0, #16
 8001de4:	f001 fba2 	bl	800352c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001de8:	2010      	movs	r0, #16
 8001dea:	f001 fbb4 	bl	8003556 <HAL_NVIC_EnableIRQ>
}
 8001dee:	e04e      	b.n	8001e8e <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM6)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a2b      	ldr	r2, [pc, #172]	; (8001ea4 <HAL_TIM_Base_MspInit+0x118>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d114      	bne.n	8001e24 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001dfa:	4b28      	ldr	r3, [pc, #160]	; (8001e9c <HAL_TIM_Base_MspInit+0x110>)
 8001dfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dfe:	4b27      	ldr	r3, [pc, #156]	; (8001e9c <HAL_TIM_Base_MspInit+0x110>)
 8001e00:	2110      	movs	r1, #16
 8001e02:	430a      	orrs	r2, r1
 8001e04:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e06:	4b25      	ldr	r3, [pc, #148]	; (8001e9c <HAL_TIM_Base_MspInit+0x110>)
 8001e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0a:	2210      	movs	r2, #16
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_IRQn, 1, 0);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2101      	movs	r1, #1
 8001e16:	2011      	movs	r0, #17
 8001e18:	f001 fb88 	bl	800352c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001e1c:	2011      	movs	r0, #17
 8001e1e:	f001 fb9a 	bl	8003556 <HAL_NVIC_EnableIRQ>
}
 8001e22:	e034      	b.n	8001e8e <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM7)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a1f      	ldr	r2, [pc, #124]	; (8001ea8 <HAL_TIM_Base_MspInit+0x11c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d114      	bne.n	8001e58 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001e2e:	4b1b      	ldr	r3, [pc, #108]	; (8001e9c <HAL_TIM_Base_MspInit+0x110>)
 8001e30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e32:	4b1a      	ldr	r3, [pc, #104]	; (8001e9c <HAL_TIM_Base_MspInit+0x110>)
 8001e34:	2120      	movs	r1, #32
 8001e36:	430a      	orrs	r2, r1
 8001e38:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e3a:	4b18      	ldr	r3, [pc, #96]	; (8001e9c <HAL_TIM_Base_MspInit+0x110>)
 8001e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e3e:	2220      	movs	r2, #32
 8001e40:	4013      	ands	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2100      	movs	r1, #0
 8001e4a:	2012      	movs	r0, #18
 8001e4c:	f001 fb6e 	bl	800352c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001e50:	2012      	movs	r0, #18
 8001e52:	f001 fb80 	bl	8003556 <HAL_NVIC_EnableIRQ>
}
 8001e56:	e01a      	b.n	8001e8e <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM14)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a13      	ldr	r2, [pc, #76]	; (8001eac <HAL_TIM_Base_MspInit+0x120>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d115      	bne.n	8001e8e <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001e62:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <HAL_TIM_Base_MspInit+0x110>)
 8001e64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e66:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <HAL_TIM_Base_MspInit+0x110>)
 8001e68:	2180      	movs	r1, #128	; 0x80
 8001e6a:	0209      	lsls	r1, r1, #8
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	641a      	str	r2, [r3, #64]	; 0x40
 8001e70:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <HAL_TIM_Base_MspInit+0x110>)
 8001e72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	021b      	lsls	r3, r3, #8
 8001e78:	4013      	ands	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2100      	movs	r1, #0
 8001e82:	2013      	movs	r0, #19
 8001e84:	f001 fb52 	bl	800352c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001e88:	2013      	movs	r0, #19
 8001e8a:	f001 fb64 	bl	8003556 <HAL_NVIC_EnableIRQ>
}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	46bd      	mov	sp, r7
 8001e92:	b008      	add	sp, #32
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	40012c00 	.word	0x40012c00
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	40000400 	.word	0x40000400
 8001ea4:	40001000 	.word	0x40001000
 8001ea8:	40001400 	.word	0x40001400
 8001eac:	40002000 	.word	0x40002000

08001eb0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <HAL_TIM_PWM_MspInit+0x38>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d10d      	bne.n	8001ede <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <HAL_TIM_PWM_MspInit+0x3c>)
 8001ec4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <HAL_TIM_PWM_MspInit+0x3c>)
 8001ec8:	2180      	movs	r1, #128	; 0x80
 8001eca:	0249      	lsls	r1, r1, #9
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	641a      	str	r2, [r3, #64]	; 0x40
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_TIM_PWM_MspInit+0x3c>)
 8001ed2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ed4:	2380      	movs	r3, #128	; 0x80
 8001ed6:	025b      	lsls	r3, r3, #9
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	b004      	add	sp, #16
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	40014000 	.word	0x40014000
 8001eec:	40021000 	.word	0x40021000

08001ef0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ef0:	b590      	push	{r4, r7, lr}
 8001ef2:	b08d      	sub	sp, #52	; 0x34
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	241c      	movs	r4, #28
 8001efa:	193b      	adds	r3, r7, r4
 8001efc:	0018      	movs	r0, r3
 8001efe:	2314      	movs	r3, #20
 8001f00:	001a      	movs	r2, r3
 8001f02:	2100      	movs	r1, #0
 8001f04:	f006 f9c4 	bl	8008290 <memset>
  if(htim->Instance==TIM1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a4c      	ldr	r2, [pc, #304]	; (8002040 <HAL_TIM_MspPostInit+0x150>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d169      	bne.n	8001fe6 <HAL_TIM_MspPostInit+0xf6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f12:	4b4c      	ldr	r3, [pc, #304]	; (8002044 <HAL_TIM_MspPostInit+0x154>)
 8001f14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f16:	4b4b      	ldr	r3, [pc, #300]	; (8002044 <HAL_TIM_MspPostInit+0x154>)
 8001f18:	2104      	movs	r1, #4
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	635a      	str	r2, [r3, #52]	; 0x34
 8001f1e:	4b49      	ldr	r3, [pc, #292]	; (8002044 <HAL_TIM_MspPostInit+0x154>)
 8001f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f22:	2204      	movs	r2, #4
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
 8001f28:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2a:	4b46      	ldr	r3, [pc, #280]	; (8002044 <HAL_TIM_MspPostInit+0x154>)
 8001f2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f2e:	4b45      	ldr	r3, [pc, #276]	; (8002044 <HAL_TIM_MspPostInit+0x154>)
 8001f30:	2101      	movs	r1, #1
 8001f32:	430a      	orrs	r2, r1
 8001f34:	635a      	str	r2, [r3, #52]	; 0x34
 8001f36:	4b43      	ldr	r3, [pc, #268]	; (8002044 <HAL_TIM_MspPostInit+0x154>)
 8001f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f42:	4b40      	ldr	r3, [pc, #256]	; (8002044 <HAL_TIM_MspPostInit+0x154>)
 8001f44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f46:	4b3f      	ldr	r3, [pc, #252]	; (8002044 <HAL_TIM_MspPostInit+0x154>)
 8001f48:	2102      	movs	r1, #2
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	635a      	str	r2, [r3, #52]	; 0x34
 8001f4e:	4b3d      	ldr	r3, [pc, #244]	; (8002044 <HAL_TIM_MspPostInit+0x154>)
 8001f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f52:	2202      	movs	r2, #2
 8001f54:	4013      	ands	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	693b      	ldr	r3, [r7, #16]
    PC11     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    PC9     ------> TIM1_CH2
    PB6     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Motor2b_PWM_Pin|Motor1b_PWM_Pin;
 8001f5a:	193b      	adds	r3, r7, r4
 8001f5c:	22a0      	movs	r2, #160	; 0xa0
 8001f5e:	0112      	lsls	r2, r2, #4
 8001f60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f62:	193b      	adds	r3, r7, r4
 8001f64:	2202      	movs	r2, #2
 8001f66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	193b      	adds	r3, r7, r4
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6e:	193b      	adds	r3, r7, r4
 8001f70:	2200      	movs	r2, #0
 8001f72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001f74:	193b      	adds	r3, r7, r4
 8001f76:	2202      	movs	r2, #2
 8001f78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f7a:	193b      	adds	r3, r7, r4
 8001f7c:	4a32      	ldr	r2, [pc, #200]	; (8002048 <HAL_TIM_MspPostInit+0x158>)
 8001f7e:	0019      	movs	r1, r3
 8001f80:	0010      	movs	r0, r2
 8001f82:	f001 fdcd 	bl	8003b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Motor1a_PWM_Pin;
 8001f86:	0021      	movs	r1, r4
 8001f88:	187b      	adds	r3, r7, r1
 8001f8a:	2280      	movs	r2, #128	; 0x80
 8001f8c:	0052      	lsls	r2, r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f90:	000c      	movs	r4, r1
 8001f92:	193b      	adds	r3, r7, r4
 8001f94:	2202      	movs	r2, #2
 8001f96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	193b      	adds	r3, r7, r4
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9e:	193b      	adds	r3, r7, r4
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001fa4:	193b      	adds	r3, r7, r4
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Motor1a_PWM_GPIO_Port, &GPIO_InitStruct);
 8001faa:	193a      	adds	r2, r7, r4
 8001fac:	23a0      	movs	r3, #160	; 0xa0
 8001fae:	05db      	lsls	r3, r3, #23
 8001fb0:	0011      	movs	r1, r2
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	f001 fdb4 	bl	8003b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Motor2a_PWM_Pin;
 8001fb8:	0021      	movs	r1, r4
 8001fba:	187b      	adds	r3, r7, r1
 8001fbc:	2240      	movs	r2, #64	; 0x40
 8001fbe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	187b      	adds	r3, r7, r1
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	187b      	adds	r3, r7, r1
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fcc:	187b      	adds	r3, r7, r1
 8001fce:	2200      	movs	r2, #0
 8001fd0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fd2:	187b      	adds	r3, r7, r1
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Motor2a_PWM_GPIO_Port, &GPIO_InitStruct);
 8001fd8:	187b      	adds	r3, r7, r1
 8001fda:	4a1c      	ldr	r2, [pc, #112]	; (800204c <HAL_TIM_MspPostInit+0x15c>)
 8001fdc:	0019      	movs	r1, r3
 8001fde:	0010      	movs	r0, r2
 8001fe0:	f001 fd9e 	bl	8003b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001fe4:	e027      	b.n	8002036 <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM15)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a19      	ldr	r2, [pc, #100]	; (8002050 <HAL_TIM_MspPostInit+0x160>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d122      	bne.n	8002036 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff0:	4b14      	ldr	r3, [pc, #80]	; (8002044 <HAL_TIM_MspPostInit+0x154>)
 8001ff2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ff4:	4b13      	ldr	r3, [pc, #76]	; (8002044 <HAL_TIM_MspPostInit+0x154>)
 8001ff6:	2102      	movs	r1, #2
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	635a      	str	r2, [r3, #52]	; 0x34
 8001ffc:	4b11      	ldr	r3, [pc, #68]	; (8002044 <HAL_TIM_MspPostInit+0x154>)
 8001ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002000:	2202      	movs	r2, #2
 8002002:	4013      	ands	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO1_Pin|SERVO2_Pin;
 8002008:	211c      	movs	r1, #28
 800200a:	187b      	adds	r3, r7, r1
 800200c:	22c0      	movs	r2, #192	; 0xc0
 800200e:	0212      	lsls	r2, r2, #8
 8002010:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002012:	187b      	adds	r3, r7, r1
 8002014:	2202      	movs	r2, #2
 8002016:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	187b      	adds	r3, r7, r1
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201e:	187b      	adds	r3, r7, r1
 8002020:	2200      	movs	r2, #0
 8002022:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 8002024:	187b      	adds	r3, r7, r1
 8002026:	2205      	movs	r2, #5
 8002028:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202a:	187b      	adds	r3, r7, r1
 800202c:	4a07      	ldr	r2, [pc, #28]	; (800204c <HAL_TIM_MspPostInit+0x15c>)
 800202e:	0019      	movs	r1, r3
 8002030:	0010      	movs	r0, r2
 8002032:	f001 fd75 	bl	8003b20 <HAL_GPIO_Init>
}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	46bd      	mov	sp, r7
 800203a:	b00d      	add	sp, #52	; 0x34
 800203c:	bd90      	pop	{r4, r7, pc}
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	40012c00 	.word	0x40012c00
 8002044:	40021000 	.word	0x40021000
 8002048:	50000800 	.word	0x50000800
 800204c:	50000400 	.word	0x50000400
 8002050:	40014000 	.word	0x40014000

08002054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002058:	e7fe      	b.n	8002058 <NMI_Handler+0x4>

0800205a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800205e:	e7fe      	b.n	800205e <HardFault_Handler+0x4>

08002060 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002064:	46c0      	nop			; (mov r8, r8)
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800206e:	46c0      	nop			; (mov r8, r8)
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002078:	f000 f92e 	bl	80022d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800207c:	46c0      	nop			; (mov r8, r8)
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_BOOST_Pin);
 8002086:	2010      	movs	r0, #16
 8002088:	f001 ff04 	bl	8003e94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT_ACCEL_Pin);
 800208c:	2020      	movs	r0, #32
 800208e:	f001 ff01 	bl	8003e94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Hall1_1_Pin);
 8002092:	2040      	movs	r0, #64	; 0x40
 8002094:	f001 fefe 	bl	8003e94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Hall1_2_Pin);
 8002098:	2080      	movs	r0, #128	; 0x80
 800209a:	f001 fefb 	bl	8003e94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Hall2_1_Pin);
 800209e:	2380      	movs	r3, #128	; 0x80
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	0018      	movs	r0, r3
 80020a4:	f001 fef6 	bl	8003e94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Hall2_2_Pin);
 80020a8:	2380      	movs	r3, #128	; 0x80
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	0018      	movs	r0, r3
 80020ae:	f001 fef1 	bl	8003e94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ECHO_SONAR_Pin);
 80020b2:	2380      	movs	r3, #128	; 0x80
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	0018      	movs	r0, r3
 80020b8:	f001 feec 	bl	8003e94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ON_PRESS_Pin);
 80020bc:	2380      	movs	r3, #128	; 0x80
 80020be:	021b      	lsls	r3, r3, #8
 80020c0:	0018      	movs	r0, r3
 80020c2:	f001 fee7 	bl	8003e94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020d0:	4b03      	ldr	r3, [pc, #12]	; (80020e0 <DMA1_Channel1_IRQHandler+0x14>)
 80020d2:	0018      	movs	r0, r3
 80020d4:	f001 fbd6 	bl	8003884 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80020d8:	46c0      	nop			; (mov r8, r8)
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	2000008c 	.word	0x2000008c

080020e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020e8:	4b03      	ldr	r3, [pc, #12]	; (80020f8 <TIM3_IRQHandler+0x14>)
 80020ea:	0018      	movs	r0, r3
 80020ec:	f005 f888 	bl	8007200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80020f0:	46c0      	nop			; (mov r8, r8)
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	2000023c 	.word	0x2000023c

080020fc <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002100:	4b03      	ldr	r3, [pc, #12]	; (8002110 <TIM6_IRQHandler+0x14>)
 8002102:	0018      	movs	r0, r3
 8002104:	f005 f87c 	bl	8007200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002108:	46c0      	nop			; (mov r8, r8)
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	20000288 	.word	0x20000288

08002114 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002118:	4b03      	ldr	r3, [pc, #12]	; (8002128 <TIM7_IRQHandler+0x14>)
 800211a:	0018      	movs	r0, r3
 800211c:	f005 f870 	bl	8007200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002120:	46c0      	nop			; (mov r8, r8)
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	200002d4 	.word	0x200002d4

0800212c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002130:	4b03      	ldr	r3, [pc, #12]	; (8002140 <TIM14_IRQHandler+0x14>)
 8002132:	0018      	movs	r0, r3
 8002134:	f005 f864 	bl	8007200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8002138:	46c0      	nop			; (mov r8, r8)
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	20000320 	.word	0x20000320

08002144 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002148:	4b09      	ldr	r3, [pc, #36]	; (8002170 <I2C1_IRQHandler+0x2c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	699a      	ldr	r2, [r3, #24]
 800214e:	23e0      	movs	r3, #224	; 0xe0
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4013      	ands	r3, r2
 8002154:	d004      	beq.n	8002160 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <I2C1_IRQHandler+0x2c>)
 8002158:	0018      	movs	r0, r3
 800215a:	f002 fbb7 	bl	80048cc <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800215e:	e003      	b.n	8002168 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8002160:	4b03      	ldr	r3, [pc, #12]	; (8002170 <I2C1_IRQHandler+0x2c>)
 8002162:	0018      	movs	r0, r3
 8002164:	f002 fb98 	bl	8004898 <HAL_I2C_EV_IRQHandler>
}
 8002168:	46c0      	nop			; (mov r8, r8)
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	200000e8 	.word	0x200000e8

08002174 <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 global interrupt.
  */
void I2C2_IRQHandler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002178:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <I2C2_IRQHandler+0x2c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	699a      	ldr	r2, [r3, #24]
 800217e:	23e0      	movs	r3, #224	; 0xe0
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	4013      	ands	r3, r2
 8002184:	d004      	beq.n	8002190 <I2C2_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 8002186:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <I2C2_IRQHandler+0x2c>)
 8002188:	0018      	movs	r0, r3
 800218a:	f002 fb9f 	bl	80048cc <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 800218e:	e003      	b.n	8002198 <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 8002190:	4b03      	ldr	r3, [pc, #12]	; (80021a0 <I2C2_IRQHandler+0x2c>)
 8002192:	0018      	movs	r0, r3
 8002194:	f002 fb80 	bl	8004898 <HAL_I2C_EV_IRQHandler>
}
 8002198:	46c0      	nop			; (mov r8, r8)
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	2000016c 	.word	0x2000016c

080021a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021a8:	46c0      	nop			; (mov r8, r8)
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021b0:	480d      	ldr	r0, [pc, #52]	; (80021e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80021b4:	f7ff fff6 	bl	80021a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021b8:	480c      	ldr	r0, [pc, #48]	; (80021ec <LoopForever+0x6>)
  ldr r1, =_edata
 80021ba:	490d      	ldr	r1, [pc, #52]	; (80021f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021bc:	4a0d      	ldr	r2, [pc, #52]	; (80021f4 <LoopForever+0xe>)
  movs r3, #0
 80021be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021c0:	e002      	b.n	80021c8 <LoopCopyDataInit>

080021c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021c6:	3304      	adds	r3, #4

080021c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021cc:	d3f9      	bcc.n	80021c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ce:	4a0a      	ldr	r2, [pc, #40]	; (80021f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021d0:	4c0a      	ldr	r4, [pc, #40]	; (80021fc <LoopForever+0x16>)
  movs r3, #0
 80021d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021d4:	e001      	b.n	80021da <LoopFillZerobss>

080021d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021d8:	3204      	adds	r2, #4

080021da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021dc:	d3fb      	bcc.n	80021d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80021de:	f006 f85f 	bl	80082a0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80021e2:	f7fe fdc7 	bl	8000d74 <main>

080021e6 <LoopForever>:

LoopForever:
  b LoopForever
 80021e6:	e7fe      	b.n	80021e6 <LoopForever>
  ldr   r0, =_estack
 80021e8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80021ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80021f4:	080083dc 	.word	0x080083dc
  ldr r2, =_sbss
 80021f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80021fc:	20000438 	.word	0x20000438

08002200 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002200:	e7fe      	b.n	8002200 <ADC1_IRQHandler>
	...

08002204 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800220a:	1dfb      	adds	r3, r7, #7
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002210:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <HAL_Init+0x3c>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <HAL_Init+0x3c>)
 8002216:	2180      	movs	r1, #128	; 0x80
 8002218:	0049      	lsls	r1, r1, #1
 800221a:	430a      	orrs	r2, r1
 800221c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800221e:	2003      	movs	r0, #3
 8002220:	f000 f810 	bl	8002244 <HAL_InitTick>
 8002224:	1e03      	subs	r3, r0, #0
 8002226:	d003      	beq.n	8002230 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002228:	1dfb      	adds	r3, r7, #7
 800222a:	2201      	movs	r2, #1
 800222c:	701a      	strb	r2, [r3, #0]
 800222e:	e001      	b.n	8002234 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002230:	f7ff fc06 	bl	8001a40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002234:	1dfb      	adds	r3, r7, #7
 8002236:	781b      	ldrb	r3, [r3, #0]
}
 8002238:	0018      	movs	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	b002      	add	sp, #8
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40022000 	.word	0x40022000

08002244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002244:	b590      	push	{r4, r7, lr}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800224c:	230f      	movs	r3, #15
 800224e:	18fb      	adds	r3, r7, r3
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002254:	4b1d      	ldr	r3, [pc, #116]	; (80022cc <HAL_InitTick+0x88>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d02b      	beq.n	80022b4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800225c:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <HAL_InitTick+0x8c>)
 800225e:	681c      	ldr	r4, [r3, #0]
 8002260:	4b1a      	ldr	r3, [pc, #104]	; (80022cc <HAL_InitTick+0x88>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	0019      	movs	r1, r3
 8002266:	23fa      	movs	r3, #250	; 0xfa
 8002268:	0098      	lsls	r0, r3, #2
 800226a:	f7fd ff49 	bl	8000100 <__udivsi3>
 800226e:	0003      	movs	r3, r0
 8002270:	0019      	movs	r1, r3
 8002272:	0020      	movs	r0, r4
 8002274:	f7fd ff44 	bl	8000100 <__udivsi3>
 8002278:	0003      	movs	r3, r0
 800227a:	0018      	movs	r0, r3
 800227c:	f001 f97b 	bl	8003576 <HAL_SYSTICK_Config>
 8002280:	1e03      	subs	r3, r0, #0
 8002282:	d112      	bne.n	80022aa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b03      	cmp	r3, #3
 8002288:	d80a      	bhi.n	80022a0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	2301      	movs	r3, #1
 800228e:	425b      	negs	r3, r3
 8002290:	2200      	movs	r2, #0
 8002292:	0018      	movs	r0, r3
 8002294:	f001 f94a 	bl	800352c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002298:	4b0e      	ldr	r3, [pc, #56]	; (80022d4 <HAL_InitTick+0x90>)
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	e00d      	b.n	80022bc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80022a0:	230f      	movs	r3, #15
 80022a2:	18fb      	adds	r3, r7, r3
 80022a4:	2201      	movs	r2, #1
 80022a6:	701a      	strb	r2, [r3, #0]
 80022a8:	e008      	b.n	80022bc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022aa:	230f      	movs	r3, #15
 80022ac:	18fb      	adds	r3, r7, r3
 80022ae:	2201      	movs	r2, #1
 80022b0:	701a      	strb	r2, [r3, #0]
 80022b2:	e003      	b.n	80022bc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022b4:	230f      	movs	r3, #15
 80022b6:	18fb      	adds	r3, r7, r3
 80022b8:	2201      	movs	r2, #1
 80022ba:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80022bc:	230f      	movs	r3, #15
 80022be:	18fb      	adds	r3, r7, r3
 80022c0:	781b      	ldrb	r3, [r3, #0]
}
 80022c2:	0018      	movs	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	b005      	add	sp, #20
 80022c8:	bd90      	pop	{r4, r7, pc}
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	20000008 	.word	0x20000008
 80022d0:	20000000 	.word	0x20000000
 80022d4:	20000004 	.word	0x20000004

080022d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <HAL_IncTick+0x1c>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	001a      	movs	r2, r3
 80022e2:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <HAL_IncTick+0x20>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	18d2      	adds	r2, r2, r3
 80022e8:	4b03      	ldr	r3, [pc, #12]	; (80022f8 <HAL_IncTick+0x20>)
 80022ea:	601a      	str	r2, [r3, #0]
}
 80022ec:	46c0      	nop			; (mov r8, r8)
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	46c0      	nop			; (mov r8, r8)
 80022f4:	20000008 	.word	0x20000008
 80022f8:	20000434 	.word	0x20000434

080022fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002300:	4b02      	ldr	r3, [pc, #8]	; (800230c <HAL_GetTick+0x10>)
 8002302:	681b      	ldr	r3, [r3, #0]
}
 8002304:	0018      	movs	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	20000434 	.word	0x20000434

08002310 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002318:	f7ff fff0 	bl	80022fc <HAL_GetTick>
 800231c:	0003      	movs	r3, r0
 800231e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	3301      	adds	r3, #1
 8002328:	d005      	beq.n	8002336 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800232a:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <HAL_Delay+0x44>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	001a      	movs	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	189b      	adds	r3, r3, r2
 8002334:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	f7ff ffe0 	bl	80022fc <HAL_GetTick>
 800233c:	0002      	movs	r2, r0
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	429a      	cmp	r2, r3
 8002346:	d8f7      	bhi.n	8002338 <HAL_Delay+0x28>
  {
  }
}
 8002348:	46c0      	nop			; (mov r8, r8)
 800234a:	46c0      	nop			; (mov r8, r8)
 800234c:	46bd      	mov	sp, r7
 800234e:	b004      	add	sp, #16
 8002350:	bd80      	pop	{r7, pc}
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	20000008 	.word	0x20000008

08002358 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a05      	ldr	r2, [pc, #20]	; (800237c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002368:	401a      	ands	r2, r3
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	431a      	orrs	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	601a      	str	r2, [r3, #0]
}
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	46bd      	mov	sp, r7
 8002376:	b002      	add	sp, #8
 8002378:	bd80      	pop	{r7, pc}
 800237a:	46c0      	nop			; (mov r8, r8)
 800237c:	fe3fffff 	.word	0xfe3fffff

08002380 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	23e0      	movs	r3, #224	; 0xe0
 800238e:	045b      	lsls	r3, r3, #17
 8002390:	4013      	ands	r3, r2
}
 8002392:	0018      	movs	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	b002      	add	sp, #8
 8002398:	bd80      	pop	{r7, pc}

0800239a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b084      	sub	sp, #16
 800239e:	af00      	add	r7, sp, #0
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	2104      	movs	r1, #4
 80023ae:	400a      	ands	r2, r1
 80023b0:	2107      	movs	r1, #7
 80023b2:	4091      	lsls	r1, r2
 80023b4:	000a      	movs	r2, r1
 80023b6:	43d2      	mvns	r2, r2
 80023b8:	401a      	ands	r2, r3
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2104      	movs	r1, #4
 80023be:	400b      	ands	r3, r1
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	4099      	lsls	r1, r3
 80023c4:	000b      	movs	r3, r1
 80023c6:	431a      	orrs	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80023cc:	46c0      	nop			; (mov r8, r8)
 80023ce:	46bd      	mov	sp, r7
 80023d0:	b004      	add	sp, #16
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	2104      	movs	r1, #4
 80023e6:	400a      	ands	r2, r1
 80023e8:	2107      	movs	r1, #7
 80023ea:	4091      	lsls	r1, r2
 80023ec:	000a      	movs	r2, r1
 80023ee:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	2104      	movs	r1, #4
 80023f4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80023f6:	40da      	lsrs	r2, r3
 80023f8:	0013      	movs	r3, r2
}
 80023fa:	0018      	movs	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	b002      	add	sp, #8
 8002400:	bd80      	pop	{r7, pc}

08002402 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	23c0      	movs	r3, #192	; 0xc0
 8002410:	011b      	lsls	r3, r3, #4
 8002412:	4013      	ands	r3, r2
 8002414:	d101      	bne.n	800241a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800241a:	2300      	movs	r3, #0
}
 800241c:	0018      	movs	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	b002      	add	sp, #8
 8002422:	bd80      	pop	{r7, pc}

08002424 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	211f      	movs	r1, #31
 8002438:	400a      	ands	r2, r1
 800243a:	210f      	movs	r1, #15
 800243c:	4091      	lsls	r1, r2
 800243e:	000a      	movs	r2, r1
 8002440:	43d2      	mvns	r2, r2
 8002442:	401a      	ands	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	0e9b      	lsrs	r3, r3, #26
 8002448:	210f      	movs	r1, #15
 800244a:	4019      	ands	r1, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	201f      	movs	r0, #31
 8002450:	4003      	ands	r3, r0
 8002452:	4099      	lsls	r1, r3
 8002454:	000b      	movs	r3, r1
 8002456:	431a      	orrs	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800245c:	46c0      	nop			; (mov r8, r8)
 800245e:	46bd      	mov	sp, r7
 8002460:	b004      	add	sp, #16
 8002462:	bd80      	pop	{r7, pc}

08002464 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	035b      	lsls	r3, r3, #13
 8002476:	0b5b      	lsrs	r3, r3, #13
 8002478:	431a      	orrs	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800247e:	46c0      	nop			; (mov r8, r8)
 8002480:	46bd      	mov	sp, r7
 8002482:	b002      	add	sp, #8
 8002484:	bd80      	pop	{r7, pc}

08002486 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
 800248e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	0352      	lsls	r2, r2, #13
 8002498:	0b52      	lsrs	r2, r2, #13
 800249a:	43d2      	mvns	r2, r2
 800249c:	401a      	ands	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024a2:	46c0      	nop			; (mov r8, r8)
 80024a4:	46bd      	mov	sp, r7
 80024a6:	b002      	add	sp, #8
 80024a8:	bd80      	pop	{r7, pc}
	...

080024ac <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	68ba      	ldr	r2, [r7, #8]
 80024be:	0212      	lsls	r2, r2, #8
 80024c0:	43d2      	mvns	r2, r2
 80024c2:	401a      	ands	r2, r3
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	021b      	lsls	r3, r3, #8
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	400b      	ands	r3, r1
 80024cc:	4904      	ldr	r1, [pc, #16]	; (80024e0 <LL_ADC_SetChannelSamplingTime+0x34>)
 80024ce:	400b      	ands	r3, r1
 80024d0:	431a      	orrs	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80024d6:	46c0      	nop			; (mov r8, r8)
 80024d8:	46bd      	mov	sp, r7
 80024da:	b004      	add	sp, #16
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	46c0      	nop			; (mov r8, r8)
 80024e0:	07ffff00 	.word	0x07ffff00

080024e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	4a05      	ldr	r2, [pc, #20]	; (8002508 <LL_ADC_EnableInternalRegulator+0x24>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	2280      	movs	r2, #128	; 0x80
 80024f6:	0552      	lsls	r2, r2, #21
 80024f8:	431a      	orrs	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	46bd      	mov	sp, r7
 8002502:	b002      	add	sp, #8
 8002504:	bd80      	pop	{r7, pc}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	6fffffe8 	.word	0x6fffffe8

0800250c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	2380      	movs	r3, #128	; 0x80
 800251a:	055b      	lsls	r3, r3, #21
 800251c:	401a      	ands	r2, r3
 800251e:	2380      	movs	r3, #128	; 0x80
 8002520:	055b      	lsls	r3, r3, #21
 8002522:	429a      	cmp	r2, r3
 8002524:	d101      	bne.n	800252a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800252a:	2300      	movs	r3, #0
}
 800252c:	0018      	movs	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	b002      	add	sp, #8
 8002532:	bd80      	pop	{r7, pc}

08002534 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	4a04      	ldr	r2, [pc, #16]	; (8002554 <LL_ADC_Enable+0x20>)
 8002542:	4013      	ands	r3, r2
 8002544:	2201      	movs	r2, #1
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800254c:	46c0      	nop			; (mov r8, r8)
 800254e:	46bd      	mov	sp, r7
 8002550:	b002      	add	sp, #8
 8002552:	bd80      	pop	{r7, pc}
 8002554:	7fffffe8 	.word	0x7fffffe8

08002558 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	4a04      	ldr	r2, [pc, #16]	; (8002578 <LL_ADC_Disable+0x20>)
 8002566:	4013      	ands	r3, r2
 8002568:	2202      	movs	r2, #2
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002570:	46c0      	nop			; (mov r8, r8)
 8002572:	46bd      	mov	sp, r7
 8002574:	b002      	add	sp, #8
 8002576:	bd80      	pop	{r7, pc}
 8002578:	7fffffe8 	.word	0x7fffffe8

0800257c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	2201      	movs	r2, #1
 800258a:	4013      	ands	r3, r2
 800258c:	2b01      	cmp	r3, #1
 800258e:	d101      	bne.n	8002594 <LL_ADC_IsEnabled+0x18>
 8002590:	2301      	movs	r3, #1
 8002592:	e000      	b.n	8002596 <LL_ADC_IsEnabled+0x1a>
 8002594:	2300      	movs	r3, #0
}
 8002596:	0018      	movs	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	b002      	add	sp, #8
 800259c:	bd80      	pop	{r7, pc}

0800259e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b082      	sub	sp, #8
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2202      	movs	r2, #2
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d101      	bne.n	80025b6 <LL_ADC_IsDisableOngoing+0x18>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <LL_ADC_IsDisableOngoing+0x1a>
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	0018      	movs	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	b002      	add	sp, #8
 80025be:	bd80      	pop	{r7, pc}

080025c0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	4a04      	ldr	r2, [pc, #16]	; (80025e0 <LL_ADC_REG_StartConversion+0x20>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	2204      	movs	r2, #4
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80025d8:	46c0      	nop			; (mov r8, r8)
 80025da:	46bd      	mov	sp, r7
 80025dc:	b002      	add	sp, #8
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	7fffffe8 	.word	0x7fffffe8

080025e4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2204      	movs	r2, #4
 80025f2:	4013      	ands	r3, r2
 80025f4:	2b04      	cmp	r3, #4
 80025f6:	d101      	bne.n	80025fc <LL_ADC_REG_IsConversionOngoing+0x18>
 80025f8:	2301      	movs	r3, #1
 80025fa:	e000      	b.n	80025fe <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	0018      	movs	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	b002      	add	sp, #8
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b088      	sub	sp, #32
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002610:	231f      	movs	r3, #31
 8002612:	18fb      	adds	r3, r7, r3
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8002618:	2300      	movs	r3, #0
 800261a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e17f      	b.n	800292e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10a      	bne.n	800264c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	0018      	movs	r0, r3
 800263a:	f7ff fa33 	bl	8001aa4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2254      	movs	r2, #84	; 0x54
 8002648:	2100      	movs	r1, #0
 800264a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	0018      	movs	r0, r3
 8002652:	f7ff ff5b 	bl	800250c <LL_ADC_IsInternalRegulatorEnabled>
 8002656:	1e03      	subs	r3, r0, #0
 8002658:	d115      	bne.n	8002686 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	0018      	movs	r0, r3
 8002660:	f7ff ff40 	bl	80024e4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002664:	4bb4      	ldr	r3, [pc, #720]	; (8002938 <HAL_ADC_Init+0x330>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	49b4      	ldr	r1, [pc, #720]	; (800293c <HAL_ADC_Init+0x334>)
 800266a:	0018      	movs	r0, r3
 800266c:	f7fd fd48 	bl	8000100 <__udivsi3>
 8002670:	0003      	movs	r3, r0
 8002672:	3301      	adds	r3, #1
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002678:	e002      	b.n	8002680 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	3b01      	subs	r3, #1
 800267e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f9      	bne.n	800267a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	0018      	movs	r0, r3
 800268c:	f7ff ff3e 	bl	800250c <LL_ADC_IsInternalRegulatorEnabled>
 8002690:	1e03      	subs	r3, r0, #0
 8002692:	d10f      	bne.n	80026b4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002698:	2210      	movs	r2, #16
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a4:	2201      	movs	r2, #1
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80026ac:	231f      	movs	r3, #31
 80026ae:	18fb      	adds	r3, r7, r3
 80026b0:	2201      	movs	r2, #1
 80026b2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	0018      	movs	r0, r3
 80026ba:	f7ff ff93 	bl	80025e4 <LL_ADC_REG_IsConversionOngoing>
 80026be:	0003      	movs	r3, r0
 80026c0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c6:	2210      	movs	r2, #16
 80026c8:	4013      	ands	r3, r2
 80026ca:	d000      	beq.n	80026ce <HAL_ADC_Init+0xc6>
 80026cc:	e122      	b.n	8002914 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d000      	beq.n	80026d6 <HAL_ADC_Init+0xce>
 80026d4:	e11e      	b.n	8002914 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026da:	4a99      	ldr	r2, [pc, #612]	; (8002940 <HAL_ADC_Init+0x338>)
 80026dc:	4013      	ands	r3, r2
 80026de:	2202      	movs	r2, #2
 80026e0:	431a      	orrs	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	0018      	movs	r0, r3
 80026ec:	f7ff ff46 	bl	800257c <LL_ADC_IsEnabled>
 80026f0:	1e03      	subs	r3, r0, #0
 80026f2:	d000      	beq.n	80026f6 <HAL_ADC_Init+0xee>
 80026f4:	e0ad      	b.n	8002852 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	7e1b      	ldrb	r3, [r3, #24]
 80026fe:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002700:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	7e5b      	ldrb	r3, [r3, #25]
 8002706:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002708:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	7e9b      	ldrb	r3, [r3, #26]
 800270e:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002710:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	2b00      	cmp	r3, #0
 8002718:	d002      	beq.n	8002720 <HAL_ADC_Init+0x118>
 800271a:	2380      	movs	r3, #128	; 0x80
 800271c:	015b      	lsls	r3, r3, #5
 800271e:	e000      	b.n	8002722 <HAL_ADC_Init+0x11a>
 8002720:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002722:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002728:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	2b00      	cmp	r3, #0
 8002730:	da04      	bge.n	800273c <HAL_ADC_Init+0x134>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	085b      	lsrs	r3, r3, #1
 800273a:	e001      	b.n	8002740 <HAL_ADC_Init+0x138>
 800273c:	2380      	movs	r3, #128	; 0x80
 800273e:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8002740:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	212c      	movs	r1, #44	; 0x2c
 8002746:	5c5b      	ldrb	r3, [r3, r1]
 8002748:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800274a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2220      	movs	r2, #32
 8002756:	5c9b      	ldrb	r3, [r3, r2]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d115      	bne.n	8002788 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	7e9b      	ldrb	r3, [r3, #26]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d105      	bne.n	8002770 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	2280      	movs	r2, #128	; 0x80
 8002768:	0252      	lsls	r2, r2, #9
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
 800276e:	e00b      	b.n	8002788 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002774:	2220      	movs	r2, #32
 8002776:	431a      	orrs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002780:	2201      	movs	r2, #1
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00a      	beq.n	80027a6 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002794:	23e0      	movs	r3, #224	; 0xe0
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800279e:	4313      	orrs	r3, r2
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	4a65      	ldr	r2, [pc, #404]	; (8002944 <HAL_ADC_Init+0x33c>)
 80027ae:	4013      	ands	r3, r2
 80027b0:	0019      	movs	r1, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	0f9b      	lsrs	r3, r3, #30
 80027c2:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80027c8:	4313      	orrs	r3, r2
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	223c      	movs	r2, #60	; 0x3c
 80027d4:	5c9b      	ldrb	r3, [r3, r2]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d111      	bne.n	80027fe <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	0f9b      	lsrs	r3, r3, #30
 80027e0:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80027e6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80027ec:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80027f2:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	2201      	movs	r2, #1
 80027fa:	4313      	orrs	r3, r2
 80027fc:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	4a50      	ldr	r2, [pc, #320]	; (8002948 <HAL_ADC_Init+0x340>)
 8002806:	4013      	ands	r3, r2
 8002808:	0019      	movs	r1, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	430a      	orrs	r2, r1
 8002812:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	23c0      	movs	r3, #192	; 0xc0
 800281a:	061b      	lsls	r3, r3, #24
 800281c:	429a      	cmp	r2, r3
 800281e:	d018      	beq.n	8002852 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002824:	2380      	movs	r3, #128	; 0x80
 8002826:	05db      	lsls	r3, r3, #23
 8002828:	429a      	cmp	r2, r3
 800282a:	d012      	beq.n	8002852 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002830:	2380      	movs	r3, #128	; 0x80
 8002832:	061b      	lsls	r3, r3, #24
 8002834:	429a      	cmp	r2, r3
 8002836:	d00c      	beq.n	8002852 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002838:	4b44      	ldr	r3, [pc, #272]	; (800294c <HAL_ADC_Init+0x344>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a44      	ldr	r2, [pc, #272]	; (8002950 <HAL_ADC_Init+0x348>)
 800283e:	4013      	ands	r3, r2
 8002840:	0019      	movs	r1, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	23f0      	movs	r3, #240	; 0xf0
 8002848:	039b      	lsls	r3, r3, #14
 800284a:	401a      	ands	r2, r3
 800284c:	4b3f      	ldr	r3, [pc, #252]	; (800294c <HAL_ADC_Init+0x344>)
 800284e:	430a      	orrs	r2, r1
 8002850:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6818      	ldr	r0, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285a:	001a      	movs	r2, r3
 800285c:	2100      	movs	r1, #0
 800285e:	f7ff fd9c 	bl	800239a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6818      	ldr	r0, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286a:	493a      	ldr	r1, [pc, #232]	; (8002954 <HAL_ADC_Init+0x34c>)
 800286c:	001a      	movs	r2, r3
 800286e:	f7ff fd94 	bl	800239a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d109      	bne.n	800288e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2110      	movs	r1, #16
 8002886:	4249      	negs	r1, r1
 8002888:	430a      	orrs	r2, r1
 800288a:	629a      	str	r2, [r3, #40]	; 0x28
 800288c:	e018      	b.n	80028c0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691a      	ldr	r2, [r3, #16]
 8002892:	2380      	movs	r3, #128	; 0x80
 8002894:	039b      	lsls	r3, r3, #14
 8002896:	429a      	cmp	r2, r3
 8002898:	d112      	bne.n	80028c0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	3b01      	subs	r3, #1
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	221c      	movs	r2, #28
 80028aa:	4013      	ands	r3, r2
 80028ac:	2210      	movs	r2, #16
 80028ae:	4252      	negs	r2, r2
 80028b0:	409a      	lsls	r2, r3
 80028b2:	0011      	movs	r1, r2
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2100      	movs	r1, #0
 80028c6:	0018      	movs	r0, r3
 80028c8:	f7ff fd84 	bl	80023d4 <LL_ADC_GetSamplingTimeCommonChannels>
 80028cc:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d10b      	bne.n	80028ee <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e0:	2203      	movs	r2, #3
 80028e2:	4393      	bics	r3, r2
 80028e4:	2201      	movs	r2, #1
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80028ec:	e01c      	b.n	8002928 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f2:	2212      	movs	r2, #18
 80028f4:	4393      	bics	r3, r2
 80028f6:	2210      	movs	r2, #16
 80028f8:	431a      	orrs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002902:	2201      	movs	r2, #1
 8002904:	431a      	orrs	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800290a:	231f      	movs	r3, #31
 800290c:	18fb      	adds	r3, r7, r3
 800290e:	2201      	movs	r2, #1
 8002910:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002912:	e009      	b.n	8002928 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002918:	2210      	movs	r2, #16
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002920:	231f      	movs	r3, #31
 8002922:	18fb      	adds	r3, r7, r3
 8002924:	2201      	movs	r2, #1
 8002926:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002928:	231f      	movs	r3, #31
 800292a:	18fb      	adds	r3, r7, r3
 800292c:	781b      	ldrb	r3, [r3, #0]
}
 800292e:	0018      	movs	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	b008      	add	sp, #32
 8002934:	bd80      	pop	{r7, pc}
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	20000000 	.word	0x20000000
 800293c:	00030d40 	.word	0x00030d40
 8002940:	fffffefd 	.word	0xfffffefd
 8002944:	fffe0201 	.word	0xfffe0201
 8002948:	1ffffc02 	.word	0x1ffffc02
 800294c:	40012708 	.word	0x40012708
 8002950:	ffc3ffff 	.word	0xffc3ffff
 8002954:	07ffff04 	.word	0x07ffff04

08002958 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002958:	b5b0      	push	{r4, r5, r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	0018      	movs	r0, r3
 800296a:	f7ff fe3b 	bl	80025e4 <LL_ADC_REG_IsConversionOngoing>
 800296e:	1e03      	subs	r3, r0, #0
 8002970:	d16c      	bne.n	8002a4c <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2254      	movs	r2, #84	; 0x54
 8002976:	5c9b      	ldrb	r3, [r3, r2]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d101      	bne.n	8002980 <HAL_ADC_Start_DMA+0x28>
 800297c:	2302      	movs	r3, #2
 800297e:	e06c      	b.n	8002a5a <HAL_ADC_Start_DMA+0x102>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2254      	movs	r2, #84	; 0x54
 8002984:	2101      	movs	r1, #1
 8002986:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	2201      	movs	r2, #1
 8002990:	4013      	ands	r3, r2
 8002992:	d113      	bne.n	80029bc <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	0018      	movs	r0, r3
 800299a:	f7ff fdef 	bl	800257c <LL_ADC_IsEnabled>
 800299e:	1e03      	subs	r3, r0, #0
 80029a0:	d004      	beq.n	80029ac <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	0018      	movs	r0, r3
 80029a8:	f7ff fdd6 	bl	8002558 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2101      	movs	r1, #1
 80029b8:	430a      	orrs	r2, r1
 80029ba:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80029bc:	2517      	movs	r5, #23
 80029be:	197c      	adds	r4, r7, r5
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	0018      	movs	r0, r3
 80029c4:	f000 fa3e 	bl	8002e44 <ADC_Enable>
 80029c8:	0003      	movs	r3, r0
 80029ca:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80029cc:	002c      	movs	r4, r5
 80029ce:	193b      	adds	r3, r7, r4
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d13e      	bne.n	8002a54 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029da:	4a22      	ldr	r2, [pc, #136]	; (8002a64 <HAL_ADC_Start_DMA+0x10c>)
 80029dc:	4013      	ands	r3, r2
 80029de:	2280      	movs	r2, #128	; 0x80
 80029e0:	0052      	lsls	r2, r2, #1
 80029e2:	431a      	orrs	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f2:	4a1d      	ldr	r2, [pc, #116]	; (8002a68 <HAL_ADC_Start_DMA+0x110>)
 80029f4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029fa:	4a1c      	ldr	r2, [pc, #112]	; (8002a6c <HAL_ADC_Start_DMA+0x114>)
 80029fc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a02:	4a1b      	ldr	r2, [pc, #108]	; (8002a70 <HAL_ADC_Start_DMA+0x118>)
 8002a04:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	221c      	movs	r2, #28
 8002a0c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2254      	movs	r2, #84	; 0x54
 8002a12:	2100      	movs	r1, #0
 8002a14:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2110      	movs	r1, #16
 8002a22:	430a      	orrs	r2, r1
 8002a24:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	3340      	adds	r3, #64	; 0x40
 8002a30:	0019      	movs	r1, r3
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	193c      	adds	r4, r7, r4
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f000 fe34 	bl	80036a4 <HAL_DMA_Start_IT>
 8002a3c:	0003      	movs	r3, r0
 8002a3e:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	0018      	movs	r0, r3
 8002a46:	f7ff fdbb 	bl	80025c0 <LL_ADC_REG_StartConversion>
 8002a4a:	e003      	b.n	8002a54 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a4c:	2317      	movs	r3, #23
 8002a4e:	18fb      	adds	r3, r7, r3
 8002a50:	2202      	movs	r2, #2
 8002a52:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002a54:	2317      	movs	r3, #23
 8002a56:	18fb      	adds	r3, r7, r3
 8002a58:	781b      	ldrb	r3, [r3, #0]
}
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	b006      	add	sp, #24
 8002a60:	bdb0      	pop	{r4, r5, r7, pc}
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	fffff0fe 	.word	0xfffff0fe
 8002a68:	0800300d 	.word	0x0800300d
 8002a6c:	080030d5 	.word	0x080030d5
 8002a70:	080030f3 	.word	0x080030f3

08002a74 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002a7c:	46c0      	nop			; (mov r8, r8)
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	b002      	add	sp, #8
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a8c:	46c0      	nop			; (mov r8, r8)
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	b002      	add	sp, #8
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a9e:	2317      	movs	r3, #23
 8002aa0:	18fb      	adds	r3, r7, r3
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2254      	movs	r2, #84	; 0x54
 8002aae:	5c9b      	ldrb	r3, [r3, r2]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_ADC_ConfigChannel+0x24>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e1c0      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x3a6>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2254      	movs	r2, #84	; 0x54
 8002abc:	2101      	movs	r1, #1
 8002abe:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f7ff fd8d 	bl	80025e4 <LL_ADC_REG_IsConversionOngoing>
 8002aca:	1e03      	subs	r3, r0, #0
 8002acc:	d000      	beq.n	8002ad0 <HAL_ADC_ConfigChannel+0x3c>
 8002ace:	e1a3      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d100      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x46>
 8002ad8:	e143      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691a      	ldr	r2, [r3, #16]
 8002ade:	2380      	movs	r3, #128	; 0x80
 8002ae0:	061b      	lsls	r3, r3, #24
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d004      	beq.n	8002af0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002aea:	4ac1      	ldr	r2, [pc, #772]	; (8002df0 <HAL_ADC_ConfigChannel+0x35c>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d108      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	0019      	movs	r1, r3
 8002afa:	0010      	movs	r0, r2
 8002afc:	f7ff fcb2 	bl	8002464 <LL_ADC_REG_SetSequencerChAdd>
 8002b00:	e0c9      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	211f      	movs	r1, #31
 8002b0c:	400b      	ands	r3, r1
 8002b0e:	210f      	movs	r1, #15
 8002b10:	4099      	lsls	r1, r3
 8002b12:	000b      	movs	r3, r1
 8002b14:	43db      	mvns	r3, r3
 8002b16:	4013      	ands	r3, r2
 8002b18:	0019      	movs	r1, r3
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	035b      	lsls	r3, r3, #13
 8002b20:	0b5b      	lsrs	r3, r3, #13
 8002b22:	d105      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x9c>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	0e9b      	lsrs	r3, r3, #26
 8002b2a:	221f      	movs	r2, #31
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	e098      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x1ce>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2201      	movs	r2, #1
 8002b36:	4013      	ands	r3, r2
 8002b38:	d000      	beq.n	8002b3c <HAL_ADC_ConfigChannel+0xa8>
 8002b3a:	e091      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x1cc>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2202      	movs	r2, #2
 8002b42:	4013      	ands	r3, r2
 8002b44:	d000      	beq.n	8002b48 <HAL_ADC_ConfigChannel+0xb4>
 8002b46:	e089      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x1c8>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2204      	movs	r2, #4
 8002b4e:	4013      	ands	r3, r2
 8002b50:	d000      	beq.n	8002b54 <HAL_ADC_ConfigChannel+0xc0>
 8002b52:	e081      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x1c4>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2208      	movs	r2, #8
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d000      	beq.n	8002b60 <HAL_ADC_ConfigChannel+0xcc>
 8002b5e:	e079      	b.n	8002c54 <HAL_ADC_ConfigChannel+0x1c0>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2210      	movs	r2, #16
 8002b66:	4013      	ands	r3, r2
 8002b68:	d000      	beq.n	8002b6c <HAL_ADC_ConfigChannel+0xd8>
 8002b6a:	e071      	b.n	8002c50 <HAL_ADC_ConfigChannel+0x1bc>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2220      	movs	r2, #32
 8002b72:	4013      	ands	r3, r2
 8002b74:	d000      	beq.n	8002b78 <HAL_ADC_ConfigChannel+0xe4>
 8002b76:	e069      	b.n	8002c4c <HAL_ADC_ConfigChannel+0x1b8>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2240      	movs	r2, #64	; 0x40
 8002b7e:	4013      	ands	r3, r2
 8002b80:	d000      	beq.n	8002b84 <HAL_ADC_ConfigChannel+0xf0>
 8002b82:	e061      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x1b4>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2280      	movs	r2, #128	; 0x80
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d000      	beq.n	8002b90 <HAL_ADC_ConfigChannel+0xfc>
 8002b8e:	e059      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x1b0>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	2380      	movs	r3, #128	; 0x80
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	4013      	ands	r3, r2
 8002b9a:	d151      	bne.n	8002c40 <HAL_ADC_ConfigChannel+0x1ac>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	2380      	movs	r3, #128	; 0x80
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d149      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x1a8>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	2380      	movs	r3, #128	; 0x80
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	d141      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x1a4>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	2380      	movs	r3, #128	; 0x80
 8002bba:	011b      	lsls	r3, r3, #4
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d139      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x1a0>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	2380      	movs	r3, #128	; 0x80
 8002bc6:	015b      	lsls	r3, r3, #5
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d131      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0x19c>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	2380      	movs	r3, #128	; 0x80
 8002bd2:	019b      	lsls	r3, r3, #6
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	d129      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x198>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	2380      	movs	r3, #128	; 0x80
 8002bde:	01db      	lsls	r3, r3, #7
 8002be0:	4013      	ands	r3, r2
 8002be2:	d121      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x194>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	2380      	movs	r3, #128	; 0x80
 8002bea:	021b      	lsls	r3, r3, #8
 8002bec:	4013      	ands	r3, r2
 8002bee:	d119      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x190>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	2380      	movs	r3, #128	; 0x80
 8002bf6:	025b      	lsls	r3, r3, #9
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d111      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x18c>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	2380      	movs	r3, #128	; 0x80
 8002c02:	029b      	lsls	r3, r3, #10
 8002c04:	4013      	ands	r3, r2
 8002c06:	d109      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x188>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	2380      	movs	r3, #128	; 0x80
 8002c0e:	02db      	lsls	r3, r3, #11
 8002c10:	4013      	ands	r3, r2
 8002c12:	d001      	beq.n	8002c18 <HAL_ADC_ConfigChannel+0x184>
 8002c14:	2312      	movs	r3, #18
 8002c16:	e024      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x1ce>
 8002c18:	2300      	movs	r3, #0
 8002c1a:	e022      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x1ce>
 8002c1c:	2311      	movs	r3, #17
 8002c1e:	e020      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x1ce>
 8002c20:	2310      	movs	r3, #16
 8002c22:	e01e      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x1ce>
 8002c24:	230f      	movs	r3, #15
 8002c26:	e01c      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x1ce>
 8002c28:	230e      	movs	r3, #14
 8002c2a:	e01a      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x1ce>
 8002c2c:	230d      	movs	r3, #13
 8002c2e:	e018      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x1ce>
 8002c30:	230c      	movs	r3, #12
 8002c32:	e016      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x1ce>
 8002c34:	230b      	movs	r3, #11
 8002c36:	e014      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x1ce>
 8002c38:	230a      	movs	r3, #10
 8002c3a:	e012      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x1ce>
 8002c3c:	2309      	movs	r3, #9
 8002c3e:	e010      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x1ce>
 8002c40:	2308      	movs	r3, #8
 8002c42:	e00e      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x1ce>
 8002c44:	2307      	movs	r3, #7
 8002c46:	e00c      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x1ce>
 8002c48:	2306      	movs	r3, #6
 8002c4a:	e00a      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x1ce>
 8002c4c:	2305      	movs	r3, #5
 8002c4e:	e008      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x1ce>
 8002c50:	2304      	movs	r3, #4
 8002c52:	e006      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x1ce>
 8002c54:	2303      	movs	r3, #3
 8002c56:	e004      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x1ce>
 8002c58:	2302      	movs	r3, #2
 8002c5a:	e002      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x1ce>
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e000      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x1ce>
 8002c60:	2300      	movs	r3, #0
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	6852      	ldr	r2, [r2, #4]
 8002c66:	201f      	movs	r0, #31
 8002c68:	4002      	ands	r2, r0
 8002c6a:	4093      	lsls	r3, r2
 8002c6c:	000a      	movs	r2, r1
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	089b      	lsrs	r3, r3, #2
 8002c7a:	1c5a      	adds	r2, r3, #1
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	69db      	ldr	r3, [r3, #28]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d808      	bhi.n	8002c96 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6818      	ldr	r0, [r3, #0]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	6859      	ldr	r1, [r3, #4]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	001a      	movs	r2, r3
 8002c92:	f7ff fbc7 	bl	8002424 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6818      	ldr	r0, [r3, #0]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	6819      	ldr	r1, [r3, #0]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	001a      	movs	r2, r3
 8002ca4:	f7ff fc02 	bl	80024ac <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	db00      	blt.n	8002cb2 <HAL_ADC_ConfigChannel+0x21e>
 8002cb0:	e0bc      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cb2:	4b50      	ldr	r3, [pc, #320]	; (8002df4 <HAL_ADC_ConfigChannel+0x360>)
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f7ff fb63 	bl	8002380 <LL_ADC_GetCommonPathInternalCh>
 8002cba:	0003      	movs	r3, r0
 8002cbc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a4d      	ldr	r2, [pc, #308]	; (8002df8 <HAL_ADC_ConfigChannel+0x364>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d122      	bne.n	8002d0e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	2380      	movs	r3, #128	; 0x80
 8002ccc:	041b      	lsls	r3, r3, #16
 8002cce:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002cd0:	d11d      	bne.n	8002d0e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	2280      	movs	r2, #128	; 0x80
 8002cd6:	0412      	lsls	r2, r2, #16
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	4a46      	ldr	r2, [pc, #280]	; (8002df4 <HAL_ADC_ConfigChannel+0x360>)
 8002cdc:	0019      	movs	r1, r3
 8002cde:	0010      	movs	r0, r2
 8002ce0:	f7ff fb3a 	bl	8002358 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ce4:	4b45      	ldr	r3, [pc, #276]	; (8002dfc <HAL_ADC_ConfigChannel+0x368>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4945      	ldr	r1, [pc, #276]	; (8002e00 <HAL_ADC_ConfigChannel+0x36c>)
 8002cea:	0018      	movs	r0, r3
 8002cec:	f7fd fa08 	bl	8000100 <__udivsi3>
 8002cf0:	0003      	movs	r3, r0
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	0013      	movs	r3, r2
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	189b      	adds	r3, r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cfe:	e002      	b.n	8002d06 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1f9      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d0c:	e08e      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a3c      	ldr	r2, [pc, #240]	; (8002e04 <HAL_ADC_ConfigChannel+0x370>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d10e      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	2380      	movs	r3, #128	; 0x80
 8002d1c:	045b      	lsls	r3, r3, #17
 8002d1e:	4013      	ands	r3, r2
 8002d20:	d109      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	2280      	movs	r2, #128	; 0x80
 8002d26:	0452      	lsls	r2, r2, #17
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	4a32      	ldr	r2, [pc, #200]	; (8002df4 <HAL_ADC_ConfigChannel+0x360>)
 8002d2c:	0019      	movs	r1, r3
 8002d2e:	0010      	movs	r0, r2
 8002d30:	f7ff fb12 	bl	8002358 <LL_ADC_SetCommonPathInternalCh>
 8002d34:	e07a      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a33      	ldr	r2, [pc, #204]	; (8002e08 <HAL_ADC_ConfigChannel+0x374>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d000      	beq.n	8002d42 <HAL_ADC_ConfigChannel+0x2ae>
 8002d40:	e074      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	2380      	movs	r3, #128	; 0x80
 8002d46:	03db      	lsls	r3, r3, #15
 8002d48:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002d4a:	d000      	beq.n	8002d4e <HAL_ADC_ConfigChannel+0x2ba>
 8002d4c:	e06e      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	2280      	movs	r2, #128	; 0x80
 8002d52:	03d2      	lsls	r2, r2, #15
 8002d54:	4313      	orrs	r3, r2
 8002d56:	4a27      	ldr	r2, [pc, #156]	; (8002df4 <HAL_ADC_ConfigChannel+0x360>)
 8002d58:	0019      	movs	r1, r3
 8002d5a:	0010      	movs	r0, r2
 8002d5c:	f7ff fafc 	bl	8002358 <LL_ADC_SetCommonPathInternalCh>
 8002d60:	e064      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691a      	ldr	r2, [r3, #16]
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	061b      	lsls	r3, r3, #24
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d004      	beq.n	8002d78 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002d72:	4a1f      	ldr	r2, [pc, #124]	; (8002df0 <HAL_ADC_ConfigChannel+0x35c>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d107      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	0019      	movs	r1, r3
 8002d82:	0010      	movs	r0, r2
 8002d84:	f7ff fb7f 	bl	8002486 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	da4d      	bge.n	8002e2c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d90:	4b18      	ldr	r3, [pc, #96]	; (8002df4 <HAL_ADC_ConfigChannel+0x360>)
 8002d92:	0018      	movs	r0, r3
 8002d94:	f7ff faf4 	bl	8002380 <LL_ADC_GetCommonPathInternalCh>
 8002d98:	0003      	movs	r3, r0
 8002d9a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a15      	ldr	r2, [pc, #84]	; (8002df8 <HAL_ADC_ConfigChannel+0x364>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d108      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4a18      	ldr	r2, [pc, #96]	; (8002e0c <HAL_ADC_ConfigChannel+0x378>)
 8002daa:	4013      	ands	r3, r2
 8002dac:	4a11      	ldr	r2, [pc, #68]	; (8002df4 <HAL_ADC_ConfigChannel+0x360>)
 8002dae:	0019      	movs	r1, r3
 8002db0:	0010      	movs	r0, r2
 8002db2:	f7ff fad1 	bl	8002358 <LL_ADC_SetCommonPathInternalCh>
 8002db6:	e039      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a11      	ldr	r2, [pc, #68]	; (8002e04 <HAL_ADC_ConfigChannel+0x370>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d108      	bne.n	8002dd4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4a12      	ldr	r2, [pc, #72]	; (8002e10 <HAL_ADC_ConfigChannel+0x37c>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	4a0a      	ldr	r2, [pc, #40]	; (8002df4 <HAL_ADC_ConfigChannel+0x360>)
 8002dca:	0019      	movs	r1, r3
 8002dcc:	0010      	movs	r0, r2
 8002dce:	f7ff fac3 	bl	8002358 <LL_ADC_SetCommonPathInternalCh>
 8002dd2:	e02b      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a0b      	ldr	r2, [pc, #44]	; (8002e08 <HAL_ADC_ConfigChannel+0x374>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d126      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4a0c      	ldr	r2, [pc, #48]	; (8002e14 <HAL_ADC_ConfigChannel+0x380>)
 8002de2:	4013      	ands	r3, r2
 8002de4:	4a03      	ldr	r2, [pc, #12]	; (8002df4 <HAL_ADC_ConfigChannel+0x360>)
 8002de6:	0019      	movs	r1, r3
 8002de8:	0010      	movs	r0, r2
 8002dea:	f7ff fab5 	bl	8002358 <LL_ADC_SetCommonPathInternalCh>
 8002dee:	e01d      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x398>
 8002df0:	80000004 	.word	0x80000004
 8002df4:	40012708 	.word	0x40012708
 8002df8:	b0001000 	.word	0xb0001000
 8002dfc:	20000000 	.word	0x20000000
 8002e00:	00030d40 	.word	0x00030d40
 8002e04:	b8004000 	.word	0xb8004000
 8002e08:	b4002000 	.word	0xb4002000
 8002e0c:	ff7fffff 	.word	0xff7fffff
 8002e10:	feffffff 	.word	0xfeffffff
 8002e14:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e24:	2317      	movs	r3, #23
 8002e26:	18fb      	adds	r3, r7, r3
 8002e28:	2201      	movs	r2, #1
 8002e2a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2254      	movs	r2, #84	; 0x54
 8002e30:	2100      	movs	r1, #0
 8002e32:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002e34:	2317      	movs	r3, #23
 8002e36:	18fb      	adds	r3, r7, r3
 8002e38:	781b      	ldrb	r3, [r3, #0]
}
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	b006      	add	sp, #24
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	46c0      	nop			; (mov r8, r8)

08002e44 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	0018      	movs	r0, r3
 8002e56:	f7ff fb91 	bl	800257c <LL_ADC_IsEnabled>
 8002e5a:	1e03      	subs	r3, r0, #0
 8002e5c:	d000      	beq.n	8002e60 <ADC_Enable+0x1c>
 8002e5e:	e069      	b.n	8002f34 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	4a36      	ldr	r2, [pc, #216]	; (8002f40 <ADC_Enable+0xfc>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	d00d      	beq.n	8002e88 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e70:	2210      	movs	r2, #16
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e056      	b.n	8002f36 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f7ff fb51 	bl	8002534 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8002e92:	4b2c      	ldr	r3, [pc, #176]	; (8002f44 <ADC_Enable+0x100>)
 8002e94:	0018      	movs	r0, r3
 8002e96:	f7ff fa73 	bl	8002380 <LL_ADC_GetCommonPathInternalCh>
 8002e9a:	0002      	movs	r2, r0
 8002e9c:	2380      	movs	r3, #128	; 0x80
 8002e9e:	041b      	lsls	r3, r3, #16
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d00f      	beq.n	8002ec4 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ea4:	4b28      	ldr	r3, [pc, #160]	; (8002f48 <ADC_Enable+0x104>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4928      	ldr	r1, [pc, #160]	; (8002f4c <ADC_Enable+0x108>)
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f7fd f928 	bl	8000100 <__udivsi3>
 8002eb0:	0003      	movs	r3, r0
 8002eb2:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8002eb4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002eb6:	e002      	b.n	8002ebe <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1f9      	bne.n	8002eb8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	7e5b      	ldrb	r3, [r3, #25]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d033      	beq.n	8002f34 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002ecc:	f7ff fa16 	bl	80022fc <HAL_GetTick>
 8002ed0:	0003      	movs	r3, r0
 8002ed2:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ed4:	e027      	b.n	8002f26 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	0018      	movs	r0, r3
 8002edc:	f7ff fb4e 	bl	800257c <LL_ADC_IsEnabled>
 8002ee0:	1e03      	subs	r3, r0, #0
 8002ee2:	d104      	bne.n	8002eee <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	0018      	movs	r0, r3
 8002eea:	f7ff fb23 	bl	8002534 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002eee:	f7ff fa05 	bl	80022fc <HAL_GetTick>
 8002ef2:	0002      	movs	r2, r0
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d914      	bls.n	8002f26 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2201      	movs	r2, #1
 8002f04:	4013      	ands	r3, r2
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d00d      	beq.n	8002f26 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0e:	2210      	movs	r2, #16
 8002f10:	431a      	orrs	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e007      	b.n	8002f36 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	4013      	ands	r3, r2
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d1d0      	bne.n	8002ed6 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	0018      	movs	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	b004      	add	sp, #16
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	80000017 	.word	0x80000017
 8002f44:	40012708 	.word	0x40012708
 8002f48:	20000000 	.word	0x20000000
 8002f4c:	00030d40 	.word	0x00030d40

08002f50 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f7ff fb1e 	bl	800259e <LL_ADC_IsDisableOngoing>
 8002f62:	0003      	movs	r3, r0
 8002f64:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	f7ff fb06 	bl	800257c <LL_ADC_IsEnabled>
 8002f70:	1e03      	subs	r3, r0, #0
 8002f72:	d046      	beq.n	8003002 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d143      	bne.n	8003002 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2205      	movs	r2, #5
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d10d      	bne.n	8002fa4 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f7ff fae3 	bl	8002558 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2203      	movs	r2, #3
 8002f98:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f9a:	f7ff f9af 	bl	80022fc <HAL_GetTick>
 8002f9e:	0003      	movs	r3, r0
 8002fa0:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002fa2:	e028      	b.n	8002ff6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa8:	2210      	movs	r2, #16
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e021      	b.n	8003004 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002fc0:	f7ff f99c 	bl	80022fc <HAL_GetTick>
 8002fc4:	0002      	movs	r2, r0
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d913      	bls.n	8002ff6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d00d      	beq.n	8002ff6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fde:	2210      	movs	r2, #16
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fea:	2201      	movs	r2, #1
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e006      	b.n	8003004 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	4013      	ands	r3, r2
 8003000:	d1de      	bne.n	8002fc0 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	0018      	movs	r0, r3
 8003006:	46bd      	mov	sp, r7
 8003008:	b004      	add	sp, #16
 800300a:	bd80      	pop	{r7, pc}

0800300c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003018:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301e:	2250      	movs	r2, #80	; 0x50
 8003020:	4013      	ands	r3, r2
 8003022:	d141      	bne.n	80030a8 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003028:	2280      	movs	r2, #128	; 0x80
 800302a:	0092      	lsls	r2, r2, #2
 800302c:	431a      	orrs	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	0018      	movs	r0, r3
 8003038:	f7ff f9e3 	bl	8002402 <LL_ADC_REG_IsTriggerSourceSWStart>
 800303c:	1e03      	subs	r3, r0, #0
 800303e:	d02e      	beq.n	800309e <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	7e9b      	ldrb	r3, [r3, #26]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d12a      	bne.n	800309e <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2208      	movs	r2, #8
 8003050:	4013      	ands	r3, r2
 8003052:	2b08      	cmp	r3, #8
 8003054:	d123      	bne.n	800309e <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	0018      	movs	r0, r3
 800305c:	f7ff fac2 	bl	80025e4 <LL_ADC_REG_IsConversionOngoing>
 8003060:	1e03      	subs	r3, r0, #0
 8003062:	d110      	bne.n	8003086 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	210c      	movs	r1, #12
 8003070:	438a      	bics	r2, r1
 8003072:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003078:	4a15      	ldr	r2, [pc, #84]	; (80030d0 <ADC_DMAConvCplt+0xc4>)
 800307a:	4013      	ands	r3, r2
 800307c:	2201      	movs	r2, #1
 800307e:	431a      	orrs	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	659a      	str	r2, [r3, #88]	; 0x58
 8003084:	e00b      	b.n	800309e <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308a:	2220      	movs	r2, #32
 800308c:	431a      	orrs	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003096:	2201      	movs	r2, #1
 8003098:	431a      	orrs	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	0018      	movs	r0, r3
 80030a2:	f7fd fe11 	bl	8000cc8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80030a6:	e00f      	b.n	80030c8 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ac:	2210      	movs	r2, #16
 80030ae:	4013      	ands	r3, r2
 80030b0:	d004      	beq.n	80030bc <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	0018      	movs	r0, r3
 80030b6:	f7ff fce5 	bl	8002a84 <HAL_ADC_ErrorCallback>
}
 80030ba:	e005      	b.n	80030c8 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	0010      	movs	r0, r2
 80030c6:	4798      	blx	r3
}
 80030c8:	46c0      	nop			; (mov r8, r8)
 80030ca:	46bd      	mov	sp, r7
 80030cc:	b004      	add	sp, #16
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	fffffefe 	.word	0xfffffefe

080030d4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	0018      	movs	r0, r3
 80030e6:	f7ff fcc5 	bl	8002a74 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030ea:	46c0      	nop			; (mov r8, r8)
 80030ec:	46bd      	mov	sp, r7
 80030ee:	b004      	add	sp, #16
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b084      	sub	sp, #16
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003104:	2240      	movs	r2, #64	; 0x40
 8003106:	431a      	orrs	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003110:	2204      	movs	r2, #4
 8003112:	431a      	orrs	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	0018      	movs	r0, r3
 800311c:	f7ff fcb2 	bl	8002a84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003120:	46c0      	nop			; (mov r8, r8)
 8003122:	46bd      	mov	sp, r7
 8003124:	b004      	add	sp, #16
 8003126:	bd80      	pop	{r7, pc}

08003128 <LL_ADC_SetCalibrationFactor>:
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	22b4      	movs	r2, #180	; 0xb4
 8003136:	589b      	ldr	r3, [r3, r2]
 8003138:	227f      	movs	r2, #127	; 0x7f
 800313a:	4393      	bics	r3, r2
 800313c:	001a      	movs	r2, r3
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	431a      	orrs	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	21b4      	movs	r1, #180	; 0xb4
 8003146:	505a      	str	r2, [r3, r1]
}
 8003148:	46c0      	nop			; (mov r8, r8)
 800314a:	46bd      	mov	sp, r7
 800314c:	b002      	add	sp, #8
 800314e:	bd80      	pop	{r7, pc}

08003150 <LL_ADC_GetCalibrationFactor>:
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	22b4      	movs	r2, #180	; 0xb4
 800315c:	589b      	ldr	r3, [r3, r2]
 800315e:	227f      	movs	r2, #127	; 0x7f
 8003160:	4013      	ands	r3, r2
}
 8003162:	0018      	movs	r0, r3
 8003164:	46bd      	mov	sp, r7
 8003166:	b002      	add	sp, #8
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <LL_ADC_Enable>:
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	4a04      	ldr	r2, [pc, #16]	; (800318c <LL_ADC_Enable+0x20>)
 800317a:	4013      	ands	r3, r2
 800317c:	2201      	movs	r2, #1
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	609a      	str	r2, [r3, #8]
}
 8003184:	46c0      	nop			; (mov r8, r8)
 8003186:	46bd      	mov	sp, r7
 8003188:	b002      	add	sp, #8
 800318a:	bd80      	pop	{r7, pc}
 800318c:	7fffffe8 	.word	0x7fffffe8

08003190 <LL_ADC_Disable>:
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	4a04      	ldr	r2, [pc, #16]	; (80031b0 <LL_ADC_Disable+0x20>)
 800319e:	4013      	ands	r3, r2
 80031a0:	2202      	movs	r2, #2
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	609a      	str	r2, [r3, #8]
}
 80031a8:	46c0      	nop			; (mov r8, r8)
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b002      	add	sp, #8
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	7fffffe8 	.word	0x7fffffe8

080031b4 <LL_ADC_IsEnabled>:
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	2201      	movs	r2, #1
 80031c2:	4013      	ands	r3, r2
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <LL_ADC_IsEnabled+0x18>
 80031c8:	2301      	movs	r3, #1
 80031ca:	e000      	b.n	80031ce <LL_ADC_IsEnabled+0x1a>
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	0018      	movs	r0, r3
 80031d0:	46bd      	mov	sp, r7
 80031d2:	b002      	add	sp, #8
 80031d4:	bd80      	pop	{r7, pc}
	...

080031d8 <LL_ADC_StartCalibration>:
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	4a05      	ldr	r2, [pc, #20]	; (80031fc <LL_ADC_StartCalibration+0x24>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	2280      	movs	r2, #128	; 0x80
 80031ea:	0612      	lsls	r2, r2, #24
 80031ec:	431a      	orrs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	609a      	str	r2, [r3, #8]
}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	46bd      	mov	sp, r7
 80031f6:	b002      	add	sp, #8
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	7fffffe8 	.word	0x7fffffe8

08003200 <LL_ADC_IsCalibrationOnGoing>:
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	0fdb      	lsrs	r3, r3, #31
 800320e:	07da      	lsls	r2, r3, #31
 8003210:	2380      	movs	r3, #128	; 0x80
 8003212:	061b      	lsls	r3, r3, #24
 8003214:	429a      	cmp	r2, r3
 8003216:	d101      	bne.n	800321c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003218:	2301      	movs	r3, #1
 800321a:	e000      	b.n	800321e <LL_ADC_IsCalibrationOnGoing+0x1e>
 800321c:	2300      	movs	r3, #0
}
 800321e:	0018      	movs	r0, r3
 8003220:	46bd      	mov	sp, r7
 8003222:	b002      	add	sp, #8
 8003224:	bd80      	pop	{r7, pc}
	...

08003228 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003228:	b590      	push	{r4, r7, lr}
 800322a:	b089      	sub	sp, #36	; 0x24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003230:	2300      	movs	r3, #0
 8003232:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003234:	2300      	movs	r3, #0
 8003236:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2254      	movs	r2, #84	; 0x54
 800323c:	5c9b      	ldrb	r3, [r3, r2]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d101      	bne.n	8003246 <HAL_ADCEx_Calibration_Start+0x1e>
 8003242:	2302      	movs	r3, #2
 8003244:	e0ba      	b.n	80033bc <HAL_ADCEx_Calibration_Start+0x194>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2254      	movs	r2, #84	; 0x54
 800324a:	2101      	movs	r1, #1
 800324c:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800324e:	2317      	movs	r3, #23
 8003250:	18fc      	adds	r4, r7, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	0018      	movs	r0, r3
 8003256:	f7ff fe7b 	bl	8002f50 <ADC_Disable>
 800325a:	0003      	movs	r3, r0
 800325c:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	0018      	movs	r0, r3
 8003264:	f7ff ffa6 	bl	80031b4 <LL_ADC_IsEnabled>
 8003268:	1e03      	subs	r3, r0, #0
 800326a:	d000      	beq.n	800326e <HAL_ADCEx_Calibration_Start+0x46>
 800326c:	e099      	b.n	80033a2 <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003272:	4a54      	ldr	r2, [pc, #336]	; (80033c4 <HAL_ADCEx_Calibration_Start+0x19c>)
 8003274:	4013      	ands	r3, r2
 8003276:	2202      	movs	r2, #2
 8003278:	431a      	orrs	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	4a50      	ldr	r2, [pc, #320]	; (80033c8 <HAL_ADCEx_Calibration_Start+0x1a0>)
 8003286:	4013      	ands	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	494d      	ldr	r1, [pc, #308]	; (80033cc <HAL_ADCEx_Calibration_Start+0x1a4>)
 8003296:	400a      	ands	r2, r1
 8003298:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800329a:	2300      	movs	r3, #0
 800329c:	61fb      	str	r3, [r7, #28]
 800329e:	e02d      	b.n	80032fc <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	0018      	movs	r0, r3
 80032a6:	f7ff ff97 	bl	80031d8 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80032aa:	e014      	b.n	80032d6 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	3301      	adds	r3, #1
 80032b0:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	4a46      	ldr	r2, [pc, #280]	; (80033d0 <HAL_ADCEx_Calibration_Start+0x1a8>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d90d      	bls.n	80032d6 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032be:	2212      	movs	r2, #18
 80032c0:	4393      	bics	r3, r2
 80032c2:	2210      	movs	r2, #16
 80032c4:	431a      	orrs	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2254      	movs	r2, #84	; 0x54
 80032ce:	2100      	movs	r1, #0
 80032d0:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e072      	b.n	80033bc <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	0018      	movs	r0, r3
 80032dc:	f7ff ff90 	bl	8003200 <LL_ADC_IsCalibrationOnGoing>
 80032e0:	1e03      	subs	r3, r0, #0
 80032e2:	d1e3      	bne.n	80032ac <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	0018      	movs	r0, r3
 80032ea:	f7ff ff31 	bl	8003150 <LL_ADC_GetCalibrationFactor>
 80032ee:	0002      	movs	r2, r0
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	189b      	adds	r3, r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	3301      	adds	r3, #1
 80032fa:	61fb      	str	r3, [r7, #28]
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	2b07      	cmp	r3, #7
 8003300:	d9ce      	bls.n	80032a0 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8003302:	69f9      	ldr	r1, [r7, #28]
 8003304:	69b8      	ldr	r0, [r7, #24]
 8003306:	f7fc fefb 	bl	8000100 <__udivsi3>
 800330a:	0003      	movs	r3, r0
 800330c:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	0018      	movs	r0, r3
 8003314:	f7ff ff2a 	bl	800316c <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	0011      	movs	r1, r2
 8003320:	0018      	movs	r0, r3
 8003322:	f7ff ff01 	bl	8003128 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	0018      	movs	r0, r3
 800332c:	f7ff ff30 	bl	8003190 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003330:	f7fe ffe4 	bl	80022fc <HAL_GetTick>
 8003334:	0003      	movs	r3, r0
 8003336:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003338:	e01b      	b.n	8003372 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800333a:	f7fe ffdf 	bl	80022fc <HAL_GetTick>
 800333e:	0002      	movs	r2, r0
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d914      	bls.n	8003372 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	0018      	movs	r0, r3
 800334e:	f7ff ff31 	bl	80031b4 <LL_ADC_IsEnabled>
 8003352:	1e03      	subs	r3, r0, #0
 8003354:	d00d      	beq.n	8003372 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335a:	2210      	movs	r2, #16
 800335c:	431a      	orrs	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003366:	2201      	movs	r2, #1
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e024      	b.n	80033bc <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	0018      	movs	r0, r3
 8003378:	f7ff ff1c 	bl	80031b4 <LL_ADC_IsEnabled>
 800337c:	1e03      	subs	r3, r0, #0
 800337e:	d1dc      	bne.n	800333a <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68d9      	ldr	r1, [r3, #12]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	430a      	orrs	r2, r1
 800338e:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003394:	2203      	movs	r2, #3
 8003396:	4393      	bics	r3, r2
 8003398:	2201      	movs	r2, #1
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	659a      	str	r2, [r3, #88]	; 0x58
 80033a0:	e005      	b.n	80033ae <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a6:	2210      	movs	r2, #16
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2254      	movs	r2, #84	; 0x54
 80033b2:	2100      	movs	r1, #0
 80033b4:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80033b6:	2317      	movs	r3, #23
 80033b8:	18fb      	adds	r3, r7, r3
 80033ba:	781b      	ldrb	r3, [r3, #0]
}
 80033bc:	0018      	movs	r0, r3
 80033be:	46bd      	mov	sp, r7
 80033c0:	b009      	add	sp, #36	; 0x24
 80033c2:	bd90      	pop	{r4, r7, pc}
 80033c4:	fffffefd 	.word	0xfffffefd
 80033c8:	00008003 	.word	0x00008003
 80033cc:	ffff7ffc 	.word	0xffff7ffc
 80033d0:	0002f1ff 	.word	0x0002f1ff

080033d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	0002      	movs	r2, r0
 80033dc:	1dfb      	adds	r3, r7, #7
 80033de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033e0:	1dfb      	adds	r3, r7, #7
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b7f      	cmp	r3, #127	; 0x7f
 80033e6:	d809      	bhi.n	80033fc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033e8:	1dfb      	adds	r3, r7, #7
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	001a      	movs	r2, r3
 80033ee:	231f      	movs	r3, #31
 80033f0:	401a      	ands	r2, r3
 80033f2:	4b04      	ldr	r3, [pc, #16]	; (8003404 <__NVIC_EnableIRQ+0x30>)
 80033f4:	2101      	movs	r1, #1
 80033f6:	4091      	lsls	r1, r2
 80033f8:	000a      	movs	r2, r1
 80033fa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80033fc:	46c0      	nop			; (mov r8, r8)
 80033fe:	46bd      	mov	sp, r7
 8003400:	b002      	add	sp, #8
 8003402:	bd80      	pop	{r7, pc}
 8003404:	e000e100 	.word	0xe000e100

08003408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003408:	b590      	push	{r4, r7, lr}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	0002      	movs	r2, r0
 8003410:	6039      	str	r1, [r7, #0]
 8003412:	1dfb      	adds	r3, r7, #7
 8003414:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003416:	1dfb      	adds	r3, r7, #7
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b7f      	cmp	r3, #127	; 0x7f
 800341c:	d828      	bhi.n	8003470 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800341e:	4a2f      	ldr	r2, [pc, #188]	; (80034dc <__NVIC_SetPriority+0xd4>)
 8003420:	1dfb      	adds	r3, r7, #7
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	b25b      	sxtb	r3, r3
 8003426:	089b      	lsrs	r3, r3, #2
 8003428:	33c0      	adds	r3, #192	; 0xc0
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	589b      	ldr	r3, [r3, r2]
 800342e:	1dfa      	adds	r2, r7, #7
 8003430:	7812      	ldrb	r2, [r2, #0]
 8003432:	0011      	movs	r1, r2
 8003434:	2203      	movs	r2, #3
 8003436:	400a      	ands	r2, r1
 8003438:	00d2      	lsls	r2, r2, #3
 800343a:	21ff      	movs	r1, #255	; 0xff
 800343c:	4091      	lsls	r1, r2
 800343e:	000a      	movs	r2, r1
 8003440:	43d2      	mvns	r2, r2
 8003442:	401a      	ands	r2, r3
 8003444:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	019b      	lsls	r3, r3, #6
 800344a:	22ff      	movs	r2, #255	; 0xff
 800344c:	401a      	ands	r2, r3
 800344e:	1dfb      	adds	r3, r7, #7
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	0018      	movs	r0, r3
 8003454:	2303      	movs	r3, #3
 8003456:	4003      	ands	r3, r0
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800345c:	481f      	ldr	r0, [pc, #124]	; (80034dc <__NVIC_SetPriority+0xd4>)
 800345e:	1dfb      	adds	r3, r7, #7
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	b25b      	sxtb	r3, r3
 8003464:	089b      	lsrs	r3, r3, #2
 8003466:	430a      	orrs	r2, r1
 8003468:	33c0      	adds	r3, #192	; 0xc0
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800346e:	e031      	b.n	80034d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003470:	4a1b      	ldr	r2, [pc, #108]	; (80034e0 <__NVIC_SetPriority+0xd8>)
 8003472:	1dfb      	adds	r3, r7, #7
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	0019      	movs	r1, r3
 8003478:	230f      	movs	r3, #15
 800347a:	400b      	ands	r3, r1
 800347c:	3b08      	subs	r3, #8
 800347e:	089b      	lsrs	r3, r3, #2
 8003480:	3306      	adds	r3, #6
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	18d3      	adds	r3, r2, r3
 8003486:	3304      	adds	r3, #4
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	1dfa      	adds	r2, r7, #7
 800348c:	7812      	ldrb	r2, [r2, #0]
 800348e:	0011      	movs	r1, r2
 8003490:	2203      	movs	r2, #3
 8003492:	400a      	ands	r2, r1
 8003494:	00d2      	lsls	r2, r2, #3
 8003496:	21ff      	movs	r1, #255	; 0xff
 8003498:	4091      	lsls	r1, r2
 800349a:	000a      	movs	r2, r1
 800349c:	43d2      	mvns	r2, r2
 800349e:	401a      	ands	r2, r3
 80034a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	019b      	lsls	r3, r3, #6
 80034a6:	22ff      	movs	r2, #255	; 0xff
 80034a8:	401a      	ands	r2, r3
 80034aa:	1dfb      	adds	r3, r7, #7
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	0018      	movs	r0, r3
 80034b0:	2303      	movs	r3, #3
 80034b2:	4003      	ands	r3, r0
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034b8:	4809      	ldr	r0, [pc, #36]	; (80034e0 <__NVIC_SetPriority+0xd8>)
 80034ba:	1dfb      	adds	r3, r7, #7
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	001c      	movs	r4, r3
 80034c0:	230f      	movs	r3, #15
 80034c2:	4023      	ands	r3, r4
 80034c4:	3b08      	subs	r3, #8
 80034c6:	089b      	lsrs	r3, r3, #2
 80034c8:	430a      	orrs	r2, r1
 80034ca:	3306      	adds	r3, #6
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	18c3      	adds	r3, r0, r3
 80034d0:	3304      	adds	r3, #4
 80034d2:	601a      	str	r2, [r3, #0]
}
 80034d4:	46c0      	nop			; (mov r8, r8)
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b003      	add	sp, #12
 80034da:	bd90      	pop	{r4, r7, pc}
 80034dc:	e000e100 	.word	0xe000e100
 80034e0:	e000ed00 	.word	0xe000ed00

080034e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	1e5a      	subs	r2, r3, #1
 80034f0:	2380      	movs	r3, #128	; 0x80
 80034f2:	045b      	lsls	r3, r3, #17
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d301      	bcc.n	80034fc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034f8:	2301      	movs	r3, #1
 80034fa:	e010      	b.n	800351e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034fc:	4b0a      	ldr	r3, [pc, #40]	; (8003528 <SysTick_Config+0x44>)
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	3a01      	subs	r2, #1
 8003502:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003504:	2301      	movs	r3, #1
 8003506:	425b      	negs	r3, r3
 8003508:	2103      	movs	r1, #3
 800350a:	0018      	movs	r0, r3
 800350c:	f7ff ff7c 	bl	8003408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <SysTick_Config+0x44>)
 8003512:	2200      	movs	r2, #0
 8003514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003516:	4b04      	ldr	r3, [pc, #16]	; (8003528 <SysTick_Config+0x44>)
 8003518:	2207      	movs	r2, #7
 800351a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800351c:	2300      	movs	r3, #0
}
 800351e:	0018      	movs	r0, r3
 8003520:	46bd      	mov	sp, r7
 8003522:	b002      	add	sp, #8
 8003524:	bd80      	pop	{r7, pc}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	e000e010 	.word	0xe000e010

0800352c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	607a      	str	r2, [r7, #4]
 8003536:	210f      	movs	r1, #15
 8003538:	187b      	adds	r3, r7, r1
 800353a:	1c02      	adds	r2, r0, #0
 800353c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	187b      	adds	r3, r7, r1
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	b25b      	sxtb	r3, r3
 8003546:	0011      	movs	r1, r2
 8003548:	0018      	movs	r0, r3
 800354a:	f7ff ff5d 	bl	8003408 <__NVIC_SetPriority>
}
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	46bd      	mov	sp, r7
 8003552:	b004      	add	sp, #16
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b082      	sub	sp, #8
 800355a:	af00      	add	r7, sp, #0
 800355c:	0002      	movs	r2, r0
 800355e:	1dfb      	adds	r3, r7, #7
 8003560:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003562:	1dfb      	adds	r3, r7, #7
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	b25b      	sxtb	r3, r3
 8003568:	0018      	movs	r0, r3
 800356a:	f7ff ff33 	bl	80033d4 <__NVIC_EnableIRQ>
}
 800356e:	46c0      	nop			; (mov r8, r8)
 8003570:	46bd      	mov	sp, r7
 8003572:	b002      	add	sp, #8
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b082      	sub	sp, #8
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	0018      	movs	r0, r3
 8003582:	f7ff ffaf 	bl	80034e4 <SysTick_Config>
 8003586:	0003      	movs	r3, r0
}
 8003588:	0018      	movs	r0, r3
 800358a:	46bd      	mov	sp, r7
 800358c:	b002      	add	sp, #8
 800358e:	bd80      	pop	{r7, pc}

08003590 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e077      	b.n	8003692 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a3d      	ldr	r2, [pc, #244]	; (800369c <HAL_DMA_Init+0x10c>)
 80035a8:	4694      	mov	ip, r2
 80035aa:	4463      	add	r3, ip
 80035ac:	2114      	movs	r1, #20
 80035ae:	0018      	movs	r0, r3
 80035b0:	f7fc fda6 	bl	8000100 <__udivsi3>
 80035b4:	0003      	movs	r3, r0
 80035b6:	009a      	lsls	r2, r3, #2
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2225      	movs	r2, #37	; 0x25
 80035c0:	2102      	movs	r1, #2
 80035c2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4934      	ldr	r1, [pc, #208]	; (80036a0 <HAL_DMA_Init+0x110>)
 80035d0:	400a      	ands	r2, r1
 80035d2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6819      	ldr	r1, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	431a      	orrs	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	431a      	orrs	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	431a      	orrs	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	0018      	movs	r0, r3
 800360e:	f000 fa37 	bl	8003a80 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	2380      	movs	r3, #128	; 0x80
 8003618:	01db      	lsls	r3, r3, #7
 800361a:	429a      	cmp	r2, r3
 800361c:	d102      	bne.n	8003624 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362c:	213f      	movs	r1, #63	; 0x3f
 800362e:	400a      	ands	r2, r1
 8003630:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800363a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d011      	beq.n	8003668 <HAL_DMA_Init+0xd8>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	2b04      	cmp	r3, #4
 800364a:	d80d      	bhi.n	8003668 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	0018      	movs	r0, r3
 8003650:	f000 fa42 	bl	8003ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003664:	605a      	str	r2, [r3, #4]
 8003666:	e008      	b.n	800367a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2225      	movs	r2, #37	; 0x25
 8003684:	2101      	movs	r1, #1
 8003686:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2224      	movs	r2, #36	; 0x24
 800368c:	2100      	movs	r1, #0
 800368e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	0018      	movs	r0, r3
 8003694:	46bd      	mov	sp, r7
 8003696:	b002      	add	sp, #8
 8003698:	bd80      	pop	{r7, pc}
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	bffdfff8 	.word	0xbffdfff8
 80036a0:	ffff800f 	.word	0xffff800f

080036a4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
 80036b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036b2:	2317      	movs	r3, #23
 80036b4:	18fb      	adds	r3, r7, r3
 80036b6:	2200      	movs	r2, #0
 80036b8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2224      	movs	r2, #36	; 0x24
 80036be:	5c9b      	ldrb	r3, [r3, r2]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d101      	bne.n	80036c8 <HAL_DMA_Start_IT+0x24>
 80036c4:	2302      	movs	r3, #2
 80036c6:	e06f      	b.n	80037a8 <HAL_DMA_Start_IT+0x104>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2224      	movs	r2, #36	; 0x24
 80036cc:	2101      	movs	r1, #1
 80036ce:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2225      	movs	r2, #37	; 0x25
 80036d4:	5c9b      	ldrb	r3, [r3, r2]
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d157      	bne.n	800378c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2225      	movs	r2, #37	; 0x25
 80036e0:	2102      	movs	r1, #2
 80036e2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2101      	movs	r1, #1
 80036f6:	438a      	bics	r2, r1
 80036f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	68b9      	ldr	r1, [r7, #8]
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 f97d 	bl	8003a00 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	2b00      	cmp	r3, #0
 800370c:	d008      	beq.n	8003720 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	210e      	movs	r1, #14
 800371a:	430a      	orrs	r2, r1
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	e00f      	b.n	8003740 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2104      	movs	r1, #4
 800372c:	438a      	bics	r2, r1
 800372e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	210a      	movs	r1, #10
 800373c:	430a      	orrs	r2, r1
 800373e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	2380      	movs	r3, #128	; 0x80
 8003748:	025b      	lsls	r3, r3, #9
 800374a:	4013      	ands	r3, r2
 800374c:	d008      	beq.n	8003760 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003758:	2180      	movs	r1, #128	; 0x80
 800375a:	0049      	lsls	r1, r1, #1
 800375c:	430a      	orrs	r2, r1
 800375e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003764:	2b00      	cmp	r3, #0
 8003766:	d008      	beq.n	800377a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003772:	2180      	movs	r1, #128	; 0x80
 8003774:	0049      	lsls	r1, r1, #1
 8003776:	430a      	orrs	r2, r1
 8003778:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2101      	movs	r1, #1
 8003786:	430a      	orrs	r2, r1
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	e00a      	b.n	80037a2 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2280      	movs	r2, #128	; 0x80
 8003790:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2224      	movs	r2, #36	; 0x24
 8003796:	2100      	movs	r1, #0
 8003798:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800379a:	2317      	movs	r3, #23
 800379c:	18fb      	adds	r3, r7, r3
 800379e:	2201      	movs	r2, #1
 80037a0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80037a2:	2317      	movs	r3, #23
 80037a4:	18fb      	adds	r3, r7, r3
 80037a6:	781b      	ldrb	r3, [r3, #0]
}
 80037a8:	0018      	movs	r0, r3
 80037aa:	46bd      	mov	sp, r7
 80037ac:	b006      	add	sp, #24
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037b8:	210f      	movs	r1, #15
 80037ba:	187b      	adds	r3, r7, r1
 80037bc:	2200      	movs	r2, #0
 80037be:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2225      	movs	r2, #37	; 0x25
 80037c4:	5c9b      	ldrb	r3, [r3, r2]
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d006      	beq.n	80037da <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2204      	movs	r2, #4
 80037d0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80037d2:	187b      	adds	r3, r7, r1
 80037d4:	2201      	movs	r2, #1
 80037d6:	701a      	strb	r2, [r3, #0]
 80037d8:	e049      	b.n	800386e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	210e      	movs	r1, #14
 80037e6:	438a      	bics	r2, r1
 80037e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2101      	movs	r1, #1
 80037f6:	438a      	bics	r2, r1
 80037f8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003804:	491d      	ldr	r1, [pc, #116]	; (800387c <HAL_DMA_Abort_IT+0xcc>)
 8003806:	400a      	ands	r2, r1
 8003808:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800380a:	4b1d      	ldr	r3, [pc, #116]	; (8003880 <HAL_DMA_Abort_IT+0xd0>)
 800380c:	6859      	ldr	r1, [r3, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	221c      	movs	r2, #28
 8003814:	4013      	ands	r3, r2
 8003816:	2201      	movs	r2, #1
 8003818:	409a      	lsls	r2, r3
 800381a:	4b19      	ldr	r3, [pc, #100]	; (8003880 <HAL_DMA_Abort_IT+0xd0>)
 800381c:	430a      	orrs	r2, r1
 800381e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003828:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00c      	beq.n	800384c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800383c:	490f      	ldr	r1, [pc, #60]	; (800387c <HAL_DMA_Abort_IT+0xcc>)
 800383e:	400a      	ands	r2, r1
 8003840:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800384a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2225      	movs	r2, #37	; 0x25
 8003850:	2101      	movs	r1, #1
 8003852:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2224      	movs	r2, #36	; 0x24
 8003858:	2100      	movs	r1, #0
 800385a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003860:	2b00      	cmp	r3, #0
 8003862:	d004      	beq.n	800386e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	0010      	movs	r0, r2
 800386c:	4798      	blx	r3
    }
  }
  return status;
 800386e:	230f      	movs	r3, #15
 8003870:	18fb      	adds	r3, r7, r3
 8003872:	781b      	ldrb	r3, [r3, #0]
}
 8003874:	0018      	movs	r0, r3
 8003876:	46bd      	mov	sp, r7
 8003878:	b004      	add	sp, #16
 800387a:	bd80      	pop	{r7, pc}
 800387c:	fffffeff 	.word	0xfffffeff
 8003880:	40020000 	.word	0x40020000

08003884 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 800388c:	4b55      	ldr	r3, [pc, #340]	; (80039e4 <HAL_DMA_IRQHandler+0x160>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	221c      	movs	r2, #28
 80038a0:	4013      	ands	r3, r2
 80038a2:	2204      	movs	r2, #4
 80038a4:	409a      	lsls	r2, r3
 80038a6:	0013      	movs	r3, r2
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	4013      	ands	r3, r2
 80038ac:	d027      	beq.n	80038fe <HAL_DMA_IRQHandler+0x7a>
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2204      	movs	r2, #4
 80038b2:	4013      	ands	r3, r2
 80038b4:	d023      	beq.n	80038fe <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2220      	movs	r2, #32
 80038be:	4013      	ands	r3, r2
 80038c0:	d107      	bne.n	80038d2 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2104      	movs	r1, #4
 80038ce:	438a      	bics	r2, r1
 80038d0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80038d2:	4b44      	ldr	r3, [pc, #272]	; (80039e4 <HAL_DMA_IRQHandler+0x160>)
 80038d4:	6859      	ldr	r1, [r3, #4]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	221c      	movs	r2, #28
 80038dc:	4013      	ands	r3, r2
 80038de:	2204      	movs	r2, #4
 80038e0:	409a      	lsls	r2, r3
 80038e2:	4b40      	ldr	r3, [pc, #256]	; (80039e4 <HAL_DMA_IRQHandler+0x160>)
 80038e4:	430a      	orrs	r2, r1
 80038e6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d100      	bne.n	80038f2 <HAL_DMA_IRQHandler+0x6e>
 80038f0:	e073      	b.n	80039da <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	0010      	movs	r0, r2
 80038fa:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80038fc:	e06d      	b.n	80039da <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	221c      	movs	r2, #28
 8003904:	4013      	ands	r3, r2
 8003906:	2202      	movs	r2, #2
 8003908:	409a      	lsls	r2, r3
 800390a:	0013      	movs	r3, r2
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4013      	ands	r3, r2
 8003910:	d02e      	beq.n	8003970 <HAL_DMA_IRQHandler+0xec>
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2202      	movs	r2, #2
 8003916:	4013      	ands	r3, r2
 8003918:	d02a      	beq.n	8003970 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2220      	movs	r2, #32
 8003922:	4013      	ands	r3, r2
 8003924:	d10b      	bne.n	800393e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	210a      	movs	r1, #10
 8003932:	438a      	bics	r2, r1
 8003934:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2225      	movs	r2, #37	; 0x25
 800393a:	2101      	movs	r1, #1
 800393c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800393e:	4b29      	ldr	r3, [pc, #164]	; (80039e4 <HAL_DMA_IRQHandler+0x160>)
 8003940:	6859      	ldr	r1, [r3, #4]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	221c      	movs	r2, #28
 8003948:	4013      	ands	r3, r2
 800394a:	2202      	movs	r2, #2
 800394c:	409a      	lsls	r2, r3
 800394e:	4b25      	ldr	r3, [pc, #148]	; (80039e4 <HAL_DMA_IRQHandler+0x160>)
 8003950:	430a      	orrs	r2, r1
 8003952:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2224      	movs	r2, #36	; 0x24
 8003958:	2100      	movs	r1, #0
 800395a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	2b00      	cmp	r3, #0
 8003962:	d03a      	beq.n	80039da <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	0010      	movs	r0, r2
 800396c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800396e:	e034      	b.n	80039da <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	221c      	movs	r2, #28
 8003976:	4013      	ands	r3, r2
 8003978:	2208      	movs	r2, #8
 800397a:	409a      	lsls	r2, r3
 800397c:	0013      	movs	r3, r2
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	4013      	ands	r3, r2
 8003982:	d02b      	beq.n	80039dc <HAL_DMA_IRQHandler+0x158>
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	2208      	movs	r2, #8
 8003988:	4013      	ands	r3, r2
 800398a:	d027      	beq.n	80039dc <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	210e      	movs	r1, #14
 8003998:	438a      	bics	r2, r1
 800399a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800399c:	4b11      	ldr	r3, [pc, #68]	; (80039e4 <HAL_DMA_IRQHandler+0x160>)
 800399e:	6859      	ldr	r1, [r3, #4]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a4:	221c      	movs	r2, #28
 80039a6:	4013      	ands	r3, r2
 80039a8:	2201      	movs	r2, #1
 80039aa:	409a      	lsls	r2, r3
 80039ac:	4b0d      	ldr	r3, [pc, #52]	; (80039e4 <HAL_DMA_IRQHandler+0x160>)
 80039ae:	430a      	orrs	r2, r1
 80039b0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2225      	movs	r2, #37	; 0x25
 80039bc:	2101      	movs	r1, #1
 80039be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2224      	movs	r2, #36	; 0x24
 80039c4:	2100      	movs	r1, #0
 80039c6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d005      	beq.n	80039dc <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	0010      	movs	r0, r2
 80039d8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	46c0      	nop			; (mov r8, r8)
}
 80039de:	46bd      	mov	sp, r7
 80039e0:	b004      	add	sp, #16
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	40020000 	.word	0x40020000

080039e8 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2225      	movs	r2, #37	; 0x25
 80039f4:	5c9b      	ldrb	r3, [r3, r2]
 80039f6:	b2db      	uxtb	r3, r3
}
 80039f8:	0018      	movs	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	b002      	add	sp, #8
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003a16:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d004      	beq.n	8003a2a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003a28:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003a2a:	4b14      	ldr	r3, [pc, #80]	; (8003a7c <DMA_SetConfig+0x7c>)
 8003a2c:	6859      	ldr	r1, [r3, #4]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	221c      	movs	r2, #28
 8003a34:	4013      	ands	r3, r2
 8003a36:	2201      	movs	r2, #1
 8003a38:	409a      	lsls	r2, r3
 8003a3a:	4b10      	ldr	r3, [pc, #64]	; (8003a7c <DMA_SetConfig+0x7c>)
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	2b10      	cmp	r3, #16
 8003a4e:	d108      	bne.n	8003a62 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a60:	e007      	b.n	8003a72 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	60da      	str	r2, [r3, #12]
}
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	46bd      	mov	sp, r7
 8003a76:	b004      	add	sp, #16
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	46c0      	nop			; (mov r8, r8)
 8003a7c:	40020000 	.word	0x40020000

08003a80 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	089b      	lsrs	r3, r3, #2
 8003a8e:	4a10      	ldr	r2, [pc, #64]	; (8003ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003a90:	4694      	mov	ip, r2
 8003a92:	4463      	add	r3, ip
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	001a      	movs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	001a      	movs	r2, r3
 8003aa2:	23ff      	movs	r3, #255	; 0xff
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	3b08      	subs	r3, #8
 8003aa8:	2114      	movs	r1, #20
 8003aaa:	0018      	movs	r0, r3
 8003aac:	f7fc fb28 	bl	8000100 <__udivsi3>
 8003ab0:	0003      	movs	r3, r0
 8003ab2:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a07      	ldr	r2, [pc, #28]	; (8003ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003ab8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	221f      	movs	r2, #31
 8003abe:	4013      	ands	r3, r2
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003ac8:	46c0      	nop			; (mov r8, r8)
 8003aca:	46bd      	mov	sp, r7
 8003acc:	b004      	add	sp, #16
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	10008200 	.word	0x10008200
 8003ad4:	40020880 	.word	0x40020880

08003ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	223f      	movs	r2, #63	; 0x3f
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4a0a      	ldr	r2, [pc, #40]	; (8003b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003aee:	4694      	mov	ip, r2
 8003af0:	4463      	add	r3, ip
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	001a      	movs	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a07      	ldr	r2, [pc, #28]	; (8003b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003afe:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	2203      	movs	r2, #3
 8003b06:	4013      	ands	r3, r2
 8003b08:	2201      	movs	r2, #1
 8003b0a:	409a      	lsls	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003b10:	46c0      	nop			; (mov r8, r8)
 8003b12:	46bd      	mov	sp, r7
 8003b14:	b004      	add	sp, #16
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	1000823f 	.word	0x1000823f
 8003b1c:	40020940 	.word	0x40020940

08003b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b2e:	e147      	b.n	8003dc0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2101      	movs	r1, #1
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	4091      	lsls	r1, r2
 8003b3a:	000a      	movs	r2, r1
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d100      	bne.n	8003b48 <HAL_GPIO_Init+0x28>
 8003b46:	e138      	b.n	8003dba <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	2203      	movs	r2, #3
 8003b4e:	4013      	ands	r3, r2
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d005      	beq.n	8003b60 <HAL_GPIO_Init+0x40>
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2203      	movs	r2, #3
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d130      	bne.n	8003bc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	2203      	movs	r2, #3
 8003b6c:	409a      	lsls	r2, r3
 8003b6e:	0013      	movs	r3, r2
 8003b70:	43da      	mvns	r2, r3
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	4013      	ands	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	68da      	ldr	r2, [r3, #12]
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	409a      	lsls	r2, r3
 8003b82:	0013      	movs	r3, r2
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b96:	2201      	movs	r2, #1
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	0013      	movs	r3, r2
 8003b9e:	43da      	mvns	r2, r3
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	091b      	lsrs	r3, r3, #4
 8003bac:	2201      	movs	r2, #1
 8003bae:	401a      	ands	r2, r3
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	409a      	lsls	r2, r3
 8003bb4:	0013      	movs	r3, r2
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2203      	movs	r2, #3
 8003bc8:	4013      	ands	r3, r2
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	d017      	beq.n	8003bfe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	2203      	movs	r2, #3
 8003bda:	409a      	lsls	r2, r3
 8003bdc:	0013      	movs	r3, r2
 8003bde:	43da      	mvns	r2, r3
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	4013      	ands	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	409a      	lsls	r2, r3
 8003bf0:	0013      	movs	r3, r2
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2203      	movs	r2, #3
 8003c04:	4013      	ands	r3, r2
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d123      	bne.n	8003c52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	08da      	lsrs	r2, r3, #3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3208      	adds	r2, #8
 8003c12:	0092      	lsls	r2, r2, #2
 8003c14:	58d3      	ldr	r3, [r2, r3]
 8003c16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	2207      	movs	r2, #7
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	220f      	movs	r2, #15
 8003c22:	409a      	lsls	r2, r3
 8003c24:	0013      	movs	r3, r2
 8003c26:	43da      	mvns	r2, r3
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	691a      	ldr	r2, [r3, #16]
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2107      	movs	r1, #7
 8003c36:	400b      	ands	r3, r1
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	409a      	lsls	r2, r3
 8003c3c:	0013      	movs	r3, r2
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	08da      	lsrs	r2, r3, #3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3208      	adds	r2, #8
 8003c4c:	0092      	lsls	r2, r2, #2
 8003c4e:	6939      	ldr	r1, [r7, #16]
 8003c50:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	2203      	movs	r2, #3
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	0013      	movs	r3, r2
 8003c62:	43da      	mvns	r2, r3
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	4013      	ands	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2203      	movs	r2, #3
 8003c70:	401a      	ands	r2, r3
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	409a      	lsls	r2, r3
 8003c78:	0013      	movs	r3, r2
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	23c0      	movs	r3, #192	; 0xc0
 8003c8c:	029b      	lsls	r3, r3, #10
 8003c8e:	4013      	ands	r3, r2
 8003c90:	d100      	bne.n	8003c94 <HAL_GPIO_Init+0x174>
 8003c92:	e092      	b.n	8003dba <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003c94:	4a50      	ldr	r2, [pc, #320]	; (8003dd8 <HAL_GPIO_Init+0x2b8>)
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	089b      	lsrs	r3, r3, #2
 8003c9a:	3318      	adds	r3, #24
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	589b      	ldr	r3, [r3, r2]
 8003ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2203      	movs	r2, #3
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	220f      	movs	r2, #15
 8003cac:	409a      	lsls	r2, r3
 8003cae:	0013      	movs	r3, r2
 8003cb0:	43da      	mvns	r2, r3
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	23a0      	movs	r3, #160	; 0xa0
 8003cbc:	05db      	lsls	r3, r3, #23
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d013      	beq.n	8003cea <HAL_GPIO_Init+0x1ca>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a45      	ldr	r2, [pc, #276]	; (8003ddc <HAL_GPIO_Init+0x2bc>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d00d      	beq.n	8003ce6 <HAL_GPIO_Init+0x1c6>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a44      	ldr	r2, [pc, #272]	; (8003de0 <HAL_GPIO_Init+0x2c0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d007      	beq.n	8003ce2 <HAL_GPIO_Init+0x1c2>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a43      	ldr	r2, [pc, #268]	; (8003de4 <HAL_GPIO_Init+0x2c4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d101      	bne.n	8003cde <HAL_GPIO_Init+0x1be>
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e006      	b.n	8003cec <HAL_GPIO_Init+0x1cc>
 8003cde:	2305      	movs	r3, #5
 8003ce0:	e004      	b.n	8003cec <HAL_GPIO_Init+0x1cc>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e002      	b.n	8003cec <HAL_GPIO_Init+0x1cc>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e000      	b.n	8003cec <HAL_GPIO_Init+0x1cc>
 8003cea:	2300      	movs	r3, #0
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	2103      	movs	r1, #3
 8003cf0:	400a      	ands	r2, r1
 8003cf2:	00d2      	lsls	r2, r2, #3
 8003cf4:	4093      	lsls	r3, r2
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003cfc:	4936      	ldr	r1, [pc, #216]	; (8003dd8 <HAL_GPIO_Init+0x2b8>)
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	089b      	lsrs	r3, r3, #2
 8003d02:	3318      	adds	r3, #24
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d0a:	4b33      	ldr	r3, [pc, #204]	; (8003dd8 <HAL_GPIO_Init+0x2b8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	43da      	mvns	r2, r3
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	4013      	ands	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	2380      	movs	r3, #128	; 0x80
 8003d20:	035b      	lsls	r3, r3, #13
 8003d22:	4013      	ands	r3, r2
 8003d24:	d003      	beq.n	8003d2e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d2e:	4b2a      	ldr	r3, [pc, #168]	; (8003dd8 <HAL_GPIO_Init+0x2b8>)
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003d34:	4b28      	ldr	r3, [pc, #160]	; (8003dd8 <HAL_GPIO_Init+0x2b8>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	43da      	mvns	r2, r3
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	4013      	ands	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	2380      	movs	r3, #128	; 0x80
 8003d4a:	039b      	lsls	r3, r3, #14
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	d003      	beq.n	8003d58 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d58:	4b1f      	ldr	r3, [pc, #124]	; (8003dd8 <HAL_GPIO_Init+0x2b8>)
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003d5e:	4a1e      	ldr	r2, [pc, #120]	; (8003dd8 <HAL_GPIO_Init+0x2b8>)
 8003d60:	2384      	movs	r3, #132	; 0x84
 8003d62:	58d3      	ldr	r3, [r2, r3]
 8003d64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	43da      	mvns	r2, r3
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	2380      	movs	r3, #128	; 0x80
 8003d76:	029b      	lsls	r3, r3, #10
 8003d78:	4013      	ands	r3, r2
 8003d7a:	d003      	beq.n	8003d84 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d84:	4914      	ldr	r1, [pc, #80]	; (8003dd8 <HAL_GPIO_Init+0x2b8>)
 8003d86:	2284      	movs	r2, #132	; 0x84
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003d8c:	4a12      	ldr	r2, [pc, #72]	; (8003dd8 <HAL_GPIO_Init+0x2b8>)
 8003d8e:	2380      	movs	r3, #128	; 0x80
 8003d90:	58d3      	ldr	r3, [r2, r3]
 8003d92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	43da      	mvns	r2, r3
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	2380      	movs	r3, #128	; 0x80
 8003da4:	025b      	lsls	r3, r3, #9
 8003da6:	4013      	ands	r3, r2
 8003da8:	d003      	beq.n	8003db2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003db2:	4909      	ldr	r1, [pc, #36]	; (8003dd8 <HAL_GPIO_Init+0x2b8>)
 8003db4:	2280      	movs	r2, #128	; 0x80
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	40da      	lsrs	r2, r3
 8003dc8:	1e13      	subs	r3, r2, #0
 8003dca:	d000      	beq.n	8003dce <HAL_GPIO_Init+0x2ae>
 8003dcc:	e6b0      	b.n	8003b30 <HAL_GPIO_Init+0x10>
  }
}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	46c0      	nop			; (mov r8, r8)
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	b006      	add	sp, #24
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40021800 	.word	0x40021800
 8003ddc:	50000400 	.word	0x50000400
 8003de0:	50000800 	.word	0x50000800
 8003de4:	50000c00 	.word	0x50000c00

08003de8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	000a      	movs	r2, r1
 8003df2:	1cbb      	adds	r3, r7, #2
 8003df4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	1cba      	adds	r2, r7, #2
 8003dfc:	8812      	ldrh	r2, [r2, #0]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	d004      	beq.n	8003e0c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003e02:	230f      	movs	r3, #15
 8003e04:	18fb      	adds	r3, r7, r3
 8003e06:	2201      	movs	r2, #1
 8003e08:	701a      	strb	r2, [r3, #0]
 8003e0a:	e003      	b.n	8003e14 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e0c:	230f      	movs	r3, #15
 8003e0e:	18fb      	adds	r3, r7, r3
 8003e10:	2200      	movs	r2, #0
 8003e12:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003e14:	230f      	movs	r3, #15
 8003e16:	18fb      	adds	r3, r7, r3
 8003e18:	781b      	ldrb	r3, [r3, #0]
}
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	b004      	add	sp, #16
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b082      	sub	sp, #8
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
 8003e2a:	0008      	movs	r0, r1
 8003e2c:	0011      	movs	r1, r2
 8003e2e:	1cbb      	adds	r3, r7, #2
 8003e30:	1c02      	adds	r2, r0, #0
 8003e32:	801a      	strh	r2, [r3, #0]
 8003e34:	1c7b      	adds	r3, r7, #1
 8003e36:	1c0a      	adds	r2, r1, #0
 8003e38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e3a:	1c7b      	adds	r3, r7, #1
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d004      	beq.n	8003e4c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e42:	1cbb      	adds	r3, r7, #2
 8003e44:	881a      	ldrh	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e4a:	e003      	b.n	8003e54 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e4c:	1cbb      	adds	r3, r7, #2
 8003e4e:	881a      	ldrh	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e54:	46c0      	nop			; (mov r8, r8)
 8003e56:	46bd      	mov	sp, r7
 8003e58:	b002      	add	sp, #8
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	000a      	movs	r2, r1
 8003e66:	1cbb      	adds	r3, r7, #2
 8003e68:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e70:	1cbb      	adds	r3, r7, #2
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	4013      	ands	r3, r2
 8003e78:	041a      	lsls	r2, r3, #16
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	1cb9      	adds	r1, r7, #2
 8003e80:	8809      	ldrh	r1, [r1, #0]
 8003e82:	400b      	ands	r3, r1
 8003e84:	431a      	orrs	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	619a      	str	r2, [r3, #24]
}
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	b004      	add	sp, #16
 8003e90:	bd80      	pop	{r7, pc}
	...

08003e94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	0002      	movs	r2, r0
 8003e9c:	1dbb      	adds	r3, r7, #6
 8003e9e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003ea0:	4b10      	ldr	r3, [pc, #64]	; (8003ee4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	1dba      	adds	r2, r7, #6
 8003ea6:	8812      	ldrh	r2, [r2, #0]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	d008      	beq.n	8003ebe <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003eac:	4b0d      	ldr	r3, [pc, #52]	; (8003ee4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003eae:	1dba      	adds	r2, r7, #6
 8003eb0:	8812      	ldrh	r2, [r2, #0]
 8003eb2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003eb4:	1dbb      	adds	r3, r7, #6
 8003eb6:	881b      	ldrh	r3, [r3, #0]
 8003eb8:	0018      	movs	r0, r3
 8003eba:	f7fc ff31 	bl	8000d20 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8003ebe:	4b09      	ldr	r3, [pc, #36]	; (8003ee4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	1dba      	adds	r2, r7, #6
 8003ec4:	8812      	ldrh	r2, [r2, #0]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d008      	beq.n	8003edc <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003eca:	4b06      	ldr	r3, [pc, #24]	; (8003ee4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003ecc:	1dba      	adds	r2, r7, #6
 8003ece:	8812      	ldrh	r2, [r2, #0]
 8003ed0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003ed2:	1dbb      	adds	r3, r7, #6
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f7fc fefe 	bl	8000cd8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003edc:	46c0      	nop			; (mov r8, r8)
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	b002      	add	sp, #8
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40021800 	.word	0x40021800

08003ee8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e0a8      	b.n	800404c <HAL_I2C_Init+0x164>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2241      	movs	r2, #65	; 0x41
 8003efe:	5c9b      	ldrb	r3, [r3, r2]
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d12d      	bne.n	8003f62 <HAL_I2C_Init+0x7a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2240      	movs	r2, #64	; 0x40
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a50      	ldr	r2, [pc, #320]	; (8004054 <HAL_I2C_Init+0x16c>)
 8003f12:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a50      	ldr	r2, [pc, #320]	; (8004058 <HAL_I2C_Init+0x170>)
 8003f18:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a4f      	ldr	r2, [pc, #316]	; (800405c <HAL_I2C_Init+0x174>)
 8003f1e:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a4f      	ldr	r2, [pc, #316]	; (8004060 <HAL_I2C_Init+0x178>)
 8003f24:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a4e      	ldr	r2, [pc, #312]	; (8004064 <HAL_I2C_Init+0x17c>)
 8003f2a:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a4e      	ldr	r2, [pc, #312]	; (8004068 <HAL_I2C_Init+0x180>)
 8003f30:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a4d      	ldr	r2, [pc, #308]	; (800406c <HAL_I2C_Init+0x184>)
 8003f36:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a4d      	ldr	r2, [pc, #308]	; (8004070 <HAL_I2C_Init+0x188>)
 8003f3c:	671a      	str	r2, [r3, #112]	; 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a4c      	ldr	r2, [pc, #304]	; (8004074 <HAL_I2C_Init+0x18c>)
 8003f42:	675a      	str	r2, [r3, #116]	; 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a4c      	ldr	r2, [pc, #304]	; (8004078 <HAL_I2C_Init+0x190>)
 8003f48:	679a      	str	r2, [r3, #120]	; 0x78

    if (hi2c->MspInitCallback == NULL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d102      	bne.n	8003f58 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a49      	ldr	r2, [pc, #292]	; (800407c <HAL_I2C_Init+0x194>)
 8003f56:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	0010      	movs	r0, r2
 8003f60:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2241      	movs	r2, #65	; 0x41
 8003f66:	2124      	movs	r1, #36	; 0x24
 8003f68:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2101      	movs	r1, #1
 8003f76:	438a      	bics	r2, r1
 8003f78:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	493f      	ldr	r1, [pc, #252]	; (8004080 <HAL_I2C_Init+0x198>)
 8003f84:	400a      	ands	r2, r1
 8003f86:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	493c      	ldr	r1, [pc, #240]	; (8004084 <HAL_I2C_Init+0x19c>)
 8003f94:	400a      	ands	r2, r1
 8003f96:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d108      	bne.n	8003fb2 <HAL_I2C_Init+0xca>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2180      	movs	r1, #128	; 0x80
 8003faa:	0209      	lsls	r1, r1, #8
 8003fac:	430a      	orrs	r2, r1
 8003fae:	609a      	str	r2, [r3, #8]
 8003fb0:	e007      	b.n	8003fc2 <HAL_I2C_Init+0xda>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689a      	ldr	r2, [r3, #8]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2184      	movs	r1, #132	; 0x84
 8003fbc:	0209      	lsls	r1, r1, #8
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d104      	bne.n	8003fd4 <HAL_I2C_Init+0xec>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2280      	movs	r2, #128	; 0x80
 8003fd0:	0112      	lsls	r2, r2, #4
 8003fd2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	492a      	ldr	r1, [pc, #168]	; (8004088 <HAL_I2C_Init+0x1a0>)
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4925      	ldr	r1, [pc, #148]	; (8004084 <HAL_I2C_Init+0x19c>)
 8003ff0:	400a      	ands	r2, r1
 8003ff2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691a      	ldr	r2, [r3, #16]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69d9      	ldr	r1, [r3, #28]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1a      	ldr	r2, [r3, #32]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2101      	movs	r1, #1
 800402a:	430a      	orrs	r2, r1
 800402c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2241      	movs	r2, #65	; 0x41
 8004038:	2120      	movs	r1, #32
 800403a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2242      	movs	r2, #66	; 0x42
 8004046:	2100      	movs	r1, #0
 8004048:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	0018      	movs	r0, r3
 800404e:	46bd      	mov	sp, r7
 8004050:	b002      	add	sp, #8
 8004052:	bd80      	pop	{r7, pc}
 8004054:	0800497f 	.word	0x0800497f
 8004058:	0800498f 	.word	0x0800498f
 800405c:	0800499f 	.word	0x0800499f
 8004060:	080007a1 	.word	0x080007a1
 8004064:	080007f9 	.word	0x080007f9
 8004068:	080049af 	.word	0x080049af
 800406c:	080049bf 	.word	0x080049bf
 8004070:	08000811 	.word	0x08000811
 8004074:	080049cf 	.word	0x080049cf
 8004078:	080004fd 	.word	0x080004fd
 800407c:	08001c35 	.word	0x08001c35
 8004080:	f0ffffff 	.word	0xf0ffffff
 8004084:	ffff7fff 	.word	0xffff7fff
 8004088:	02008000 	.word	0x02008000

0800408c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800408c:	b590      	push	{r4, r7, lr}
 800408e:	b089      	sub	sp, #36	; 0x24
 8004090:	af02      	add	r7, sp, #8
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	000c      	movs	r4, r1
 8004096:	0010      	movs	r0, r2
 8004098:	0019      	movs	r1, r3
 800409a:	230a      	movs	r3, #10
 800409c:	18fb      	adds	r3, r7, r3
 800409e:	1c22      	adds	r2, r4, #0
 80040a0:	801a      	strh	r2, [r3, #0]
 80040a2:	2308      	movs	r3, #8
 80040a4:	18fb      	adds	r3, r7, r3
 80040a6:	1c02      	adds	r2, r0, #0
 80040a8:	801a      	strh	r2, [r3, #0]
 80040aa:	1dbb      	adds	r3, r7, #6
 80040ac:	1c0a      	adds	r2, r1, #0
 80040ae:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2241      	movs	r2, #65	; 0x41
 80040b4:	5c9b      	ldrb	r3, [r3, r2]
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b20      	cmp	r3, #32
 80040ba:	d000      	beq.n	80040be <HAL_I2C_Mem_Write+0x32>
 80040bc:	e10c      	b.n	80042d8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80040be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d004      	beq.n	80040ce <HAL_I2C_Mem_Write+0x42>
 80040c4:	232c      	movs	r3, #44	; 0x2c
 80040c6:	18fb      	adds	r3, r7, r3
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d105      	bne.n	80040da <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2280      	movs	r2, #128	; 0x80
 80040d2:	0092      	lsls	r2, r2, #2
 80040d4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e0ff      	b.n	80042da <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2240      	movs	r2, #64	; 0x40
 80040de:	5c9b      	ldrb	r3, [r3, r2]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d101      	bne.n	80040e8 <HAL_I2C_Mem_Write+0x5c>
 80040e4:	2302      	movs	r3, #2
 80040e6:	e0f8      	b.n	80042da <HAL_I2C_Mem_Write+0x24e>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2240      	movs	r2, #64	; 0x40
 80040ec:	2101      	movs	r1, #1
 80040ee:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040f0:	f7fe f904 	bl	80022fc <HAL_GetTick>
 80040f4:	0003      	movs	r3, r0
 80040f6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040f8:	2380      	movs	r3, #128	; 0x80
 80040fa:	0219      	lsls	r1, r3, #8
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	2319      	movs	r3, #25
 8004104:	2201      	movs	r2, #1
 8004106:	f001 fcfd 	bl	8005b04 <I2C_WaitOnFlagUntilTimeout>
 800410a:	1e03      	subs	r3, r0, #0
 800410c:	d001      	beq.n	8004112 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e0e3      	b.n	80042da <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2241      	movs	r2, #65	; 0x41
 8004116:	2121      	movs	r1, #33	; 0x21
 8004118:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2242      	movs	r2, #66	; 0x42
 800411e:	2140      	movs	r1, #64	; 0x40
 8004120:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800412c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	222c      	movs	r2, #44	; 0x2c
 8004132:	18ba      	adds	r2, r7, r2
 8004134:	8812      	ldrh	r2, [r2, #0]
 8004136:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800413e:	1dbb      	adds	r3, r7, #6
 8004140:	881c      	ldrh	r4, [r3, #0]
 8004142:	2308      	movs	r3, #8
 8004144:	18fb      	adds	r3, r7, r3
 8004146:	881a      	ldrh	r2, [r3, #0]
 8004148:	230a      	movs	r3, #10
 800414a:	18fb      	adds	r3, r7, r3
 800414c:	8819      	ldrh	r1, [r3, #0]
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	9301      	str	r3, [sp, #4]
 8004154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	0023      	movs	r3, r4
 800415a:	f000 ff23 	bl	8004fa4 <I2C_RequestMemoryWrite>
 800415e:	1e03      	subs	r3, r0, #0
 8004160:	d005      	beq.n	800416e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2240      	movs	r2, #64	; 0x40
 8004166:	2100      	movs	r1, #0
 8004168:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e0b5      	b.n	80042da <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004172:	b29b      	uxth	r3, r3
 8004174:	2bff      	cmp	r3, #255	; 0xff
 8004176:	d911      	bls.n	800419c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	22ff      	movs	r2, #255	; 0xff
 800417c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004182:	b2da      	uxtb	r2, r3
 8004184:	2380      	movs	r3, #128	; 0x80
 8004186:	045c      	lsls	r4, r3, #17
 8004188:	230a      	movs	r3, #10
 800418a:	18fb      	adds	r3, r7, r3
 800418c:	8819      	ldrh	r1, [r3, #0]
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	2300      	movs	r3, #0
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	0023      	movs	r3, r4
 8004196:	f001 fe6f 	bl	8005e78 <I2C_TransferConfig>
 800419a:	e012      	b.n	80041c2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	2380      	movs	r3, #128	; 0x80
 80041ae:	049c      	lsls	r4, r3, #18
 80041b0:	230a      	movs	r3, #10
 80041b2:	18fb      	adds	r3, r7, r3
 80041b4:	8819      	ldrh	r1, [r3, #0]
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	2300      	movs	r3, #0
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	0023      	movs	r3, r4
 80041be:	f001 fe5b 	bl	8005e78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	0018      	movs	r0, r3
 80041ca:	f001 fcda 	bl	8005b82 <I2C_WaitOnTXISFlagUntilTimeout>
 80041ce:	1e03      	subs	r3, r0, #0
 80041d0:	d001      	beq.n	80041d6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e081      	b.n	80042da <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	781a      	ldrb	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041fe:	3b01      	subs	r3, #1
 8004200:	b29a      	uxth	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420a:	b29b      	uxth	r3, r3
 800420c:	2b00      	cmp	r3, #0
 800420e:	d03a      	beq.n	8004286 <HAL_I2C_Mem_Write+0x1fa>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004214:	2b00      	cmp	r3, #0
 8004216:	d136      	bne.n	8004286 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	0013      	movs	r3, r2
 8004222:	2200      	movs	r2, #0
 8004224:	2180      	movs	r1, #128	; 0x80
 8004226:	f001 fc6d 	bl	8005b04 <I2C_WaitOnFlagUntilTimeout>
 800422a:	1e03      	subs	r3, r0, #0
 800422c:	d001      	beq.n	8004232 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e053      	b.n	80042da <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004236:	b29b      	uxth	r3, r3
 8004238:	2bff      	cmp	r3, #255	; 0xff
 800423a:	d911      	bls.n	8004260 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	22ff      	movs	r2, #255	; 0xff
 8004240:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004246:	b2da      	uxtb	r2, r3
 8004248:	2380      	movs	r3, #128	; 0x80
 800424a:	045c      	lsls	r4, r3, #17
 800424c:	230a      	movs	r3, #10
 800424e:	18fb      	adds	r3, r7, r3
 8004250:	8819      	ldrh	r1, [r3, #0]
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	2300      	movs	r3, #0
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	0023      	movs	r3, r4
 800425a:	f001 fe0d 	bl	8005e78 <I2C_TransferConfig>
 800425e:	e012      	b.n	8004286 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004264:	b29a      	uxth	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426e:	b2da      	uxtb	r2, r3
 8004270:	2380      	movs	r3, #128	; 0x80
 8004272:	049c      	lsls	r4, r3, #18
 8004274:	230a      	movs	r3, #10
 8004276:	18fb      	adds	r3, r7, r3
 8004278:	8819      	ldrh	r1, [r3, #0]
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	2300      	movs	r3, #0
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	0023      	movs	r3, r4
 8004282:	f001 fdf9 	bl	8005e78 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428a:	b29b      	uxth	r3, r3
 800428c:	2b00      	cmp	r3, #0
 800428e:	d198      	bne.n	80041c2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	0018      	movs	r0, r3
 8004298:	f001 fcb2 	bl	8005c00 <I2C_WaitOnSTOPFlagUntilTimeout>
 800429c:	1e03      	subs	r3, r0, #0
 800429e:	d001      	beq.n	80042a4 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e01a      	b.n	80042da <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2220      	movs	r2, #32
 80042aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	490b      	ldr	r1, [pc, #44]	; (80042e4 <HAL_I2C_Mem_Write+0x258>)
 80042b8:	400a      	ands	r2, r1
 80042ba:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2241      	movs	r2, #65	; 0x41
 80042c0:	2120      	movs	r1, #32
 80042c2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2242      	movs	r2, #66	; 0x42
 80042c8:	2100      	movs	r1, #0
 80042ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2240      	movs	r2, #64	; 0x40
 80042d0:	2100      	movs	r1, #0
 80042d2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80042d4:	2300      	movs	r3, #0
 80042d6:	e000      	b.n	80042da <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80042d8:	2302      	movs	r3, #2
  }
}
 80042da:	0018      	movs	r0, r3
 80042dc:	46bd      	mov	sp, r7
 80042de:	b007      	add	sp, #28
 80042e0:	bd90      	pop	{r4, r7, pc}
 80042e2:	46c0      	nop			; (mov r8, r8)
 80042e4:	fe00e800 	.word	0xfe00e800

080042e8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042e8:	b590      	push	{r4, r7, lr}
 80042ea:	b089      	sub	sp, #36	; 0x24
 80042ec:	af02      	add	r7, sp, #8
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	000c      	movs	r4, r1
 80042f2:	0010      	movs	r0, r2
 80042f4:	0019      	movs	r1, r3
 80042f6:	230a      	movs	r3, #10
 80042f8:	18fb      	adds	r3, r7, r3
 80042fa:	1c22      	adds	r2, r4, #0
 80042fc:	801a      	strh	r2, [r3, #0]
 80042fe:	2308      	movs	r3, #8
 8004300:	18fb      	adds	r3, r7, r3
 8004302:	1c02      	adds	r2, r0, #0
 8004304:	801a      	strh	r2, [r3, #0]
 8004306:	1dbb      	adds	r3, r7, #6
 8004308:	1c0a      	adds	r2, r1, #0
 800430a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2241      	movs	r2, #65	; 0x41
 8004310:	5c9b      	ldrb	r3, [r3, r2]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b20      	cmp	r3, #32
 8004316:	d000      	beq.n	800431a <HAL_I2C_Mem_Read+0x32>
 8004318:	e110      	b.n	800453c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800431a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431c:	2b00      	cmp	r3, #0
 800431e:	d004      	beq.n	800432a <HAL_I2C_Mem_Read+0x42>
 8004320:	232c      	movs	r3, #44	; 0x2c
 8004322:	18fb      	adds	r3, r7, r3
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d105      	bne.n	8004336 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2280      	movs	r2, #128	; 0x80
 800432e:	0092      	lsls	r2, r2, #2
 8004330:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e103      	b.n	800453e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2240      	movs	r2, #64	; 0x40
 800433a:	5c9b      	ldrb	r3, [r3, r2]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d101      	bne.n	8004344 <HAL_I2C_Mem_Read+0x5c>
 8004340:	2302      	movs	r3, #2
 8004342:	e0fc      	b.n	800453e <HAL_I2C_Mem_Read+0x256>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2240      	movs	r2, #64	; 0x40
 8004348:	2101      	movs	r1, #1
 800434a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800434c:	f7fd ffd6 	bl	80022fc <HAL_GetTick>
 8004350:	0003      	movs	r3, r0
 8004352:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004354:	2380      	movs	r3, #128	; 0x80
 8004356:	0219      	lsls	r1, r3, #8
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	2319      	movs	r3, #25
 8004360:	2201      	movs	r2, #1
 8004362:	f001 fbcf 	bl	8005b04 <I2C_WaitOnFlagUntilTimeout>
 8004366:	1e03      	subs	r3, r0, #0
 8004368:	d001      	beq.n	800436e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e0e7      	b.n	800453e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2241      	movs	r2, #65	; 0x41
 8004372:	2122      	movs	r1, #34	; 0x22
 8004374:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2242      	movs	r2, #66	; 0x42
 800437a:	2140      	movs	r1, #64	; 0x40
 800437c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004388:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	222c      	movs	r2, #44	; 0x2c
 800438e:	18ba      	adds	r2, r7, r2
 8004390:	8812      	ldrh	r2, [r2, #0]
 8004392:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800439a:	1dbb      	adds	r3, r7, #6
 800439c:	881c      	ldrh	r4, [r3, #0]
 800439e:	2308      	movs	r3, #8
 80043a0:	18fb      	adds	r3, r7, r3
 80043a2:	881a      	ldrh	r2, [r3, #0]
 80043a4:	230a      	movs	r3, #10
 80043a6:	18fb      	adds	r3, r7, r3
 80043a8:	8819      	ldrh	r1, [r3, #0]
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	9301      	str	r3, [sp, #4]
 80043b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	0023      	movs	r3, r4
 80043b6:	f000 fe59 	bl	800506c <I2C_RequestMemoryRead>
 80043ba:	1e03      	subs	r3, r0, #0
 80043bc:	d005      	beq.n	80043ca <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2240      	movs	r2, #64	; 0x40
 80043c2:	2100      	movs	r1, #0
 80043c4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e0b9      	b.n	800453e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	2bff      	cmp	r3, #255	; 0xff
 80043d2:	d911      	bls.n	80043f8 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	22ff      	movs	r2, #255	; 0xff
 80043d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	2380      	movs	r3, #128	; 0x80
 80043e2:	045c      	lsls	r4, r3, #17
 80043e4:	230a      	movs	r3, #10
 80043e6:	18fb      	adds	r3, r7, r3
 80043e8:	8819      	ldrh	r1, [r3, #0]
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	4b56      	ldr	r3, [pc, #344]	; (8004548 <HAL_I2C_Mem_Read+0x260>)
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	0023      	movs	r3, r4
 80043f2:	f001 fd41 	bl	8005e78 <I2C_TransferConfig>
 80043f6:	e012      	b.n	800441e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004406:	b2da      	uxtb	r2, r3
 8004408:	2380      	movs	r3, #128	; 0x80
 800440a:	049c      	lsls	r4, r3, #18
 800440c:	230a      	movs	r3, #10
 800440e:	18fb      	adds	r3, r7, r3
 8004410:	8819      	ldrh	r1, [r3, #0]
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	4b4c      	ldr	r3, [pc, #304]	; (8004548 <HAL_I2C_Mem_Read+0x260>)
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	0023      	movs	r3, r4
 800441a:	f001 fd2d 	bl	8005e78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800441e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	0013      	movs	r3, r2
 8004428:	2200      	movs	r2, #0
 800442a:	2104      	movs	r1, #4
 800442c:	f001 fb6a 	bl	8005b04 <I2C_WaitOnFlagUntilTimeout>
 8004430:	1e03      	subs	r3, r0, #0
 8004432:	d001      	beq.n	8004438 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e082      	b.n	800453e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	b2d2      	uxtb	r2, r2
 8004444:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446e:	b29b      	uxth	r3, r3
 8004470:	2b00      	cmp	r3, #0
 8004472:	d03a      	beq.n	80044ea <HAL_I2C_Mem_Read+0x202>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004478:	2b00      	cmp	r3, #0
 800447a:	d136      	bne.n	80044ea <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800447c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	9300      	str	r3, [sp, #0]
 8004484:	0013      	movs	r3, r2
 8004486:	2200      	movs	r2, #0
 8004488:	2180      	movs	r1, #128	; 0x80
 800448a:	f001 fb3b 	bl	8005b04 <I2C_WaitOnFlagUntilTimeout>
 800448e:	1e03      	subs	r3, r0, #0
 8004490:	d001      	beq.n	8004496 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e053      	b.n	800453e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449a:	b29b      	uxth	r3, r3
 800449c:	2bff      	cmp	r3, #255	; 0xff
 800449e:	d911      	bls.n	80044c4 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	22ff      	movs	r2, #255	; 0xff
 80044a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	2380      	movs	r3, #128	; 0x80
 80044ae:	045c      	lsls	r4, r3, #17
 80044b0:	230a      	movs	r3, #10
 80044b2:	18fb      	adds	r3, r7, r3
 80044b4:	8819      	ldrh	r1, [r3, #0]
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	2300      	movs	r3, #0
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	0023      	movs	r3, r4
 80044be:	f001 fcdb 	bl	8005e78 <I2C_TransferConfig>
 80044c2:	e012      	b.n	80044ea <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	2380      	movs	r3, #128	; 0x80
 80044d6:	049c      	lsls	r4, r3, #18
 80044d8:	230a      	movs	r3, #10
 80044da:	18fb      	adds	r3, r7, r3
 80044dc:	8819      	ldrh	r1, [r3, #0]
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	2300      	movs	r3, #0
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	0023      	movs	r3, r4
 80044e6:	f001 fcc7 	bl	8005e78 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d194      	bne.n	800441e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	0018      	movs	r0, r3
 80044fc:	f001 fb80 	bl	8005c00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004500:	1e03      	subs	r3, r0, #0
 8004502:	d001      	beq.n	8004508 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e01a      	b.n	800453e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2220      	movs	r2, #32
 800450e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	490c      	ldr	r1, [pc, #48]	; (800454c <HAL_I2C_Mem_Read+0x264>)
 800451c:	400a      	ands	r2, r1
 800451e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2241      	movs	r2, #65	; 0x41
 8004524:	2120      	movs	r1, #32
 8004526:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2242      	movs	r2, #66	; 0x42
 800452c:	2100      	movs	r1, #0
 800452e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2240      	movs	r2, #64	; 0x40
 8004534:	2100      	movs	r1, #0
 8004536:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004538:	2300      	movs	r3, #0
 800453a:	e000      	b.n	800453e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800453c:	2302      	movs	r3, #2
  }
}
 800453e:	0018      	movs	r0, r3
 8004540:	46bd      	mov	sp, r7
 8004542:	b007      	add	sp, #28
 8004544:	bd90      	pop	{r4, r7, pc}
 8004546:	46c0      	nop			; (mov r8, r8)
 8004548:	80002400 	.word	0x80002400
 800454c:	fe00e800 	.word	0xfe00e800

08004550 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	603b      	str	r3, [r7, #0]
 800455c:	1dbb      	adds	r3, r7, #6
 800455e:	801a      	strh	r2, [r3, #0]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2241      	movs	r2, #65	; 0x41
 8004564:	5c9b      	ldrb	r3, [r3, r2]
 8004566:	b2db      	uxtb	r3, r3
 8004568:	001a      	movs	r2, r3
 800456a:	2328      	movs	r3, #40	; 0x28
 800456c:	4013      	ands	r3, r2
 800456e:	2b28      	cmp	r3, #40	; 0x28
 8004570:	d000      	beq.n	8004574 <HAL_I2C_Slave_Seq_Transmit_IT+0x24>
 8004572:	e09f      	b.n	80046b4 <HAL_I2C_Slave_Seq_Transmit_IT+0x164>
  {
    if ((pData == NULL) || (Size == 0U))
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_I2C_Slave_Seq_Transmit_IT+0x32>
 800457a:	1dbb      	adds	r3, r7, #6
 800457c:	881b      	ldrh	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d105      	bne.n	800458e <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2280      	movs	r2, #128	; 0x80
 8004586:	0092      	lsls	r2, r2, #2
 8004588:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e093      	b.n	80046b6 <HAL_I2C_Slave_Seq_Transmit_IT+0x166>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800458e:	4a4c      	ldr	r2, [pc, #304]	; (80046c0 <HAL_I2C_Slave_Seq_Transmit_IT+0x170>)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	0011      	movs	r1, r2
 8004594:	0018      	movs	r0, r3
 8004596:	f001 fd19 	bl	8005fcc <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2240      	movs	r2, #64	; 0x40
 800459e:	5c9b      	ldrb	r3, [r3, r2]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d101      	bne.n	80045a8 <HAL_I2C_Slave_Seq_Transmit_IT+0x58>
 80045a4:	2302      	movs	r3, #2
 80045a6:	e086      	b.n	80046b6 <HAL_I2C_Slave_Seq_Transmit_IT+0x166>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2240      	movs	r2, #64	; 0x40
 80045ac:	2101      	movs	r1, #1
 80045ae:	5499      	strb	r1, [r3, r2]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2241      	movs	r2, #65	; 0x41
 80045b4:	5c9b      	ldrb	r3, [r3, r2]
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b2a      	cmp	r3, #42	; 0x2a
 80045ba:	d12c      	bne.n	8004616 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2102      	movs	r1, #2
 80045c0:	0018      	movs	r0, r3
 80045c2:	f001 fd03 	bl	8005fcc <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	2380      	movs	r3, #128	; 0x80
 80045ce:	021b      	lsls	r3, r3, #8
 80045d0:	401a      	ands	r2, r3
 80045d2:	2380      	movs	r3, #128	; 0x80
 80045d4:	021b      	lsls	r3, r3, #8
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d11d      	bne.n	8004616 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4937      	ldr	r1, [pc, #220]	; (80046c4 <HAL_I2C_Slave_Seq_Transmit_IT+0x174>)
 80045e6:	400a      	ands	r2, r1
 80045e8:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d011      	beq.n	8004616 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f6:	4a34      	ldr	r2, [pc, #208]	; (80046c8 <HAL_I2C_Slave_Seq_Transmit_IT+0x178>)
 80045f8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fe:	0018      	movs	r0, r3
 8004600:	f7ff f8d6 	bl	80037b0 <HAL_DMA_Abort_IT>
 8004604:	1e03      	subs	r3, r0, #0
 8004606:	d006      	beq.n	8004616 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004612:	0018      	movs	r0, r3
 8004614:	4790      	blx	r2
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2241      	movs	r2, #65	; 0x41
 800461a:	2129      	movs	r1, #41	; 0x29
 800461c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2242      	movs	r2, #66	; 0x42
 8004622:	2120      	movs	r1, #32
 8004624:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4923      	ldr	r1, [pc, #140]	; (80046c4 <HAL_I2C_Slave_Seq_Transmit_IT+0x174>)
 8004638:	400a      	ands	r2, r1
 800463a:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	1dba      	adds	r2, r7, #6
 8004646:	8812      	ldrh	r2, [r2, #0]
 8004648:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464e:	b29a      	uxth	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4a1b      	ldr	r2, [pc, #108]	; (80046cc <HAL_I2C_Slave_Seq_Transmit_IT+0x17c>)
 800465e:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	2208      	movs	r2, #8
 8004668:	4013      	ands	r3, r2
 800466a:	3b08      	subs	r3, #8
 800466c:	425a      	negs	r2, r3
 800466e:	4153      	adcs	r3, r2
 8004670:	b2da      	uxtb	r2, r3
 8004672:	2117      	movs	r1, #23
 8004674:	187b      	adds	r3, r7, r1
 8004676:	701a      	strb	r2, [r3, #0]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	0c1b      	lsrs	r3, r3, #16
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2201      	movs	r2, #1
 8004684:	4013      	ands	r3, r2
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b01      	cmp	r3, #1
 800468a:	d107      	bne.n	800469c <HAL_I2C_Slave_Seq_Transmit_IT+0x14c>
 800468c:	187b      	adds	r3, r7, r1
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d003      	beq.n	800469c <HAL_I2C_Slave_Seq_Transmit_IT+0x14c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2208      	movs	r2, #8
 800469a:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2240      	movs	r2, #64	; 0x40
 80046a0:	2100      	movs	r1, #0
 80046a2:	5499      	strb	r1, [r3, r2]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 80046a4:	4a06      	ldr	r2, [pc, #24]	; (80046c0 <HAL_I2C_Slave_Seq_Transmit_IT+0x170>)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	0011      	movs	r1, r2
 80046aa:	0018      	movs	r0, r3
 80046ac:	f001 fc1e 	bl	8005eec <I2C_Enable_IRQ>

    return HAL_OK;
 80046b0:	2300      	movs	r3, #0
 80046b2:	e000      	b.n	80046b6 <HAL_I2C_Slave_Seq_Transmit_IT+0x166>
  }
  else
  {
    return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
  }
}
 80046b6:	0018      	movs	r0, r3
 80046b8:	46bd      	mov	sp, r7
 80046ba:	b006      	add	sp, #24
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	46c0      	nop			; (mov r8, r8)
 80046c0:	00008001 	.word	0x00008001
 80046c4:	ffff7fff 	.word	0xffff7fff
 80046c8:	08005ac7 	.word	0x08005ac7
 80046cc:	080049e1 	.word	0x080049e1

080046d0 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	603b      	str	r3, [r7, #0]
 80046dc:	1dbb      	adds	r3, r7, #6
 80046de:	801a      	strh	r2, [r3, #0]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2241      	movs	r2, #65	; 0x41
 80046e4:	5c9b      	ldrb	r3, [r3, r2]
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	001a      	movs	r2, r3
 80046ea:	2328      	movs	r3, #40	; 0x28
 80046ec:	4013      	ands	r3, r2
 80046ee:	2b28      	cmp	r3, #40	; 0x28
 80046f0:	d000      	beq.n	80046f4 <HAL_I2C_Slave_Seq_Receive_IT+0x24>
 80046f2:	e09f      	b.n	8004834 <HAL_I2C_Slave_Seq_Receive_IT+0x164>
  {
    if ((pData == NULL) || (Size == 0U))
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_I2C_Slave_Seq_Receive_IT+0x32>
 80046fa:	1dbb      	adds	r3, r7, #6
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d105      	bne.n	800470e <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2280      	movs	r2, #128	; 0x80
 8004706:	0092      	lsls	r2, r2, #2
 8004708:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e093      	b.n	8004836 <HAL_I2C_Slave_Seq_Receive_IT+0x166>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800470e:	4a4c      	ldr	r2, [pc, #304]	; (8004840 <HAL_I2C_Slave_Seq_Receive_IT+0x170>)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	0011      	movs	r1, r2
 8004714:	0018      	movs	r0, r3
 8004716:	f001 fc59 	bl	8005fcc <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2240      	movs	r2, #64	; 0x40
 800471e:	5c9b      	ldrb	r3, [r3, r2]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d101      	bne.n	8004728 <HAL_I2C_Slave_Seq_Receive_IT+0x58>
 8004724:	2302      	movs	r3, #2
 8004726:	e086      	b.n	8004836 <HAL_I2C_Slave_Seq_Receive_IT+0x166>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2240      	movs	r2, #64	; 0x40
 800472c:	2101      	movs	r1, #1
 800472e:	5499      	strb	r1, [r3, r2]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2241      	movs	r2, #65	; 0x41
 8004734:	5c9b      	ldrb	r3, [r3, r2]
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b29      	cmp	r3, #41	; 0x29
 800473a:	d12c      	bne.n	8004796 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2101      	movs	r1, #1
 8004740:	0018      	movs	r0, r3
 8004742:	f001 fc43 	bl	8005fcc <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	2380      	movs	r3, #128	; 0x80
 800474e:	01db      	lsls	r3, r3, #7
 8004750:	401a      	ands	r2, r3
 8004752:	2380      	movs	r3, #128	; 0x80
 8004754:	01db      	lsls	r3, r3, #7
 8004756:	429a      	cmp	r2, r3
 8004758:	d11d      	bne.n	8004796 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4937      	ldr	r1, [pc, #220]	; (8004844 <HAL_I2C_Slave_Seq_Receive_IT+0x174>)
 8004766:	400a      	ands	r2, r1
 8004768:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476e:	2b00      	cmp	r3, #0
 8004770:	d011      	beq.n	8004796 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004776:	4a34      	ldr	r2, [pc, #208]	; (8004848 <HAL_I2C_Slave_Seq_Receive_IT+0x178>)
 8004778:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477e:	0018      	movs	r0, r3
 8004780:	f7ff f816 	bl	80037b0 <HAL_DMA_Abort_IT>
 8004784:	1e03      	subs	r3, r0, #0
 8004786:	d006      	beq.n	8004796 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004792:	0018      	movs	r0, r3
 8004794:	4790      	blx	r2
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2241      	movs	r2, #65	; 0x41
 800479a:	212a      	movs	r1, #42	; 0x2a
 800479c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2242      	movs	r2, #66	; 0x42
 80047a2:	2120      	movs	r1, #32
 80047a4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4925      	ldr	r1, [pc, #148]	; (800484c <HAL_I2C_Slave_Seq_Receive_IT+0x17c>)
 80047b8:	400a      	ands	r2, r1
 80047ba:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	1dba      	adds	r2, r7, #6
 80047c6:	8812      	ldrh	r2, [r2, #0]
 80047c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	4a1c      	ldr	r2, [pc, #112]	; (8004850 <HAL_I2C_Slave_Seq_Receive_IT+0x180>)
 80047de:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	2208      	movs	r2, #8
 80047e8:	4013      	ands	r3, r2
 80047ea:	3b08      	subs	r3, #8
 80047ec:	425a      	negs	r2, r3
 80047ee:	4153      	adcs	r3, r2
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	2117      	movs	r1, #23
 80047f4:	187b      	adds	r3, r7, r1
 80047f6:	701a      	strb	r2, [r3, #0]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	0c1b      	lsrs	r3, r3, #16
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2201      	movs	r2, #1
 8004804:	4013      	ands	r3, r2
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	d107      	bne.n	800481c <HAL_I2C_Slave_Seq_Receive_IT+0x14c>
 800480c:	187b      	adds	r3, r7, r1
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d003      	beq.n	800481c <HAL_I2C_Slave_Seq_Receive_IT+0x14c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2208      	movs	r2, #8
 800481a:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2240      	movs	r2, #64	; 0x40
 8004820:	2100      	movs	r1, #0
 8004822:	5499      	strb	r1, [r3, r2]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8004824:	4a06      	ldr	r2, [pc, #24]	; (8004840 <HAL_I2C_Slave_Seq_Receive_IT+0x170>)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	0011      	movs	r1, r2
 800482a:	0018      	movs	r0, r3
 800482c:	f001 fb5e 	bl	8005eec <I2C_Enable_IRQ>

    return HAL_OK;
 8004830:	2300      	movs	r3, #0
 8004832:	e000      	b.n	8004836 <HAL_I2C_Slave_Seq_Receive_IT+0x166>
  }
  else
  {
    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
  }
}
 8004836:	0018      	movs	r0, r3
 8004838:	46bd      	mov	sp, r7
 800483a:	b006      	add	sp, #24
 800483c:	bd80      	pop	{r7, pc}
 800483e:	46c0      	nop			; (mov r8, r8)
 8004840:	00008002 	.word	0x00008002
 8004844:	ffffbfff 	.word	0xffffbfff
 8004848:	08005ac7 	.word	0x08005ac7
 800484c:	ffff7fff 	.word	0xffff7fff
 8004850:	080049e1 	.word	0x080049e1

08004854 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2241      	movs	r2, #65	; 0x41
 8004860:	5c9b      	ldrb	r3, [r3, r2]
 8004862:	b2db      	uxtb	r3, r3
 8004864:	2b20      	cmp	r3, #32
 8004866:	d10f      	bne.n	8004888 <HAL_I2C_EnableListen_IT+0x34>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2241      	movs	r2, #65	; 0x41
 800486c:	2128      	movs	r1, #40	; 0x28
 800486e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a08      	ldr	r2, [pc, #32]	; (8004894 <HAL_I2C_EnableListen_IT+0x40>)
 8004874:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004876:	2380      	movs	r3, #128	; 0x80
 8004878:	021a      	lsls	r2, r3, #8
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	0011      	movs	r1, r2
 800487e:	0018      	movs	r0, r3
 8004880:	f001 fb34 	bl	8005eec <I2C_Enable_IRQ>

    return HAL_OK;
 8004884:	2300      	movs	r3, #0
 8004886:	e000      	b.n	800488a <HAL_I2C_EnableListen_IT+0x36>
  }
  else
  {
    return HAL_BUSY;
 8004888:	2302      	movs	r3, #2
  }
}
 800488a:	0018      	movs	r0, r3
 800488c:	46bd      	mov	sp, r7
 800488e:	b002      	add	sp, #8
 8004890:	bd80      	pop	{r7, pc}
 8004892:	46c0      	nop			; (mov r8, r8)
 8004894:	080049e1 	.word	0x080049e1

08004898 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d005      	beq.n	80048c4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	68f9      	ldr	r1, [r7, #12]
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	4798      	blx	r3
  }
}
 80048c4:	46c0      	nop			; (mov r8, r8)
 80048c6:	46bd      	mov	sp, r7
 80048c8:	b004      	add	sp, #16
 80048ca:	bd80      	pop	{r7, pc}

080048cc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	2380      	movs	r3, #128	; 0x80
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	4013      	ands	r3, r2
 80048ec:	d00e      	beq.n	800490c <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	2280      	movs	r2, #128	; 0x80
 80048f2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80048f4:	d00a      	beq.n	800490c <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fa:	2201      	movs	r2, #1
 80048fc:	431a      	orrs	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2280      	movs	r2, #128	; 0x80
 8004908:	0052      	lsls	r2, r2, #1
 800490a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	2380      	movs	r3, #128	; 0x80
 8004910:	00db      	lsls	r3, r3, #3
 8004912:	4013      	ands	r3, r2
 8004914:	d00e      	beq.n	8004934 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	2280      	movs	r2, #128	; 0x80
 800491a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800491c:	d00a      	beq.n	8004934 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004922:	2208      	movs	r2, #8
 8004924:	431a      	orrs	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2280      	movs	r2, #128	; 0x80
 8004930:	00d2      	lsls	r2, r2, #3
 8004932:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	2380      	movs	r3, #128	; 0x80
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4013      	ands	r3, r2
 800493c:	d00e      	beq.n	800495c <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	2280      	movs	r2, #128	; 0x80
 8004942:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004944:	d00a      	beq.n	800495c <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494a:	2202      	movs	r2, #2
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2280      	movs	r2, #128	; 0x80
 8004958:	0092      	lsls	r2, r2, #2
 800495a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004960:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	220b      	movs	r2, #11
 8004966:	4013      	ands	r3, r2
 8004968:	d005      	beq.n	8004976 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	0011      	movs	r1, r2
 8004970:	0018      	movs	r0, r3
 8004972:	f000 ff79 	bl	8005868 <I2C_ITError>
  }
}
 8004976:	46c0      	nop			; (mov r8, r8)
 8004978:	46bd      	mov	sp, r7
 800497a:	b006      	add	sp, #24
 800497c:	bd80      	pop	{r7, pc}

0800497e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b082      	sub	sp, #8
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004986:	46c0      	nop			; (mov r8, r8)
 8004988:	46bd      	mov	sp, r7
 800498a:	b002      	add	sp, #8
 800498c:	bd80      	pop	{r7, pc}

0800498e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b082      	sub	sp, #8
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004996:	46c0      	nop			; (mov r8, r8)
 8004998:	46bd      	mov	sp, r7
 800499a:	b002      	add	sp, #8
 800499c:	bd80      	pop	{r7, pc}

0800499e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b082      	sub	sp, #8
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80049a6:	46c0      	nop			; (mov r8, r8)
 80049a8:	46bd      	mov	sp, r7
 80049aa:	b002      	add	sp, #8
 80049ac:	bd80      	pop	{r7, pc}

080049ae <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b082      	sub	sp, #8
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80049b6:	46c0      	nop			; (mov r8, r8)
 80049b8:	46bd      	mov	sp, r7
 80049ba:	b002      	add	sp, #8
 80049bc:	bd80      	pop	{r7, pc}

080049be <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b082      	sub	sp, #8
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80049c6:	46c0      	nop			; (mov r8, r8)
 80049c8:	46bd      	mov	sp, r7
 80049ca:	b002      	add	sp, #8
 80049cc:	bd80      	pop	{r7, pc}

080049ce <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b082      	sub	sp, #8
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80049d6:	46c0      	nop			; (mov r8, r8)
 80049d8:	46bd      	mov	sp, r7
 80049da:	b002      	add	sp, #8
 80049dc:	bd80      	pop	{r7, pc}
	...

080049e0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2240      	movs	r2, #64	; 0x40
 80049fa:	5c9b      	ldrb	r3, [r3, r2]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d101      	bne.n	8004a04 <I2C_Slave_ISR_IT+0x24>
 8004a00:	2302      	movs	r3, #2
 8004a02:	e0e6      	b.n	8004bd2 <I2C_Slave_ISR_IT+0x1f2>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2240      	movs	r2, #64	; 0x40
 8004a08:	2101      	movs	r1, #1
 8004a0a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	4013      	ands	r3, r2
 8004a12:	d009      	beq.n	8004a28 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2220      	movs	r2, #32
 8004a18:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004a1a:	d005      	beq.n	8004a28 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	0011      	movs	r1, r2
 8004a22:	0018      	movs	r0, r3
 8004a24:	f000 fda6 	bl	8005574 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	2210      	movs	r2, #16
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	d052      	beq.n	8004ad6 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2210      	movs	r2, #16
 8004a34:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004a36:	d04e      	beq.n	8004ad6 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d12d      	bne.n	8004a9e <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2241      	movs	r2, #65	; 0x41
 8004a46:	5c9b      	ldrb	r3, [r3, r2]
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b28      	cmp	r3, #40	; 0x28
 8004a4c:	d10b      	bne.n	8004a66 <I2C_Slave_ISR_IT+0x86>
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	2380      	movs	r3, #128	; 0x80
 8004a52:	049b      	lsls	r3, r3, #18
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d106      	bne.n	8004a66 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	0011      	movs	r1, r2
 8004a5e:	0018      	movs	r0, r3
 8004a60:	f000 feaa 	bl	80057b8 <I2C_ITListenCplt>
 8004a64:	e036      	b.n	8004ad4 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2241      	movs	r2, #65	; 0x41
 8004a6a:	5c9b      	ldrb	r3, [r3, r2]
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b29      	cmp	r3, #41	; 0x29
 8004a70:	d110      	bne.n	8004a94 <I2C_Slave_ISR_IT+0xb4>
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	4a59      	ldr	r2, [pc, #356]	; (8004bdc <I2C_Slave_ISR_IT+0x1fc>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d00c      	beq.n	8004a94 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2210      	movs	r2, #16
 8004a80:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	0018      	movs	r0, r3
 8004a86:	f000 fffc 	bl	8005a82 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	f000 fc39 	bl	8005304 <I2C_ITSlaveSeqCplt>
 8004a92:	e01f      	b.n	8004ad4 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2210      	movs	r2, #16
 8004a9a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004a9c:	e091      	b.n	8004bc2 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2210      	movs	r2, #16
 8004aa4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aaa:	2204      	movs	r2, #4
 8004aac:	431a      	orrs	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d005      	beq.n	8004ac4 <I2C_Slave_ISR_IT+0xe4>
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	2380      	movs	r3, #128	; 0x80
 8004abc:	045b      	lsls	r3, r3, #17
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d000      	beq.n	8004ac4 <I2C_Slave_ISR_IT+0xe4>
 8004ac2:	e07e      	b.n	8004bc2 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	0011      	movs	r1, r2
 8004acc:	0018      	movs	r0, r3
 8004ace:	f000 fecb 	bl	8005868 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004ad2:	e076      	b.n	8004bc2 <I2C_Slave_ISR_IT+0x1e2>
 8004ad4:	e075      	b.n	8004bc2 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	2204      	movs	r2, #4
 8004ada:	4013      	ands	r3, r2
 8004adc:	d02f      	beq.n	8004b3e <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2204      	movs	r2, #4
 8004ae2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004ae4:	d02b      	beq.n	8004b3e <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d018      	beq.n	8004b22 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	1c5a      	adds	r2, r3, #1
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d14c      	bne.n	8004bc6 <I2C_Slave_ISR_IT+0x1e6>
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	4a2b      	ldr	r2, [pc, #172]	; (8004bdc <I2C_Slave_ISR_IT+0x1fc>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d048      	beq.n	8004bc6 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	0018      	movs	r0, r3
 8004b38:	f000 fbe4 	bl	8005304 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004b3c:	e043      	b.n	8004bc6 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	2208      	movs	r2, #8
 8004b42:	4013      	ands	r3, r2
 8004b44:	d00a      	beq.n	8004b5c <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2208      	movs	r2, #8
 8004b4a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004b4c:	d006      	beq.n	8004b5c <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	0011      	movs	r1, r2
 8004b54:	0018      	movs	r0, r3
 8004b56:	f000 faeb 	bl	8005130 <I2C_ITAddrCplt>
 8004b5a:	e035      	b.n	8004bc8 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	2202      	movs	r2, #2
 8004b60:	4013      	ands	r3, r2
 8004b62:	d031      	beq.n	8004bc8 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2202      	movs	r2, #2
 8004b68:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004b6a:	d02d      	beq.n	8004bc8 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d018      	beq.n	8004ba8 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	781a      	ldrb	r2, [r3, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	3b01      	subs	r3, #1
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	851a      	strh	r2, [r3, #40]	; 0x28
 8004ba6:	e00f      	b.n	8004bc8 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	2380      	movs	r3, #128	; 0x80
 8004bac:	045b      	lsls	r3, r3, #17
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d002      	beq.n	8004bb8 <I2C_Slave_ISR_IT+0x1d8>
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d107      	bne.n	8004bc8 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	0018      	movs	r0, r3
 8004bbc:	f000 fba2 	bl	8005304 <I2C_ITSlaveSeqCplt>
 8004bc0:	e002      	b.n	8004bc8 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8004bc2:	46c0      	nop			; (mov r8, r8)
 8004bc4:	e000      	b.n	8004bc8 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8004bc6:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2240      	movs	r2, #64	; 0x40
 8004bcc:	2100      	movs	r1, #0
 8004bce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	b006      	add	sp, #24
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	46c0      	nop			; (mov r8, r8)
 8004bdc:	ffff0000 	.word	0xffff0000

08004be0 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8004be0:	b590      	push	{r4, r7, lr}
 8004be2:	b089      	sub	sp, #36	; 0x24
 8004be4:	af02      	add	r7, sp, #8
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2240      	movs	r2, #64	; 0x40
 8004bf0:	5c9b      	ldrb	r3, [r3, r2]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d101      	bne.n	8004bfa <I2C_Master_ISR_DMA+0x1a>
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	e0e7      	b.n	8004dca <I2C_Master_ISR_DMA+0x1ea>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2240      	movs	r2, #64	; 0x40
 8004bfe:	2101      	movs	r1, #1
 8004c00:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	2210      	movs	r2, #16
 8004c06:	4013      	ands	r3, r2
 8004c08:	d017      	beq.n	8004c3a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2210      	movs	r2, #16
 8004c0e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004c10:	d013      	beq.n	8004c3a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2210      	movs	r2, #16
 8004c18:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1e:	2204      	movs	r2, #4
 8004c20:	431a      	orrs	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2120      	movs	r1, #32
 8004c2a:	0018      	movs	r0, r3
 8004c2c:	f001 f95e 	bl	8005eec <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	0018      	movs	r0, r3
 8004c34:	f000 ff25 	bl	8005a82 <I2C_Flush_TXDR>
 8004c38:	e0c2      	b.n	8004dc0 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	2280      	movs	r2, #128	; 0x80
 8004c3e:	4013      	ands	r3, r2
 8004c40:	d100      	bne.n	8004c44 <I2C_Master_ISR_DMA+0x64>
 8004c42:	e07c      	b.n	8004d3e <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2240      	movs	r2, #64	; 0x40
 8004c48:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004c4a:	d100      	bne.n	8004c4e <I2C_Master_ISR_DMA+0x6e>
 8004c4c:	e077      	b.n	8004d3e <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2140      	movs	r1, #64	; 0x40
 8004c5a:	438a      	bics	r2, r1
 8004c5c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d055      	beq.n	8004d14 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	2312      	movs	r3, #18
 8004c72:	18fb      	adds	r3, r7, r3
 8004c74:	0592      	lsls	r2, r2, #22
 8004c76:	0d92      	lsrs	r2, r2, #22
 8004c78:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	2bff      	cmp	r3, #255	; 0xff
 8004c82:	d906      	bls.n	8004c92 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	22ff      	movs	r2, #255	; 0xff
 8004c88:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8004c8a:	2380      	movs	r3, #128	; 0x80
 8004c8c:	045b      	lsls	r3, r3, #17
 8004c8e:	617b      	str	r3, [r7, #20]
 8004c90:	e010      	b.n	8004cb4 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca0:	4a4c      	ldr	r2, [pc, #304]	; (8004dd4 <I2C_Master_ISR_DMA+0x1f4>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d003      	beq.n	8004cae <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004caa:	617b      	str	r3, [r7, #20]
 8004cac:	e002      	b.n	8004cb4 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004cae:	2380      	movs	r3, #128	; 0x80
 8004cb0:	049b      	lsls	r3, r3, #18
 8004cb2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	697c      	ldr	r4, [r7, #20]
 8004cbc:	2312      	movs	r3, #18
 8004cbe:	18fb      	adds	r3, r7, r3
 8004cc0:	8819      	ldrh	r1, [r3, #0]
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	0023      	movs	r3, r4
 8004cca:	f001 f8d5 	bl	8005e78 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2241      	movs	r2, #65	; 0x41
 8004ce4:	5c9b      	ldrb	r3, [r3, r2]
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b22      	cmp	r3, #34	; 0x22
 8004cea:	d109      	bne.n	8004d00 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2180      	movs	r1, #128	; 0x80
 8004cf8:	0209      	lsls	r1, r1, #8
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004cfe:	e05f      	b.n	8004dc0 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2180      	movs	r1, #128	; 0x80
 8004d0c:	01c9      	lsls	r1, r1, #7
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004d12:	e055      	b.n	8004dc0 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685a      	ldr	r2, [r3, #4]
 8004d1a:	2380      	movs	r3, #128	; 0x80
 8004d1c:	049b      	lsls	r3, r3, #18
 8004d1e:	401a      	ands	r2, r3
 8004d20:	2380      	movs	r3, #128	; 0x80
 8004d22:	049b      	lsls	r3, r3, #18
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d004      	beq.n	8004d32 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	0018      	movs	r0, r3
 8004d2c:	f000 faa7 	bl	800527e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004d30:	e046      	b.n	8004dc0 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2140      	movs	r1, #64	; 0x40
 8004d36:	0018      	movs	r0, r3
 8004d38:	f000 fd96 	bl	8005868 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004d3c:	e040      	b.n	8004dc0 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	2240      	movs	r2, #64	; 0x40
 8004d42:	4013      	ands	r3, r2
 8004d44:	d02c      	beq.n	8004da0 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2240      	movs	r2, #64	; 0x40
 8004d4a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004d4c:	d028      	beq.n	8004da0 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d11d      	bne.n	8004d94 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	2380      	movs	r3, #128	; 0x80
 8004d60:	049b      	lsls	r3, r3, #18
 8004d62:	401a      	ands	r2, r3
 8004d64:	2380      	movs	r3, #128	; 0x80
 8004d66:	049b      	lsls	r3, r3, #18
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d028      	beq.n	8004dbe <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d70:	4a18      	ldr	r2, [pc, #96]	; (8004dd4 <I2C_Master_ISR_DMA+0x1f4>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d109      	bne.n	8004d8a <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2180      	movs	r1, #128	; 0x80
 8004d82:	01c9      	lsls	r1, r1, #7
 8004d84:	430a      	orrs	r2, r1
 8004d86:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004d88:	e019      	b.n	8004dbe <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	f000 fa76 	bl	800527e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004d92:	e014      	b.n	8004dbe <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2140      	movs	r1, #64	; 0x40
 8004d98:	0018      	movs	r0, r3
 8004d9a:	f000 fd65 	bl	8005868 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004d9e:	e00e      	b.n	8004dbe <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2220      	movs	r2, #32
 8004da4:	4013      	ands	r3, r2
 8004da6:	d00b      	beq.n	8004dc0 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2220      	movs	r2, #32
 8004dac:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004dae:	d007      	beq.n	8004dc0 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	0011      	movs	r1, r2
 8004db6:	0018      	movs	r0, r3
 8004db8:	f000 fb0a 	bl	80053d0 <I2C_ITMasterCplt>
 8004dbc:	e000      	b.n	8004dc0 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8004dbe:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2240      	movs	r2, #64	; 0x40
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	0018      	movs	r0, r3
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	b007      	add	sp, #28
 8004dd0:	bd90      	pop	{r4, r7, pc}
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	ffff0000 	.word	0xffff0000

08004dd8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b088      	sub	sp, #32
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2240      	movs	r2, #64	; 0x40
 8004df2:	5c9b      	ldrb	r3, [r3, r2]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d101      	bne.n	8004dfc <I2C_Slave_ISR_DMA+0x24>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	e0cd      	b.n	8004f98 <I2C_Slave_ISR_DMA+0x1c0>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2240      	movs	r2, #64	; 0x40
 8004e00:	2101      	movs	r1, #1
 8004e02:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	2220      	movs	r2, #32
 8004e08:	4013      	ands	r3, r2
 8004e0a:	d009      	beq.n	8004e20 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004e12:	d005      	beq.n	8004e20 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	0011      	movs	r1, r2
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	f000 fbaa 	bl	8005574 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	2210      	movs	r2, #16
 8004e24:	4013      	ands	r3, r2
 8004e26:	d100      	bne.n	8004e2a <I2C_Slave_ISR_DMA+0x52>
 8004e28:	e0a3      	b.n	8004f72 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2210      	movs	r2, #16
 8004e2e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004e30:	d100      	bne.n	8004e34 <I2C_Slave_ISR_DMA+0x5c>
 8004e32:	e09e      	b.n	8004f72 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	2380      	movs	r3, #128	; 0x80
 8004e38:	01db      	lsls	r3, r3, #7
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	d105      	bne.n	8004e4a <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	2380      	movs	r3, #128	; 0x80
 8004e42:	021b      	lsls	r3, r3, #8
 8004e44:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004e46:	d100      	bne.n	8004e4a <I2C_Slave_ISR_DMA+0x72>
 8004e48:	e08c      	b.n	8004f64 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00c      	beq.n	8004e6c <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	2380      	movs	r3, #128	; 0x80
 8004e56:	021b      	lsls	r3, r3, #8
 8004e58:	4013      	ands	r3, r2
 8004e5a:	d007      	beq.n	8004e6c <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d101      	bne.n	8004e6c <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00c      	beq.n	8004e8e <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	2380      	movs	r3, #128	; 0x80
 8004e78:	01db      	lsls	r3, r3, #7
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	d007      	beq.n	8004e8e <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d12d      	bne.n	8004ef0 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2241      	movs	r2, #65	; 0x41
 8004e98:	5c9b      	ldrb	r3, [r3, r2]
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b28      	cmp	r3, #40	; 0x28
 8004e9e:	d10b      	bne.n	8004eb8 <I2C_Slave_ISR_DMA+0xe0>
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	2380      	movs	r3, #128	; 0x80
 8004ea4:	049b      	lsls	r3, r3, #18
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d106      	bne.n	8004eb8 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	0011      	movs	r1, r2
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	f000 fc81 	bl	80057b8 <I2C_ITListenCplt>
 8004eb6:	e054      	b.n	8004f62 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2241      	movs	r2, #65	; 0x41
 8004ebc:	5c9b      	ldrb	r3, [r3, r2]
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2b29      	cmp	r3, #41	; 0x29
 8004ec2:	d110      	bne.n	8004ee6 <I2C_Slave_ISR_DMA+0x10e>
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	4a36      	ldr	r2, [pc, #216]	; (8004fa0 <I2C_Slave_ISR_DMA+0x1c8>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d00c      	beq.n	8004ee6 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2210      	movs	r2, #16
 8004ed2:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	0018      	movs	r0, r3
 8004ed8:	f000 fdd3 	bl	8005a82 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	0018      	movs	r0, r3
 8004ee0:	f000 fa10 	bl	8005304 <I2C_ITSlaveSeqCplt>
 8004ee4:	e03d      	b.n	8004f62 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2210      	movs	r2, #16
 8004eec:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004eee:	e03e      	b.n	8004f6e <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2210      	movs	r2, #16
 8004ef6:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efc:	2204      	movs	r2, #4
 8004efe:	431a      	orrs	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004f04:	2317      	movs	r3, #23
 8004f06:	18fb      	adds	r3, r7, r3
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	2141      	movs	r1, #65	; 0x41
 8004f0c:	5c52      	ldrb	r2, [r2, r1]
 8004f0e:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d004      	beq.n	8004f20 <I2C_Slave_ISR_DMA+0x148>
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	2380      	movs	r3, #128	; 0x80
 8004f1a:	045b      	lsls	r3, r3, #17
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d126      	bne.n	8004f6e <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004f20:	2217      	movs	r2, #23
 8004f22:	18bb      	adds	r3, r7, r2
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	2b21      	cmp	r3, #33	; 0x21
 8004f28:	d003      	beq.n	8004f32 <I2C_Slave_ISR_DMA+0x15a>
 8004f2a:	18bb      	adds	r3, r7, r2
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b29      	cmp	r3, #41	; 0x29
 8004f30:	d103      	bne.n	8004f3a <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2221      	movs	r2, #33	; 0x21
 8004f36:	631a      	str	r2, [r3, #48]	; 0x30
 8004f38:	e00b      	b.n	8004f52 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004f3a:	2217      	movs	r2, #23
 8004f3c:	18bb      	adds	r3, r7, r2
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	2b22      	cmp	r3, #34	; 0x22
 8004f42:	d003      	beq.n	8004f4c <I2C_Slave_ISR_DMA+0x174>
 8004f44:	18bb      	adds	r3, r7, r2
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	2b2a      	cmp	r3, #42	; 0x2a
 8004f4a:	d102      	bne.n	8004f52 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2222      	movs	r2, #34	; 0x22
 8004f50:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	0011      	movs	r1, r2
 8004f5a:	0018      	movs	r0, r3
 8004f5c:	f000 fc84 	bl	8005868 <I2C_ITError>
      if (treatdmanack == 1U)
 8004f60:	e005      	b.n	8004f6e <I2C_Slave_ISR_DMA+0x196>
 8004f62:	e004      	b.n	8004f6e <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2210      	movs	r2, #16
 8004f6a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004f6c:	e00f      	b.n	8004f8e <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8004f6e:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004f70:	e00d      	b.n	8004f8e <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	2208      	movs	r2, #8
 8004f76:	4013      	ands	r3, r2
 8004f78:	d009      	beq.n	8004f8e <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2208      	movs	r2, #8
 8004f7e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004f80:	d005      	beq.n	8004f8e <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	0011      	movs	r1, r2
 8004f88:	0018      	movs	r0, r3
 8004f8a:	f000 f8d1 	bl	8005130 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2240      	movs	r2, #64	; 0x40
 8004f92:	2100      	movs	r1, #0
 8004f94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	0018      	movs	r0, r3
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	b008      	add	sp, #32
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	ffff0000 	.word	0xffff0000

08004fa4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004fa4:	b5b0      	push	{r4, r5, r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af02      	add	r7, sp, #8
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	000c      	movs	r4, r1
 8004fae:	0010      	movs	r0, r2
 8004fb0:	0019      	movs	r1, r3
 8004fb2:	250a      	movs	r5, #10
 8004fb4:	197b      	adds	r3, r7, r5
 8004fb6:	1c22      	adds	r2, r4, #0
 8004fb8:	801a      	strh	r2, [r3, #0]
 8004fba:	2308      	movs	r3, #8
 8004fbc:	18fb      	adds	r3, r7, r3
 8004fbe:	1c02      	adds	r2, r0, #0
 8004fc0:	801a      	strh	r2, [r3, #0]
 8004fc2:	1dbb      	adds	r3, r7, #6
 8004fc4:	1c0a      	adds	r2, r1, #0
 8004fc6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004fc8:	1dbb      	adds	r3, r7, #6
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	2380      	movs	r3, #128	; 0x80
 8004fd0:	045c      	lsls	r4, r3, #17
 8004fd2:	197b      	adds	r3, r7, r5
 8004fd4:	8819      	ldrh	r1, [r3, #0]
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	4b23      	ldr	r3, [pc, #140]	; (8005068 <I2C_RequestMemoryWrite+0xc4>)
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	0023      	movs	r3, r4
 8004fde:	f000 ff4b 	bl	8005e78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe4:	6a39      	ldr	r1, [r7, #32]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	0018      	movs	r0, r3
 8004fea:	f000 fdca 	bl	8005b82 <I2C_WaitOnTXISFlagUntilTimeout>
 8004fee:	1e03      	subs	r3, r0, #0
 8004ff0:	d001      	beq.n	8004ff6 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e033      	b.n	800505e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ff6:	1dbb      	adds	r3, r7, #6
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d107      	bne.n	800500e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ffe:	2308      	movs	r3, #8
 8005000:	18fb      	adds	r3, r7, r3
 8005002:	881b      	ldrh	r3, [r3, #0]
 8005004:	b2da      	uxtb	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	629a      	str	r2, [r3, #40]	; 0x28
 800500c:	e019      	b.n	8005042 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800500e:	2308      	movs	r3, #8
 8005010:	18fb      	adds	r3, r7, r3
 8005012:	881b      	ldrh	r3, [r3, #0]
 8005014:	0a1b      	lsrs	r3, r3, #8
 8005016:	b29b      	uxth	r3, r3
 8005018:	b2da      	uxtb	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005022:	6a39      	ldr	r1, [r7, #32]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	0018      	movs	r0, r3
 8005028:	f000 fdab 	bl	8005b82 <I2C_WaitOnTXISFlagUntilTimeout>
 800502c:	1e03      	subs	r3, r0, #0
 800502e:	d001      	beq.n	8005034 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e014      	b.n	800505e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005034:	2308      	movs	r3, #8
 8005036:	18fb      	adds	r3, r7, r3
 8005038:	881b      	ldrh	r3, [r3, #0]
 800503a:	b2da      	uxtb	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005042:	6a3a      	ldr	r2, [r7, #32]
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	0013      	movs	r3, r2
 800504c:	2200      	movs	r2, #0
 800504e:	2180      	movs	r1, #128	; 0x80
 8005050:	f000 fd58 	bl	8005b04 <I2C_WaitOnFlagUntilTimeout>
 8005054:	1e03      	subs	r3, r0, #0
 8005056:	d001      	beq.n	800505c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e000      	b.n	800505e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	0018      	movs	r0, r3
 8005060:	46bd      	mov	sp, r7
 8005062:	b004      	add	sp, #16
 8005064:	bdb0      	pop	{r4, r5, r7, pc}
 8005066:	46c0      	nop			; (mov r8, r8)
 8005068:	80002000 	.word	0x80002000

0800506c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800506c:	b5b0      	push	{r4, r5, r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af02      	add	r7, sp, #8
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	000c      	movs	r4, r1
 8005076:	0010      	movs	r0, r2
 8005078:	0019      	movs	r1, r3
 800507a:	250a      	movs	r5, #10
 800507c:	197b      	adds	r3, r7, r5
 800507e:	1c22      	adds	r2, r4, #0
 8005080:	801a      	strh	r2, [r3, #0]
 8005082:	2308      	movs	r3, #8
 8005084:	18fb      	adds	r3, r7, r3
 8005086:	1c02      	adds	r2, r0, #0
 8005088:	801a      	strh	r2, [r3, #0]
 800508a:	1dbb      	adds	r3, r7, #6
 800508c:	1c0a      	adds	r2, r1, #0
 800508e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005090:	1dbb      	adds	r3, r7, #6
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	b2da      	uxtb	r2, r3
 8005096:	197b      	adds	r3, r7, r5
 8005098:	8819      	ldrh	r1, [r3, #0]
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	4b23      	ldr	r3, [pc, #140]	; (800512c <I2C_RequestMemoryRead+0xc0>)
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	2300      	movs	r3, #0
 80050a2:	f000 fee9 	bl	8005e78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a8:	6a39      	ldr	r1, [r7, #32]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	0018      	movs	r0, r3
 80050ae:	f000 fd68 	bl	8005b82 <I2C_WaitOnTXISFlagUntilTimeout>
 80050b2:	1e03      	subs	r3, r0, #0
 80050b4:	d001      	beq.n	80050ba <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e033      	b.n	8005122 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050ba:	1dbb      	adds	r3, r7, #6
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d107      	bne.n	80050d2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050c2:	2308      	movs	r3, #8
 80050c4:	18fb      	adds	r3, r7, r3
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	b2da      	uxtb	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	629a      	str	r2, [r3, #40]	; 0x28
 80050d0:	e019      	b.n	8005106 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80050d2:	2308      	movs	r3, #8
 80050d4:	18fb      	adds	r3, r7, r3
 80050d6:	881b      	ldrh	r3, [r3, #0]
 80050d8:	0a1b      	lsrs	r3, r3, #8
 80050da:	b29b      	uxth	r3, r3
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e6:	6a39      	ldr	r1, [r7, #32]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	0018      	movs	r0, r3
 80050ec:	f000 fd49 	bl	8005b82 <I2C_WaitOnTXISFlagUntilTimeout>
 80050f0:	1e03      	subs	r3, r0, #0
 80050f2:	d001      	beq.n	80050f8 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e014      	b.n	8005122 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050f8:	2308      	movs	r3, #8
 80050fa:	18fb      	adds	r3, r7, r3
 80050fc:	881b      	ldrh	r3, [r3, #0]
 80050fe:	b2da      	uxtb	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005106:	6a3a      	ldr	r2, [r7, #32]
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	0013      	movs	r3, r2
 8005110:	2200      	movs	r2, #0
 8005112:	2140      	movs	r1, #64	; 0x40
 8005114:	f000 fcf6 	bl	8005b04 <I2C_WaitOnFlagUntilTimeout>
 8005118:	1e03      	subs	r3, r0, #0
 800511a:	d001      	beq.n	8005120 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e000      	b.n	8005122 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	0018      	movs	r0, r3
 8005124:	46bd      	mov	sp, r7
 8005126:	b004      	add	sp, #16
 8005128:	bdb0      	pop	{r4, r5, r7, pc}
 800512a:	46c0      	nop			; (mov r8, r8)
 800512c:	80002000 	.word	0x80002000

08005130 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005130:	b5b0      	push	{r4, r5, r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2241      	movs	r2, #65	; 0x41
 800513e:	5c9b      	ldrb	r3, [r3, r2]
 8005140:	b2db      	uxtb	r3, r3
 8005142:	001a      	movs	r2, r3
 8005144:	2328      	movs	r3, #40	; 0x28
 8005146:	4013      	ands	r3, r2
 8005148:	2b28      	cmp	r3, #40	; 0x28
 800514a:	d000      	beq.n	800514e <I2C_ITAddrCplt+0x1e>
 800514c:	e08b      	b.n	8005266 <I2C_ITAddrCplt+0x136>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	0c1b      	lsrs	r3, r3, #16
 8005156:	b2da      	uxtb	r2, r3
 8005158:	250f      	movs	r5, #15
 800515a:	197b      	adds	r3, r7, r5
 800515c:	2101      	movs	r1, #1
 800515e:	400a      	ands	r2, r1
 8005160:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	0c1b      	lsrs	r3, r3, #16
 800516a:	b29a      	uxth	r2, r3
 800516c:	200c      	movs	r0, #12
 800516e:	183b      	adds	r3, r7, r0
 8005170:	21fe      	movs	r1, #254	; 0xfe
 8005172:	400a      	ands	r2, r1
 8005174:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	b29a      	uxth	r2, r3
 800517e:	240a      	movs	r4, #10
 8005180:	193b      	adds	r3, r7, r4
 8005182:	0592      	lsls	r2, r2, #22
 8005184:	0d92      	lsrs	r2, r2, #22
 8005186:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	b29a      	uxth	r2, r3
 8005190:	2308      	movs	r3, #8
 8005192:	18fb      	adds	r3, r7, r3
 8005194:	21fe      	movs	r1, #254	; 0xfe
 8005196:	400a      	ands	r2, r1
 8005198:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d14a      	bne.n	8005238 <I2C_ITAddrCplt+0x108>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80051a2:	0021      	movs	r1, r4
 80051a4:	187b      	adds	r3, r7, r1
 80051a6:	881b      	ldrh	r3, [r3, #0]
 80051a8:	09db      	lsrs	r3, r3, #7
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	183b      	adds	r3, r7, r0
 80051ae:	881b      	ldrh	r3, [r3, #0]
 80051b0:	4053      	eors	r3, r2
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	001a      	movs	r2, r3
 80051b6:	2306      	movs	r3, #6
 80051b8:	4013      	ands	r3, r2
 80051ba:	d121      	bne.n	8005200 <I2C_ITAddrCplt+0xd0>
      {
        slaveaddrcode = ownadd1code;
 80051bc:	183b      	adds	r3, r7, r0
 80051be:	187a      	adds	r2, r7, r1
 80051c0:	8812      	ldrh	r2, [r2, #0]
 80051c2:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051c8:	1c5a      	adds	r2, r3, #1
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d14f      	bne.n	8005276 <I2C_ITAddrCplt+0x146>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2208      	movs	r2, #8
 80051e2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2240      	movs	r2, #64	; 0x40
 80051e8:	2100      	movs	r1, #0
 80051ea:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051f0:	183a      	adds	r2, r7, r0
 80051f2:	8814      	ldrh	r4, [r2, #0]
 80051f4:	197a      	adds	r2, r7, r5
 80051f6:	7811      	ldrb	r1, [r2, #0]
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	0022      	movs	r2, r4
 80051fc:	4798      	blx	r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80051fe:	e03a      	b.n	8005276 <I2C_ITAddrCplt+0x146>
        slaveaddrcode = ownadd2code;
 8005200:	240c      	movs	r4, #12
 8005202:	193b      	adds	r3, r7, r4
 8005204:	2208      	movs	r2, #8
 8005206:	18ba      	adds	r2, r7, r2
 8005208:	8812      	ldrh	r2, [r2, #0]
 800520a:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800520c:	2380      	movs	r3, #128	; 0x80
 800520e:	021a      	lsls	r2, r3, #8
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	0011      	movs	r1, r2
 8005214:	0018      	movs	r0, r3
 8005216:	f000 fed9 	bl	8005fcc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2240      	movs	r2, #64	; 0x40
 800521e:	2100      	movs	r1, #0
 8005220:	5499      	strb	r1, [r3, r2]
        hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005226:	193a      	adds	r2, r7, r4
 8005228:	8814      	ldrh	r4, [r2, #0]
 800522a:	220f      	movs	r2, #15
 800522c:	18ba      	adds	r2, r7, r2
 800522e:	7811      	ldrb	r1, [r2, #0]
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	0022      	movs	r2, r4
 8005234:	4798      	blx	r3
}
 8005236:	e01e      	b.n	8005276 <I2C_ITAddrCplt+0x146>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005238:	2380      	movs	r3, #128	; 0x80
 800523a:	021a      	lsls	r2, r3, #8
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	0011      	movs	r1, r2
 8005240:	0018      	movs	r0, r3
 8005242:	f000 fec3 	bl	8005fcc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2240      	movs	r2, #64	; 0x40
 800524a:	2100      	movs	r1, #0
 800524c:	5499      	strb	r1, [r3, r2]
      hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005252:	220c      	movs	r2, #12
 8005254:	18ba      	adds	r2, r7, r2
 8005256:	8814      	ldrh	r4, [r2, #0]
 8005258:	220f      	movs	r2, #15
 800525a:	18ba      	adds	r2, r7, r2
 800525c:	7811      	ldrb	r1, [r2, #0]
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	0022      	movs	r2, r4
 8005262:	4798      	blx	r3
}
 8005264:	e007      	b.n	8005276 <I2C_ITAddrCplt+0x146>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2208      	movs	r2, #8
 800526c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2240      	movs	r2, #64	; 0x40
 8005272:	2100      	movs	r1, #0
 8005274:	5499      	strb	r1, [r3, r2]
}
 8005276:	46c0      	nop			; (mov r8, r8)
 8005278:	46bd      	mov	sp, r7
 800527a:	b004      	add	sp, #16
 800527c:	bdb0      	pop	{r4, r5, r7, pc}

0800527e <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b082      	sub	sp, #8
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2242      	movs	r2, #66	; 0x42
 800528a:	2100      	movs	r1, #0
 800528c:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2241      	movs	r2, #65	; 0x41
 8005292:	5c9b      	ldrb	r3, [r3, r2]
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b21      	cmp	r3, #33	; 0x21
 8005298:	d118      	bne.n	80052cc <I2C_ITMasterSeqCplt+0x4e>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2241      	movs	r2, #65	; 0x41
 800529e:	2120      	movs	r1, #32
 80052a0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2211      	movs	r2, #17
 80052a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2101      	movs	r1, #1
 80052b2:	0018      	movs	r0, r3
 80052b4:	f000 fe8a 	bl	8005fcc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2240      	movs	r2, #64	; 0x40
 80052bc:	2100      	movs	r1, #0
 80052be:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	0010      	movs	r0, r2
 80052c8:	4798      	blx	r3
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80052ca:	e017      	b.n	80052fc <I2C_ITMasterSeqCplt+0x7e>
    hi2c->State         = HAL_I2C_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2241      	movs	r2, #65	; 0x41
 80052d0:	2120      	movs	r1, #32
 80052d2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2212      	movs	r2, #18
 80052d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2102      	movs	r1, #2
 80052e4:	0018      	movs	r0, r3
 80052e6:	f000 fe71 	bl	8005fcc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2240      	movs	r2, #64	; 0x40
 80052ee:	2100      	movs	r1, #0
 80052f0:	5499      	strb	r1, [r3, r2]
    hi2c->MasterRxCpltCallback(hi2c);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	0010      	movs	r0, r2
 80052fa:	4798      	blx	r3
}
 80052fc:	46c0      	nop			; (mov r8, r8)
 80052fe:	46bd      	mov	sp, r7
 8005300:	b002      	add	sp, #8
 8005302:	bd80      	pop	{r7, pc}

08005304 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2242      	movs	r2, #66	; 0x42
 8005318:	2100      	movs	r1, #0
 800531a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	2380      	movs	r3, #128	; 0x80
 8005320:	01db      	lsls	r3, r3, #7
 8005322:	4013      	ands	r3, r2
 8005324:	d008      	beq.n	8005338 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4925      	ldr	r1, [pc, #148]	; (80053c8 <I2C_ITSlaveSeqCplt+0xc4>)
 8005332:	400a      	ands	r2, r1
 8005334:	601a      	str	r2, [r3, #0]
 8005336:	e00c      	b.n	8005352 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	2380      	movs	r3, #128	; 0x80
 800533c:	021b      	lsls	r3, r3, #8
 800533e:	4013      	ands	r3, r2
 8005340:	d007      	beq.n	8005352 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	491f      	ldr	r1, [pc, #124]	; (80053cc <I2C_ITSlaveSeqCplt+0xc8>)
 800534e:	400a      	ands	r2, r1
 8005350:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2241      	movs	r2, #65	; 0x41
 8005356:	5c9b      	ldrb	r3, [r3, r2]
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b29      	cmp	r3, #41	; 0x29
 800535c:	d115      	bne.n	800538a <I2C_ITSlaveSeqCplt+0x86>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2241      	movs	r2, #65	; 0x41
 8005362:	2128      	movs	r1, #40	; 0x28
 8005364:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2221      	movs	r2, #33	; 0x21
 800536a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2101      	movs	r1, #1
 8005370:	0018      	movs	r0, r3
 8005372:	f000 fe2b 	bl	8005fcc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2240      	movs	r2, #64	; 0x40
 800537a:	2100      	movs	r1, #0
 800537c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	0010      	movs	r0, r2
 8005386:	4798      	blx	r3
  }
  else
  {
    /* Nothing to do */
  }
}
 8005388:	e01a      	b.n	80053c0 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2241      	movs	r2, #65	; 0x41
 800538e:	5c9b      	ldrb	r3, [r3, r2]
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b2a      	cmp	r3, #42	; 0x2a
 8005394:	d114      	bne.n	80053c0 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2241      	movs	r2, #65	; 0x41
 800539a:	2128      	movs	r1, #40	; 0x28
 800539c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2222      	movs	r2, #34	; 0x22
 80053a2:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2102      	movs	r1, #2
 80053a8:	0018      	movs	r0, r3
 80053aa:	f000 fe0f 	bl	8005fcc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2240      	movs	r2, #64	; 0x40
 80053b2:	2100      	movs	r1, #0
 80053b4:	5499      	strb	r1, [r3, r2]
    hi2c->SlaveRxCpltCallback(hi2c);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	0010      	movs	r0, r2
 80053be:	4798      	blx	r3
}
 80053c0:	46c0      	nop			; (mov r8, r8)
 80053c2:	46bd      	mov	sp, r7
 80053c4:	b004      	add	sp, #16
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	ffffbfff 	.word	0xffffbfff
 80053cc:	ffff7fff 	.word	0xffff7fff

080053d0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2220      	movs	r2, #32
 80053e4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2241      	movs	r2, #65	; 0x41
 80053ea:	5c9b      	ldrb	r3, [r3, r2]
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b21      	cmp	r3, #33	; 0x21
 80053f0:	d108      	bne.n	8005404 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2101      	movs	r1, #1
 80053f6:	0018      	movs	r0, r3
 80053f8:	f000 fde8 	bl	8005fcc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2211      	movs	r2, #17
 8005400:	631a      	str	r2, [r3, #48]	; 0x30
 8005402:	e00d      	b.n	8005420 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2241      	movs	r2, #65	; 0x41
 8005408:	5c9b      	ldrb	r3, [r3, r2]
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b22      	cmp	r3, #34	; 0x22
 800540e:	d107      	bne.n	8005420 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2102      	movs	r1, #2
 8005414:	0018      	movs	r0, r3
 8005416:	f000 fdd9 	bl	8005fcc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2212      	movs	r2, #18
 800541e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4950      	ldr	r1, [pc, #320]	; (800556c <I2C_ITMasterCplt+0x19c>)
 800542c:	400a      	ands	r2, r1
 800542e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a4d      	ldr	r2, [pc, #308]	; (8005570 <I2C_ITMasterCplt+0x1a0>)
 800543a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	2210      	movs	r2, #16
 8005440:	4013      	ands	r3, r2
 8005442:	d009      	beq.n	8005458 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2210      	movs	r2, #16
 800544a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005450:	2204      	movs	r2, #4
 8005452:	431a      	orrs	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2241      	movs	r2, #65	; 0x41
 800545c:	5c9b      	ldrb	r3, [r3, r2]
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b60      	cmp	r3, #96	; 0x60
 8005462:	d109      	bne.n	8005478 <I2C_ITMasterCplt+0xa8>
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	2204      	movs	r2, #4
 8005468:	4013      	ands	r3, r2
 800546a:	d005      	beq.n	8005478 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005472:	b2db      	uxtb	r3, r3
 8005474:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8005476:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	0018      	movs	r0, r3
 800547c:	f000 fb01 	bl	8005a82 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005484:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2241      	movs	r2, #65	; 0x41
 800548a:	5c9b      	ldrb	r3, [r3, r2]
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b60      	cmp	r3, #96	; 0x60
 8005490:	d002      	beq.n	8005498 <I2C_ITMasterCplt+0xc8>
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d007      	beq.n	80054a8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	0011      	movs	r1, r2
 80054a0:	0018      	movs	r0, r3
 80054a2:	f000 f9e1 	bl	8005868 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80054a6:	e05c      	b.n	8005562 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2241      	movs	r2, #65	; 0x41
 80054ac:	5c9b      	ldrb	r3, [r3, r2]
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b21      	cmp	r3, #33	; 0x21
 80054b2:	d128      	bne.n	8005506 <I2C_ITMasterCplt+0x136>
    hi2c->State = HAL_I2C_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2241      	movs	r2, #65	; 0x41
 80054b8:	2120      	movs	r1, #32
 80054ba:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2242      	movs	r2, #66	; 0x42
 80054c6:	5c9b      	ldrb	r3, [r3, r2]
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b40      	cmp	r3, #64	; 0x40
 80054cc:	d10d      	bne.n	80054ea <I2C_ITMasterCplt+0x11a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2242      	movs	r2, #66	; 0x42
 80054d2:	2100      	movs	r1, #0
 80054d4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2240      	movs	r2, #64	; 0x40
 80054da:	2100      	movs	r1, #0
 80054dc:	5499      	strb	r1, [r3, r2]
      hi2c->MemTxCpltCallback(hi2c);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	0010      	movs	r0, r2
 80054e6:	4798      	blx	r3
}
 80054e8:	e03b      	b.n	8005562 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2242      	movs	r2, #66	; 0x42
 80054ee:	2100      	movs	r1, #0
 80054f0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2240      	movs	r2, #64	; 0x40
 80054f6:	2100      	movs	r1, #0
 80054f8:	5499      	strb	r1, [r3, r2]
      hi2c->MasterTxCpltCallback(hi2c);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	0010      	movs	r0, r2
 8005502:	4798      	blx	r3
}
 8005504:	e02d      	b.n	8005562 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2241      	movs	r2, #65	; 0x41
 800550a:	5c9b      	ldrb	r3, [r3, r2]
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b22      	cmp	r3, #34	; 0x22
 8005510:	d127      	bne.n	8005562 <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2241      	movs	r2, #65	; 0x41
 8005516:	2120      	movs	r1, #32
 8005518:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2242      	movs	r2, #66	; 0x42
 8005524:	5c9b      	ldrb	r3, [r3, r2]
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b40      	cmp	r3, #64	; 0x40
 800552a:	d10d      	bne.n	8005548 <I2C_ITMasterCplt+0x178>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2242      	movs	r2, #66	; 0x42
 8005530:	2100      	movs	r1, #0
 8005532:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2240      	movs	r2, #64	; 0x40
 8005538:	2100      	movs	r1, #0
 800553a:	5499      	strb	r1, [r3, r2]
      hi2c->MemRxCpltCallback(hi2c);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	0010      	movs	r0, r2
 8005544:	4798      	blx	r3
}
 8005546:	e00c      	b.n	8005562 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2242      	movs	r2, #66	; 0x42
 800554c:	2100      	movs	r1, #0
 800554e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2240      	movs	r2, #64	; 0x40
 8005554:	2100      	movs	r1, #0
 8005556:	5499      	strb	r1, [r3, r2]
      hi2c->MasterRxCpltCallback(hi2c);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	0010      	movs	r0, r2
 8005560:	4798      	blx	r3
}
 8005562:	46c0      	nop			; (mov r8, r8)
 8005564:	46bd      	mov	sp, r7
 8005566:	b006      	add	sp, #24
 8005568:	bd80      	pop	{r7, pc}
 800556a:	46c0      	nop			; (mov r8, r8)
 800556c:	fe00e800 	.word	0xfe00e800
 8005570:	ffff0000 	.word	0xffff0000

08005574 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800558a:	200f      	movs	r0, #15
 800558c:	183b      	adds	r3, r7, r0
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	2141      	movs	r1, #65	; 0x41
 8005592:	5c52      	ldrb	r2, [r2, r1]
 8005594:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2220      	movs	r2, #32
 800559c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800559e:	183b      	adds	r3, r7, r0
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	2b21      	cmp	r3, #33	; 0x21
 80055a4:	d003      	beq.n	80055ae <I2C_ITSlaveCplt+0x3a>
 80055a6:	183b      	adds	r3, r7, r0
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	2b29      	cmp	r3, #41	; 0x29
 80055ac:	d109      	bne.n	80055c2 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80055ae:	4a7c      	ldr	r2, [pc, #496]	; (80057a0 <I2C_ITSlaveCplt+0x22c>)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	0011      	movs	r1, r2
 80055b4:	0018      	movs	r0, r3
 80055b6:	f000 fd09 	bl	8005fcc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2221      	movs	r2, #33	; 0x21
 80055be:	631a      	str	r2, [r3, #48]	; 0x30
 80055c0:	e011      	b.n	80055e6 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80055c2:	220f      	movs	r2, #15
 80055c4:	18bb      	adds	r3, r7, r2
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	2b22      	cmp	r3, #34	; 0x22
 80055ca:	d003      	beq.n	80055d4 <I2C_ITSlaveCplt+0x60>
 80055cc:	18bb      	adds	r3, r7, r2
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b2a      	cmp	r3, #42	; 0x2a
 80055d2:	d108      	bne.n	80055e6 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80055d4:	4a73      	ldr	r2, [pc, #460]	; (80057a4 <I2C_ITSlaveCplt+0x230>)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	0011      	movs	r1, r2
 80055da:	0018      	movs	r0, r3
 80055dc:	f000 fcf6 	bl	8005fcc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2222      	movs	r2, #34	; 0x22
 80055e4:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2180      	movs	r1, #128	; 0x80
 80055f2:	0209      	lsls	r1, r1, #8
 80055f4:	430a      	orrs	r2, r1
 80055f6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4969      	ldr	r1, [pc, #420]	; (80057a8 <I2C_ITSlaveCplt+0x234>)
 8005604:	400a      	ands	r2, r1
 8005606:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	0018      	movs	r0, r3
 800560c:	f000 fa39 	bl	8005a82 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	2380      	movs	r3, #128	; 0x80
 8005614:	01db      	lsls	r3, r3, #7
 8005616:	4013      	ands	r3, r2
 8005618:	d013      	beq.n	8005642 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4961      	ldr	r1, [pc, #388]	; (80057ac <I2C_ITSlaveCplt+0x238>)
 8005626:	400a      	ands	r2, r1
 8005628:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562e:	2b00      	cmp	r3, #0
 8005630:	d01f      	beq.n	8005672 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	b29a      	uxth	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005640:	e017      	b.n	8005672 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	2380      	movs	r3, #128	; 0x80
 8005646:	021b      	lsls	r3, r3, #8
 8005648:	4013      	ands	r3, r2
 800564a:	d012      	beq.n	8005672 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4956      	ldr	r1, [pc, #344]	; (80057b0 <I2C_ITSlaveCplt+0x23c>)
 8005658:	400a      	ands	r2, r1
 800565a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005660:	2b00      	cmp	r3, #0
 8005662:	d006      	beq.n	8005672 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	b29a      	uxth	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	2204      	movs	r2, #4
 8005676:	4013      	ands	r3, r2
 8005678:	d020      	beq.n	80056bc <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	2204      	movs	r2, #4
 800567e:	4393      	bics	r3, r2
 8005680:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568c:	b2d2      	uxtb	r2, r2
 800568e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005694:	1c5a      	adds	r2, r3, #1
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00c      	beq.n	80056bc <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a6:	3b01      	subs	r3, #1
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	3b01      	subs	r3, #1
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d005      	beq.n	80056d2 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ca:	2204      	movs	r2, #4
 80056cc:	431a      	orrs	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2242      	movs	r2, #66	; 0x42
 80056d6:	2100      	movs	r1, #0
 80056d8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d013      	beq.n	8005710 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	0011      	movs	r1, r2
 80056f0:	0018      	movs	r0, r3
 80056f2:	f000 f8b9 	bl	8005868 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2241      	movs	r2, #65	; 0x41
 80056fa:	5c9b      	ldrb	r3, [r3, r2]
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b28      	cmp	r3, #40	; 0x28
 8005700:	d14a      	bne.n	8005798 <I2C_ITSlaveCplt+0x224>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	0011      	movs	r1, r2
 8005708:	0018      	movs	r0, r3
 800570a:	f000 f855 	bl	80057b8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800570e:	e043      	b.n	8005798 <I2C_ITSlaveCplt+0x224>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005714:	4a27      	ldr	r2, [pc, #156]	; (80057b4 <I2C_ITSlaveCplt+0x240>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d017      	beq.n	800574a <I2C_ITSlaveCplt+0x1d6>
    I2C_ITSlaveSeqCplt(hi2c);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	0018      	movs	r0, r3
 800571e:	f7ff fdf1 	bl	8005304 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a23      	ldr	r2, [pc, #140]	; (80057b4 <I2C_ITSlaveCplt+0x240>)
 8005726:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2241      	movs	r2, #65	; 0x41
 800572c:	2120      	movs	r1, #32
 800572e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2240      	movs	r2, #64	; 0x40
 800573a:	2100      	movs	r1, #0
 800573c:	5499      	strb	r1, [r3, r2]
    hi2c->ListenCpltCallback(hi2c);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	0010      	movs	r0, r2
 8005746:	4798      	blx	r3
}
 8005748:	e026      	b.n	8005798 <I2C_ITSlaveCplt+0x224>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2241      	movs	r2, #65	; 0x41
 800574e:	5c9b      	ldrb	r3, [r3, r2]
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b22      	cmp	r3, #34	; 0x22
 8005754:	d110      	bne.n	8005778 <I2C_ITSlaveCplt+0x204>
    hi2c->State = HAL_I2C_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2241      	movs	r2, #65	; 0x41
 800575a:	2120      	movs	r1, #32
 800575c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2240      	movs	r2, #64	; 0x40
 8005768:	2100      	movs	r1, #0
 800576a:	5499      	strb	r1, [r3, r2]
    hi2c->SlaveRxCpltCallback(hi2c);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	0010      	movs	r0, r2
 8005774:	4798      	blx	r3
}
 8005776:	e00f      	b.n	8005798 <I2C_ITSlaveCplt+0x224>
    hi2c->State = HAL_I2C_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2241      	movs	r2, #65	; 0x41
 800577c:	2120      	movs	r1, #32
 800577e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2240      	movs	r2, #64	; 0x40
 800578a:	2100      	movs	r1, #0
 800578c:	5499      	strb	r1, [r3, r2]
    hi2c->SlaveTxCpltCallback(hi2c);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	0010      	movs	r0, r2
 8005796:	4798      	blx	r3
}
 8005798:	46c0      	nop			; (mov r8, r8)
 800579a:	46bd      	mov	sp, r7
 800579c:	b006      	add	sp, #24
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	00008001 	.word	0x00008001
 80057a4:	00008002 	.word	0x00008002
 80057a8:	fe00e800 	.word	0xfe00e800
 80057ac:	ffffbfff 	.word	0xffffbfff
 80057b0:	ffff7fff 	.word	0xffff7fff
 80057b4:	ffff0000 	.word	0xffff0000

080057b8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a26      	ldr	r2, [pc, #152]	; (8005860 <I2C_ITListenCplt+0xa8>)
 80057c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2241      	movs	r2, #65	; 0x41
 80057d2:	2120      	movs	r1, #32
 80057d4:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2242      	movs	r2, #66	; 0x42
 80057da:	2100      	movs	r1, #0
 80057dc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	2204      	movs	r2, #4
 80057e8:	4013      	ands	r3, r2
 80057ea:	d022      	beq.n	8005832 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	b2d2      	uxtb	r2, r2
 80057f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005808:	2b00      	cmp	r3, #0
 800580a:	d012      	beq.n	8005832 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005810:	3b01      	subs	r3, #1
 8005812:	b29a      	uxth	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800581c:	b29b      	uxth	r3, r3
 800581e:	3b01      	subs	r3, #1
 8005820:	b29a      	uxth	r2, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800582a:	2204      	movs	r2, #4
 800582c:	431a      	orrs	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005832:	4a0c      	ldr	r2, [pc, #48]	; (8005864 <I2C_ITListenCplt+0xac>)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	0011      	movs	r1, r2
 8005838:	0018      	movs	r0, r3
 800583a:	f000 fbc7 	bl	8005fcc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2210      	movs	r2, #16
 8005844:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2240      	movs	r2, #64	; 0x40
 800584a:	2100      	movs	r1, #0
 800584c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	0010      	movs	r0, r2
 8005856:	4798      	blx	r3
#else
  HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005858:	46c0      	nop			; (mov r8, r8)
 800585a:	46bd      	mov	sp, r7
 800585c:	b002      	add	sp, #8
 800585e:	bd80      	pop	{r7, pc}
 8005860:	ffff0000 	.word	0xffff0000
 8005864:	00008003 	.word	0x00008003

08005868 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005872:	200f      	movs	r0, #15
 8005874:	183b      	adds	r3, r7, r0
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	2141      	movs	r1, #65	; 0x41
 800587a:	5c52      	ldrb	r2, [r2, r1]
 800587c:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2242      	movs	r2, #66	; 0x42
 8005882:	2100      	movs	r1, #0
 8005884:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a62      	ldr	r2, [pc, #392]	; (8005a14 <I2C_ITError+0x1ac>)
 800588a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	431a      	orrs	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800589e:	183b      	adds	r3, r7, r0
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	2b28      	cmp	r3, #40	; 0x28
 80058a4:	d007      	beq.n	80058b6 <I2C_ITError+0x4e>
 80058a6:	183b      	adds	r3, r7, r0
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	2b29      	cmp	r3, #41	; 0x29
 80058ac:	d003      	beq.n	80058b6 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80058ae:	183b      	adds	r3, r7, r0
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	2b2a      	cmp	r3, #42	; 0x2a
 80058b4:	d10c      	bne.n	80058d0 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2103      	movs	r1, #3
 80058ba:	0018      	movs	r0, r3
 80058bc:	f000 fb86 	bl	8005fcc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2241      	movs	r2, #65	; 0x41
 80058c4:	2128      	movs	r1, #40	; 0x28
 80058c6:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a53      	ldr	r2, [pc, #332]	; (8005a18 <I2C_ITError+0x1b0>)
 80058cc:	635a      	str	r2, [r3, #52]	; 0x34
 80058ce:	e012      	b.n	80058f6 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80058d0:	4a52      	ldr	r2, [pc, #328]	; (8005a1c <I2C_ITError+0x1b4>)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	0011      	movs	r1, r2
 80058d6:	0018      	movs	r0, r3
 80058d8:	f000 fb78 	bl	8005fcc <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2241      	movs	r2, #65	; 0x41
 80058e0:	5c9b      	ldrb	r3, [r3, r2]
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b60      	cmp	r3, #96	; 0x60
 80058e6:	d003      	beq.n	80058f0 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2241      	movs	r2, #65	; 0x41
 80058ec:	2120      	movs	r1, #32
 80058ee:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fa:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005900:	2b00      	cmp	r3, #0
 8005902:	d03b      	beq.n	800597c <I2C_ITError+0x114>
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2b11      	cmp	r3, #17
 8005908:	d002      	beq.n	8005910 <I2C_ITError+0xa8>
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	2b21      	cmp	r3, #33	; 0x21
 800590e:	d135      	bne.n	800597c <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	2380      	movs	r3, #128	; 0x80
 8005918:	01db      	lsls	r3, r3, #7
 800591a:	401a      	ands	r2, r3
 800591c:	2380      	movs	r3, #128	; 0x80
 800591e:	01db      	lsls	r3, r3, #7
 8005920:	429a      	cmp	r2, r3
 8005922:	d107      	bne.n	8005934 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	493c      	ldr	r1, [pc, #240]	; (8005a20 <I2C_ITError+0x1b8>)
 8005930:	400a      	ands	r2, r1
 8005932:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005938:	0018      	movs	r0, r3
 800593a:	f7fe f855 	bl	80039e8 <HAL_DMA_GetState>
 800593e:	0003      	movs	r3, r0
 8005940:	2b01      	cmp	r3, #1
 8005942:	d016      	beq.n	8005972 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005948:	4a36      	ldr	r2, [pc, #216]	; (8005a24 <I2C_ITError+0x1bc>)
 800594a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2240      	movs	r2, #64	; 0x40
 8005950:	2100      	movs	r1, #0
 8005952:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005958:	0018      	movs	r0, r3
 800595a:	f7fd ff29 	bl	80037b0 <HAL_DMA_Abort_IT>
 800595e:	1e03      	subs	r3, r0, #0
 8005960:	d051      	beq.n	8005a06 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005966:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596c:	0018      	movs	r0, r3
 800596e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005970:	e049      	b.n	8005a06 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	0018      	movs	r0, r3
 8005976:	f000 f859 	bl	8005a2c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800597a:	e044      	b.n	8005a06 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005980:	2b00      	cmp	r3, #0
 8005982:	d03b      	beq.n	80059fc <I2C_ITError+0x194>
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2b12      	cmp	r3, #18
 8005988:	d002      	beq.n	8005990 <I2C_ITError+0x128>
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	2b22      	cmp	r3, #34	; 0x22
 800598e:	d135      	bne.n	80059fc <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	2380      	movs	r3, #128	; 0x80
 8005998:	021b      	lsls	r3, r3, #8
 800599a:	401a      	ands	r2, r3
 800599c:	2380      	movs	r3, #128	; 0x80
 800599e:	021b      	lsls	r3, r3, #8
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d107      	bne.n	80059b4 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	491e      	ldr	r1, [pc, #120]	; (8005a28 <I2C_ITError+0x1c0>)
 80059b0:	400a      	ands	r2, r1
 80059b2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b8:	0018      	movs	r0, r3
 80059ba:	f7fe f815 	bl	80039e8 <HAL_DMA_GetState>
 80059be:	0003      	movs	r3, r0
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d016      	beq.n	80059f2 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c8:	4a16      	ldr	r2, [pc, #88]	; (8005a24 <I2C_ITError+0x1bc>)
 80059ca:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2240      	movs	r2, #64	; 0x40
 80059d0:	2100      	movs	r1, #0
 80059d2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d8:	0018      	movs	r0, r3
 80059da:	f7fd fee9 	bl	80037b0 <HAL_DMA_Abort_IT>
 80059de:	1e03      	subs	r3, r0, #0
 80059e0:	d013      	beq.n	8005a0a <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ec:	0018      	movs	r0, r3
 80059ee:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059f0:	e00b      	b.n	8005a0a <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	0018      	movs	r0, r3
 80059f6:	f000 f819 	bl	8005a2c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059fa:	e006      	b.n	8005a0a <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	0018      	movs	r0, r3
 8005a00:	f000 f814 	bl	8005a2c <I2C_TreatErrorCallback>
  }
}
 8005a04:	e002      	b.n	8005a0c <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005a06:	46c0      	nop			; (mov r8, r8)
 8005a08:	e000      	b.n	8005a0c <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a0a:	46c0      	nop			; (mov r8, r8)
}
 8005a0c:	46c0      	nop			; (mov r8, r8)
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	b004      	add	sp, #16
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	ffff0000 	.word	0xffff0000
 8005a18:	080049e1 	.word	0x080049e1
 8005a1c:	00008003 	.word	0x00008003
 8005a20:	ffffbfff 	.word	0xffffbfff
 8005a24:	08005ac7 	.word	0x08005ac7
 8005a28:	ffff7fff 	.word	0xffff7fff

08005a2c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2241      	movs	r2, #65	; 0x41
 8005a38:	5c9b      	ldrb	r3, [r3, r2]
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b60      	cmp	r3, #96	; 0x60
 8005a3e:	d110      	bne.n	8005a62 <I2C_TreatErrorCallback+0x36>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2241      	movs	r2, #65	; 0x41
 8005a44:	2120      	movs	r1, #32
 8005a46:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2240      	movs	r2, #64	; 0x40
 8005a52:	2100      	movs	r1, #0
 8005a54:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	0010      	movs	r0, r2
 8005a5e:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a60:	e00b      	b.n	8005a7a <I2C_TreatErrorCallback+0x4e>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2240      	movs	r2, #64	; 0x40
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCallback(hi2c);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	0010      	movs	r0, r2
 8005a78:	4798      	blx	r3
}
 8005a7a:	46c0      	nop			; (mov r8, r8)
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	b002      	add	sp, #8
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b082      	sub	sp, #8
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	2202      	movs	r2, #2
 8005a92:	4013      	ands	r3, r2
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d103      	bne.n	8005aa0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d007      	beq.n	8005abe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	699a      	ldr	r2, [r3, #24]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2101      	movs	r1, #1
 8005aba:	430a      	orrs	r2, r1
 8005abc:	619a      	str	r2, [r3, #24]
  }
}
 8005abe:	46c0      	nop			; (mov r8, r8)
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	b002      	add	sp, #8
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b084      	sub	sp, #16
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d003      	beq.n	8005ae4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d003      	beq.n	8005af4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af0:	2200      	movs	r2, #0
 8005af2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	0018      	movs	r0, r3
 8005af8:	f7ff ff98 	bl	8005a2c <I2C_TreatErrorCallback>
}
 8005afc:	46c0      	nop			; (mov r8, r8)
 8005afe:	46bd      	mov	sp, r7
 8005b00:	b004      	add	sp, #16
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	603b      	str	r3, [r7, #0]
 8005b10:	1dfb      	adds	r3, r7, #7
 8005b12:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b14:	e021      	b.n	8005b5a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	d01e      	beq.n	8005b5a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b1c:	f7fc fbee 	bl	80022fc <HAL_GetTick>
 8005b20:	0002      	movs	r2, r0
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d302      	bcc.n	8005b32 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d113      	bne.n	8005b5a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b36:	2220      	movs	r2, #32
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2241      	movs	r2, #65	; 0x41
 8005b42:	2120      	movs	r1, #32
 8005b44:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2242      	movs	r2, #66	; 0x42
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2240      	movs	r2, #64	; 0x40
 8005b52:	2100      	movs	r1, #0
 8005b54:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e00f      	b.n	8005b7a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	4013      	ands	r3, r2
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	425a      	negs	r2, r3
 8005b6a:	4153      	adcs	r3, r2
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	001a      	movs	r2, r3
 8005b70:	1dfb      	adds	r3, r7, #7
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d0ce      	beq.n	8005b16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	0018      	movs	r0, r3
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	b004      	add	sp, #16
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b084      	sub	sp, #16
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	60f8      	str	r0, [r7, #12]
 8005b8a:	60b9      	str	r1, [r7, #8]
 8005b8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b8e:	e02b      	b.n	8005be8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	68b9      	ldr	r1, [r7, #8]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	0018      	movs	r0, r3
 8005b98:	f000 f86e 	bl	8005c78 <I2C_IsErrorOccurred>
 8005b9c:	1e03      	subs	r3, r0, #0
 8005b9e:	d001      	beq.n	8005ba4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e029      	b.n	8005bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	d01e      	beq.n	8005be8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005baa:	f7fc fba7 	bl	80022fc <HAL_GetTick>
 8005bae:	0002      	movs	r2, r0
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d302      	bcc.n	8005bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d113      	bne.n	8005be8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2241      	movs	r2, #65	; 0x41
 8005bd0:	2120      	movs	r1, #32
 8005bd2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2242      	movs	r2, #66	; 0x42
 8005bd8:	2100      	movs	r1, #0
 8005bda:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2240      	movs	r2, #64	; 0x40
 8005be0:	2100      	movs	r1, #0
 8005be2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e007      	b.n	8005bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d1cc      	bne.n	8005b90 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	0018      	movs	r0, r3
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	b004      	add	sp, #16
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c0c:	e028      	b.n	8005c60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	68b9      	ldr	r1, [r7, #8]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	0018      	movs	r0, r3
 8005c16:	f000 f82f 	bl	8005c78 <I2C_IsErrorOccurred>
 8005c1a:	1e03      	subs	r3, r0, #0
 8005c1c:	d001      	beq.n	8005c22 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e026      	b.n	8005c70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c22:	f7fc fb6b 	bl	80022fc <HAL_GetTick>
 8005c26:	0002      	movs	r2, r0
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d302      	bcc.n	8005c38 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d113      	bne.n	8005c60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	431a      	orrs	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2241      	movs	r2, #65	; 0x41
 8005c48:	2120      	movs	r1, #32
 8005c4a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2242      	movs	r2, #66	; 0x42
 8005c50:	2100      	movs	r1, #0
 8005c52:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2240      	movs	r2, #64	; 0x40
 8005c58:	2100      	movs	r1, #0
 8005c5a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e007      	b.n	8005c70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	2220      	movs	r2, #32
 8005c68:	4013      	ands	r3, r2
 8005c6a:	2b20      	cmp	r3, #32
 8005c6c:	d1cf      	bne.n	8005c0e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	0018      	movs	r0, r3
 8005c72:	46bd      	mov	sp, r7
 8005c74:	b004      	add	sp, #16
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c78:	b590      	push	{r4, r7, lr}
 8005c7a:	b08b      	sub	sp, #44	; 0x2c
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c84:	2327      	movs	r3, #39	; 0x27
 8005c86:	18fb      	adds	r3, r7, r3
 8005c88:	2200      	movs	r2, #0
 8005c8a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005c94:	2300      	movs	r3, #0
 8005c96:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	2210      	movs	r2, #16
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	d100      	bne.n	8005ca6 <I2C_IsErrorOccurred+0x2e>
 8005ca4:	e082      	b.n	8005dac <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2210      	movs	r2, #16
 8005cac:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005cae:	e060      	b.n	8005d72 <I2C_IsErrorOccurred+0xfa>
 8005cb0:	2427      	movs	r4, #39	; 0x27
 8005cb2:	193b      	adds	r3, r7, r4
 8005cb4:	193a      	adds	r2, r7, r4
 8005cb6:	7812      	ldrb	r2, [r2, #0]
 8005cb8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	d058      	beq.n	8005d72 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005cc0:	f7fc fb1c 	bl	80022fc <HAL_GetTick>
 8005cc4:	0002      	movs	r2, r0
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d306      	bcc.n	8005cde <I2C_IsErrorOccurred+0x66>
 8005cd0:	193b      	adds	r3, r7, r4
 8005cd2:	193a      	adds	r2, r7, r4
 8005cd4:	7812      	ldrb	r2, [r2, #0]
 8005cd6:	701a      	strb	r2, [r3, #0]
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d149      	bne.n	8005d72 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	2380      	movs	r3, #128	; 0x80
 8005ce6:	01db      	lsls	r3, r3, #7
 8005ce8:	4013      	ands	r3, r2
 8005cea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005cec:	2013      	movs	r0, #19
 8005cee:	183b      	adds	r3, r7, r0
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	2142      	movs	r1, #66	; 0x42
 8005cf4:	5c52      	ldrb	r2, [r2, r1]
 8005cf6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	699a      	ldr	r2, [r3, #24]
 8005cfe:	2380      	movs	r3, #128	; 0x80
 8005d00:	021b      	lsls	r3, r3, #8
 8005d02:	401a      	ands	r2, r3
 8005d04:	2380      	movs	r3, #128	; 0x80
 8005d06:	021b      	lsls	r3, r3, #8
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d126      	bne.n	8005d5a <I2C_IsErrorOccurred+0xe2>
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	2380      	movs	r3, #128	; 0x80
 8005d10:	01db      	lsls	r3, r3, #7
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d021      	beq.n	8005d5a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8005d16:	183b      	adds	r3, r7, r0
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	2b20      	cmp	r3, #32
 8005d1c:	d01d      	beq.n	8005d5a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2180      	movs	r1, #128	; 0x80
 8005d2a:	01c9      	lsls	r1, r1, #7
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005d30:	f7fc fae4 	bl	80022fc <HAL_GetTick>
 8005d34:	0003      	movs	r3, r0
 8005d36:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d38:	e00f      	b.n	8005d5a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005d3a:	f7fc fadf 	bl	80022fc <HAL_GetTick>
 8005d3e:	0002      	movs	r2, r0
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	2b19      	cmp	r3, #25
 8005d46:	d908      	bls.n	8005d5a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8005d48:	6a3b      	ldr	r3, [r7, #32]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005d50:	2327      	movs	r3, #39	; 0x27
 8005d52:	18fb      	adds	r3, r7, r3
 8005d54:	2201      	movs	r2, #1
 8005d56:	701a      	strb	r2, [r3, #0]

              break;
 8005d58:	e00b      	b.n	8005d72 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	2220      	movs	r2, #32
 8005d62:	4013      	ands	r3, r2
 8005d64:	2127      	movs	r1, #39	; 0x27
 8005d66:	187a      	adds	r2, r7, r1
 8005d68:	1879      	adds	r1, r7, r1
 8005d6a:	7809      	ldrb	r1, [r1, #0]
 8005d6c:	7011      	strb	r1, [r2, #0]
 8005d6e:	2b20      	cmp	r3, #32
 8005d70:	d1e3      	bne.n	8005d3a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	2220      	movs	r2, #32
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	2b20      	cmp	r3, #32
 8005d7e:	d004      	beq.n	8005d8a <I2C_IsErrorOccurred+0x112>
 8005d80:	2327      	movs	r3, #39	; 0x27
 8005d82:	18fb      	adds	r3, r7, r3
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d092      	beq.n	8005cb0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005d8a:	2327      	movs	r3, #39	; 0x27
 8005d8c:	18fb      	adds	r3, r7, r3
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d103      	bne.n	8005d9c <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2220      	movs	r2, #32
 8005d9a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	2204      	movs	r2, #4
 8005da0:	4313      	orrs	r3, r2
 8005da2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005da4:	2327      	movs	r3, #39	; 0x27
 8005da6:	18fb      	adds	r3, r7, r3
 8005da8:	2201      	movs	r2, #1
 8005daa:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005db4:	69ba      	ldr	r2, [r7, #24]
 8005db6:	2380      	movs	r3, #128	; 0x80
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	4013      	ands	r3, r2
 8005dbc:	d00c      	beq.n	8005dd8 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2280      	movs	r2, #128	; 0x80
 8005dcc:	0052      	lsls	r2, r2, #1
 8005dce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005dd0:	2327      	movs	r3, #39	; 0x27
 8005dd2:	18fb      	adds	r3, r7, r3
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005dd8:	69ba      	ldr	r2, [r7, #24]
 8005dda:	2380      	movs	r3, #128	; 0x80
 8005ddc:	00db      	lsls	r3, r3, #3
 8005dde:	4013      	ands	r3, r2
 8005de0:	d00c      	beq.n	8005dfc <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	2208      	movs	r2, #8
 8005de6:	4313      	orrs	r3, r2
 8005de8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2280      	movs	r2, #128	; 0x80
 8005df0:	00d2      	lsls	r2, r2, #3
 8005df2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005df4:	2327      	movs	r3, #39	; 0x27
 8005df6:	18fb      	adds	r3, r7, r3
 8005df8:	2201      	movs	r2, #1
 8005dfa:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	2380      	movs	r3, #128	; 0x80
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4013      	ands	r3, r2
 8005e04:	d00c      	beq.n	8005e20 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005e06:	6a3b      	ldr	r3, [r7, #32]
 8005e08:	2202      	movs	r2, #2
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2280      	movs	r2, #128	; 0x80
 8005e14:	0092      	lsls	r2, r2, #2
 8005e16:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005e18:	2327      	movs	r3, #39	; 0x27
 8005e1a:	18fb      	adds	r3, r7, r3
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8005e20:	2327      	movs	r3, #39	; 0x27
 8005e22:	18fb      	adds	r3, r7, r3
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d01d      	beq.n	8005e66 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	0018      	movs	r0, r3
 8005e2e:	f7ff fe28 	bl	8005a82 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	490d      	ldr	r1, [pc, #52]	; (8005e74 <I2C_IsErrorOccurred+0x1fc>)
 8005e3e:	400a      	ands	r2, r1
 8005e40:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e46:	6a3b      	ldr	r3, [r7, #32]
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2241      	movs	r2, #65	; 0x41
 8005e52:	2120      	movs	r1, #32
 8005e54:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2242      	movs	r2, #66	; 0x42
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2240      	movs	r2, #64	; 0x40
 8005e62:	2100      	movs	r1, #0
 8005e64:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005e66:	2327      	movs	r3, #39	; 0x27
 8005e68:	18fb      	adds	r3, r7, r3
 8005e6a:	781b      	ldrb	r3, [r3, #0]
}
 8005e6c:	0018      	movs	r0, r3
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	b00b      	add	sp, #44	; 0x2c
 8005e72:	bd90      	pop	{r4, r7, pc}
 8005e74:	fe00e800 	.word	0xfe00e800

08005e78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005e78:	b590      	push	{r4, r7, lr}
 8005e7a:	b087      	sub	sp, #28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	0008      	movs	r0, r1
 8005e82:	0011      	movs	r1, r2
 8005e84:	607b      	str	r3, [r7, #4]
 8005e86:	240a      	movs	r4, #10
 8005e88:	193b      	adds	r3, r7, r4
 8005e8a:	1c02      	adds	r2, r0, #0
 8005e8c:	801a      	strh	r2, [r3, #0]
 8005e8e:	2009      	movs	r0, #9
 8005e90:	183b      	adds	r3, r7, r0
 8005e92:	1c0a      	adds	r2, r1, #0
 8005e94:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e96:	193b      	adds	r3, r7, r4
 8005e98:	881b      	ldrh	r3, [r3, #0]
 8005e9a:	059b      	lsls	r3, r3, #22
 8005e9c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e9e:	183b      	adds	r3, r7, r0
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	0419      	lsls	r1, r3, #16
 8005ea4:	23ff      	movs	r3, #255	; 0xff
 8005ea6:	041b      	lsls	r3, r3, #16
 8005ea8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005eaa:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	005b      	lsls	r3, r3, #1
 8005eb6:	085b      	lsrs	r3, r3, #1
 8005eb8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ec2:	0d51      	lsrs	r1, r2, #21
 8005ec4:	2280      	movs	r2, #128	; 0x80
 8005ec6:	00d2      	lsls	r2, r2, #3
 8005ec8:	400a      	ands	r2, r1
 8005eca:	4907      	ldr	r1, [pc, #28]	; (8005ee8 <I2C_TransferConfig+0x70>)
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	43d2      	mvns	r2, r2
 8005ed0:	401a      	ands	r2, r3
 8005ed2:	0011      	movs	r1, r2
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005ede:	46c0      	nop			; (mov r8, r8)
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	b007      	add	sp, #28
 8005ee4:	bd90      	pop	{r4, r7, pc}
 8005ee6:	46c0      	nop			; (mov r8, r8)
 8005ee8:	03ff63ff 	.word	0x03ff63ff

08005eec <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	000a      	movs	r2, r1
 8005ef6:	1cbb      	adds	r3, r7, #2
 8005ef8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8005efa:	2300      	movs	r3, #0
 8005efc:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f02:	4b30      	ldr	r3, [pc, #192]	; (8005fc4 <I2C_Enable_IRQ+0xd8>)
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d004      	beq.n	8005f12 <I2C_Enable_IRQ+0x26>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005f0c:	4b2e      	ldr	r3, [pc, #184]	; (8005fc8 <I2C_Enable_IRQ+0xdc>)
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d121      	bne.n	8005f56 <I2C_Enable_IRQ+0x6a>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005f12:	1cbb      	adds	r3, r7, #2
 8005f14:	2200      	movs	r2, #0
 8005f16:	5e9b      	ldrsh	r3, [r3, r2]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	da03      	bge.n	8005f24 <I2C_Enable_IRQ+0x38>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	22b8      	movs	r2, #184	; 0xb8
 8005f20:	4313      	orrs	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005f24:	1cbb      	adds	r3, r7, #2
 8005f26:	881b      	ldrh	r3, [r3, #0]
 8005f28:	2b10      	cmp	r3, #16
 8005f2a:	d103      	bne.n	8005f34 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2290      	movs	r2, #144	; 0x90
 8005f30:	4313      	orrs	r3, r2
 8005f32:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005f34:	1cbb      	adds	r3, r7, #2
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	2b20      	cmp	r3, #32
 8005f3a:	d103      	bne.n	8005f44 <I2C_Enable_IRQ+0x58>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2260      	movs	r2, #96	; 0x60
 8005f40:	4313      	orrs	r3, r2
 8005f42:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005f44:	1cbb      	adds	r3, r7, #2
 8005f46:	881b      	ldrh	r3, [r3, #0]
 8005f48:	2b40      	cmp	r3, #64	; 0x40
 8005f4a:	d12f      	bne.n	8005fac <I2C_Enable_IRQ+0xc0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2240      	movs	r2, #64	; 0x40
 8005f50:	4313      	orrs	r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005f54:	e02a      	b.n	8005fac <I2C_Enable_IRQ+0xc0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005f56:	1cbb      	adds	r3, r7, #2
 8005f58:	2200      	movs	r2, #0
 8005f5a:	5e9b      	ldrsh	r3, [r3, r2]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	da03      	bge.n	8005f68 <I2C_Enable_IRQ+0x7c>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	22b8      	movs	r2, #184	; 0xb8
 8005f64:	4313      	orrs	r3, r2
 8005f66:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005f68:	1cbb      	adds	r3, r7, #2
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	4013      	ands	r3, r2
 8005f70:	d003      	beq.n	8005f7a <I2C_Enable_IRQ+0x8e>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	22f2      	movs	r2, #242	; 0xf2
 8005f76:	4313      	orrs	r3, r2
 8005f78:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005f7a:	1cbb      	adds	r3, r7, #2
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	2202      	movs	r2, #2
 8005f80:	4013      	ands	r3, r2
 8005f82:	d003      	beq.n	8005f8c <I2C_Enable_IRQ+0xa0>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	22f4      	movs	r2, #244	; 0xf4
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005f8c:	1cbb      	adds	r3, r7, #2
 8005f8e:	881b      	ldrh	r3, [r3, #0]
 8005f90:	2b10      	cmp	r3, #16
 8005f92:	d103      	bne.n	8005f9c <I2C_Enable_IRQ+0xb0>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2290      	movs	r2, #144	; 0x90
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005f9c:	1cbb      	adds	r3, r7, #2
 8005f9e:	881b      	ldrh	r3, [r3, #0]
 8005fa0:	2b20      	cmp	r3, #32
 8005fa2:	d103      	bne.n	8005fac <I2C_Enable_IRQ+0xc0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2220      	movs	r2, #32
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6819      	ldr	r1, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	601a      	str	r2, [r3, #0]
}
 8005fbc:	46c0      	nop			; (mov r8, r8)
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	b004      	add	sp, #16
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	08004be1 	.word	0x08004be1
 8005fc8:	08004dd9 	.word	0x08004dd9

08005fcc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	000a      	movs	r2, r1
 8005fd6:	1cbb      	adds	r3, r7, #2
 8005fd8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005fde:	1cbb      	adds	r3, r7, #2
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	d010      	beq.n	800600a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2242      	movs	r2, #66	; 0x42
 8005fec:	4313      	orrs	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2241      	movs	r2, #65	; 0x41
 8005ff4:	5c9b      	ldrb	r3, [r3, r2]
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	001a      	movs	r2, r3
 8005ffa:	2328      	movs	r3, #40	; 0x28
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	2b28      	cmp	r3, #40	; 0x28
 8006000:	d003      	beq.n	800600a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	22b0      	movs	r2, #176	; 0xb0
 8006006:	4313      	orrs	r3, r2
 8006008:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800600a:	1cbb      	adds	r3, r7, #2
 800600c:	881b      	ldrh	r3, [r3, #0]
 800600e:	2202      	movs	r2, #2
 8006010:	4013      	ands	r3, r2
 8006012:	d010      	beq.n	8006036 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2244      	movs	r2, #68	; 0x44
 8006018:	4313      	orrs	r3, r2
 800601a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2241      	movs	r2, #65	; 0x41
 8006020:	5c9b      	ldrb	r3, [r3, r2]
 8006022:	b2db      	uxtb	r3, r3
 8006024:	001a      	movs	r2, r3
 8006026:	2328      	movs	r3, #40	; 0x28
 8006028:	4013      	ands	r3, r2
 800602a:	2b28      	cmp	r3, #40	; 0x28
 800602c:	d003      	beq.n	8006036 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	22b0      	movs	r2, #176	; 0xb0
 8006032:	4313      	orrs	r3, r2
 8006034:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006036:	1cbb      	adds	r3, r7, #2
 8006038:	2200      	movs	r2, #0
 800603a:	5e9b      	ldrsh	r3, [r3, r2]
 800603c:	2b00      	cmp	r3, #0
 800603e:	da03      	bge.n	8006048 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	22b8      	movs	r2, #184	; 0xb8
 8006044:	4313      	orrs	r3, r2
 8006046:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006048:	1cbb      	adds	r3, r7, #2
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	2b10      	cmp	r3, #16
 800604e:	d103      	bne.n	8006058 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2290      	movs	r2, #144	; 0x90
 8006054:	4313      	orrs	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006058:	1cbb      	adds	r3, r7, #2
 800605a:	881b      	ldrh	r3, [r3, #0]
 800605c:	2b20      	cmp	r3, #32
 800605e:	d103      	bne.n	8006068 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2220      	movs	r2, #32
 8006064:	4313      	orrs	r3, r2
 8006066:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006068:	1cbb      	adds	r3, r7, #2
 800606a:	881b      	ldrh	r3, [r3, #0]
 800606c:	2b40      	cmp	r3, #64	; 0x40
 800606e:	d103      	bne.n	8006078 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2240      	movs	r2, #64	; 0x40
 8006074:	4313      	orrs	r3, r2
 8006076:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	43d9      	mvns	r1, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	400a      	ands	r2, r1
 8006088:	601a      	str	r2, [r3, #0]
}
 800608a:	46c0      	nop			; (mov r8, r8)
 800608c:	46bd      	mov	sp, r7
 800608e:	b004      	add	sp, #16
 8006090:	bd80      	pop	{r7, pc}
	...

08006094 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2241      	movs	r2, #65	; 0x41
 80060a2:	5c9b      	ldrb	r3, [r3, r2]
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b20      	cmp	r3, #32
 80060a8:	d138      	bne.n	800611c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2240      	movs	r2, #64	; 0x40
 80060ae:	5c9b      	ldrb	r3, [r3, r2]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d101      	bne.n	80060b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80060b4:	2302      	movs	r3, #2
 80060b6:	e032      	b.n	800611e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2240      	movs	r2, #64	; 0x40
 80060bc:	2101      	movs	r1, #1
 80060be:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2241      	movs	r2, #65	; 0x41
 80060c4:	2124      	movs	r1, #36	; 0x24
 80060c6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2101      	movs	r1, #1
 80060d4:	438a      	bics	r2, r1
 80060d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4911      	ldr	r1, [pc, #68]	; (8006128 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80060e4:	400a      	ands	r2, r1
 80060e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6819      	ldr	r1, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	683a      	ldr	r2, [r7, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2101      	movs	r1, #1
 8006104:	430a      	orrs	r2, r1
 8006106:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2241      	movs	r2, #65	; 0x41
 800610c:	2120      	movs	r1, #32
 800610e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2240      	movs	r2, #64	; 0x40
 8006114:	2100      	movs	r1, #0
 8006116:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006118:	2300      	movs	r3, #0
 800611a:	e000      	b.n	800611e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800611c:	2302      	movs	r3, #2
  }
}
 800611e:	0018      	movs	r0, r3
 8006120:	46bd      	mov	sp, r7
 8006122:	b002      	add	sp, #8
 8006124:	bd80      	pop	{r7, pc}
 8006126:	46c0      	nop			; (mov r8, r8)
 8006128:	ffffefff 	.word	0xffffefff

0800612c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2241      	movs	r2, #65	; 0x41
 800613a:	5c9b      	ldrb	r3, [r3, r2]
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b20      	cmp	r3, #32
 8006140:	d139      	bne.n	80061b6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2240      	movs	r2, #64	; 0x40
 8006146:	5c9b      	ldrb	r3, [r3, r2]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d101      	bne.n	8006150 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800614c:	2302      	movs	r3, #2
 800614e:	e033      	b.n	80061b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2240      	movs	r2, #64	; 0x40
 8006154:	2101      	movs	r1, #1
 8006156:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2241      	movs	r2, #65	; 0x41
 800615c:	2124      	movs	r1, #36	; 0x24
 800615e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2101      	movs	r1, #1
 800616c:	438a      	bics	r2, r1
 800616e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	4a11      	ldr	r2, [pc, #68]	; (80061c0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800617c:	4013      	ands	r3, r2
 800617e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	021b      	lsls	r3, r3, #8
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	4313      	orrs	r3, r2
 8006188:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2101      	movs	r1, #1
 800619e:	430a      	orrs	r2, r1
 80061a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2241      	movs	r2, #65	; 0x41
 80061a6:	2120      	movs	r1, #32
 80061a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2240      	movs	r2, #64	; 0x40
 80061ae:	2100      	movs	r1, #0
 80061b0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	e000      	b.n	80061b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80061b6:	2302      	movs	r3, #2
  }
}
 80061b8:	0018      	movs	r0, r3
 80061ba:	46bd      	mov	sp, r7
 80061bc:	b004      	add	sp, #16
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	fffff0ff 	.word	0xfffff0ff

080061c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80061cc:	4b19      	ldr	r3, [pc, #100]	; (8006234 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a19      	ldr	r2, [pc, #100]	; (8006238 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80061d2:	4013      	ands	r3, r2
 80061d4:	0019      	movs	r1, r3
 80061d6:	4b17      	ldr	r3, [pc, #92]	; (8006234 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	430a      	orrs	r2, r1
 80061dc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	2380      	movs	r3, #128	; 0x80
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d11f      	bne.n	8006228 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80061e8:	4b14      	ldr	r3, [pc, #80]	; (800623c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	0013      	movs	r3, r2
 80061ee:	005b      	lsls	r3, r3, #1
 80061f0:	189b      	adds	r3, r3, r2
 80061f2:	005b      	lsls	r3, r3, #1
 80061f4:	4912      	ldr	r1, [pc, #72]	; (8006240 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80061f6:	0018      	movs	r0, r3
 80061f8:	f7f9 ff82 	bl	8000100 <__udivsi3>
 80061fc:	0003      	movs	r3, r0
 80061fe:	3301      	adds	r3, #1
 8006200:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006202:	e008      	b.n	8006216 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d003      	beq.n	8006212 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	3b01      	subs	r3, #1
 800620e:	60fb      	str	r3, [r7, #12]
 8006210:	e001      	b.n	8006216 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e009      	b.n	800622a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006216:	4b07      	ldr	r3, [pc, #28]	; (8006234 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006218:	695a      	ldr	r2, [r3, #20]
 800621a:	2380      	movs	r3, #128	; 0x80
 800621c:	00db      	lsls	r3, r3, #3
 800621e:	401a      	ands	r2, r3
 8006220:	2380      	movs	r3, #128	; 0x80
 8006222:	00db      	lsls	r3, r3, #3
 8006224:	429a      	cmp	r2, r3
 8006226:	d0ed      	beq.n	8006204 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	0018      	movs	r0, r3
 800622c:	46bd      	mov	sp, r7
 800622e:	b004      	add	sp, #16
 8006230:	bd80      	pop	{r7, pc}
 8006232:	46c0      	nop			; (mov r8, r8)
 8006234:	40007000 	.word	0x40007000
 8006238:	fffff9ff 	.word	0xfffff9ff
 800623c:	20000000 	.word	0x20000000
 8006240:	000f4240 	.word	0x000f4240

08006244 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b088      	sub	sp, #32
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e2f3      	b.n	800683e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2201      	movs	r2, #1
 800625c:	4013      	ands	r3, r2
 800625e:	d100      	bne.n	8006262 <HAL_RCC_OscConfig+0x1e>
 8006260:	e07c      	b.n	800635c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006262:	4bc3      	ldr	r3, [pc, #780]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	2238      	movs	r2, #56	; 0x38
 8006268:	4013      	ands	r3, r2
 800626a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800626c:	4bc0      	ldr	r3, [pc, #768]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	2203      	movs	r2, #3
 8006272:	4013      	ands	r3, r2
 8006274:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	2b10      	cmp	r3, #16
 800627a:	d102      	bne.n	8006282 <HAL_RCC_OscConfig+0x3e>
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	2b03      	cmp	r3, #3
 8006280:	d002      	beq.n	8006288 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	2b08      	cmp	r3, #8
 8006286:	d10b      	bne.n	80062a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006288:	4bb9      	ldr	r3, [pc, #740]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	2380      	movs	r3, #128	; 0x80
 800628e:	029b      	lsls	r3, r3, #10
 8006290:	4013      	ands	r3, r2
 8006292:	d062      	beq.n	800635a <HAL_RCC_OscConfig+0x116>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d15e      	bne.n	800635a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e2ce      	b.n	800683e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	2380      	movs	r3, #128	; 0x80
 80062a6:	025b      	lsls	r3, r3, #9
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d107      	bne.n	80062bc <HAL_RCC_OscConfig+0x78>
 80062ac:	4bb0      	ldr	r3, [pc, #704]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	4baf      	ldr	r3, [pc, #700]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 80062b2:	2180      	movs	r1, #128	; 0x80
 80062b4:	0249      	lsls	r1, r1, #9
 80062b6:	430a      	orrs	r2, r1
 80062b8:	601a      	str	r2, [r3, #0]
 80062ba:	e020      	b.n	80062fe <HAL_RCC_OscConfig+0xba>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685a      	ldr	r2, [r3, #4]
 80062c0:	23a0      	movs	r3, #160	; 0xa0
 80062c2:	02db      	lsls	r3, r3, #11
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d10e      	bne.n	80062e6 <HAL_RCC_OscConfig+0xa2>
 80062c8:	4ba9      	ldr	r3, [pc, #676]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	4ba8      	ldr	r3, [pc, #672]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 80062ce:	2180      	movs	r1, #128	; 0x80
 80062d0:	02c9      	lsls	r1, r1, #11
 80062d2:	430a      	orrs	r2, r1
 80062d4:	601a      	str	r2, [r3, #0]
 80062d6:	4ba6      	ldr	r3, [pc, #664]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	4ba5      	ldr	r3, [pc, #660]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 80062dc:	2180      	movs	r1, #128	; 0x80
 80062de:	0249      	lsls	r1, r1, #9
 80062e0:	430a      	orrs	r2, r1
 80062e2:	601a      	str	r2, [r3, #0]
 80062e4:	e00b      	b.n	80062fe <HAL_RCC_OscConfig+0xba>
 80062e6:	4ba2      	ldr	r3, [pc, #648]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	4ba1      	ldr	r3, [pc, #644]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 80062ec:	49a1      	ldr	r1, [pc, #644]	; (8006574 <HAL_RCC_OscConfig+0x330>)
 80062ee:	400a      	ands	r2, r1
 80062f0:	601a      	str	r2, [r3, #0]
 80062f2:	4b9f      	ldr	r3, [pc, #636]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	4b9e      	ldr	r3, [pc, #632]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 80062f8:	499f      	ldr	r1, [pc, #636]	; (8006578 <HAL_RCC_OscConfig+0x334>)
 80062fa:	400a      	ands	r2, r1
 80062fc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d014      	beq.n	8006330 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006306:	f7fb fff9 	bl	80022fc <HAL_GetTick>
 800630a:	0003      	movs	r3, r0
 800630c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800630e:	e008      	b.n	8006322 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006310:	f7fb fff4 	bl	80022fc <HAL_GetTick>
 8006314:	0002      	movs	r2, r0
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	2b64      	cmp	r3, #100	; 0x64
 800631c:	d901      	bls.n	8006322 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e28d      	b.n	800683e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006322:	4b93      	ldr	r3, [pc, #588]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	2380      	movs	r3, #128	; 0x80
 8006328:	029b      	lsls	r3, r3, #10
 800632a:	4013      	ands	r3, r2
 800632c:	d0f0      	beq.n	8006310 <HAL_RCC_OscConfig+0xcc>
 800632e:	e015      	b.n	800635c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006330:	f7fb ffe4 	bl	80022fc <HAL_GetTick>
 8006334:	0003      	movs	r3, r0
 8006336:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006338:	e008      	b.n	800634c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800633a:	f7fb ffdf 	bl	80022fc <HAL_GetTick>
 800633e:	0002      	movs	r2, r0
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	2b64      	cmp	r3, #100	; 0x64
 8006346:	d901      	bls.n	800634c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e278      	b.n	800683e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800634c:	4b88      	ldr	r3, [pc, #544]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	2380      	movs	r3, #128	; 0x80
 8006352:	029b      	lsls	r3, r3, #10
 8006354:	4013      	ands	r3, r2
 8006356:	d1f0      	bne.n	800633a <HAL_RCC_OscConfig+0xf6>
 8006358:	e000      	b.n	800635c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800635a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2202      	movs	r2, #2
 8006362:	4013      	ands	r3, r2
 8006364:	d100      	bne.n	8006368 <HAL_RCC_OscConfig+0x124>
 8006366:	e099      	b.n	800649c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006368:	4b81      	ldr	r3, [pc, #516]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	2238      	movs	r2, #56	; 0x38
 800636e:	4013      	ands	r3, r2
 8006370:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006372:	4b7f      	ldr	r3, [pc, #508]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	2203      	movs	r2, #3
 8006378:	4013      	ands	r3, r2
 800637a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	2b10      	cmp	r3, #16
 8006380:	d102      	bne.n	8006388 <HAL_RCC_OscConfig+0x144>
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2b02      	cmp	r3, #2
 8006386:	d002      	beq.n	800638e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d135      	bne.n	80063fa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800638e:	4b78      	ldr	r3, [pc, #480]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	2380      	movs	r3, #128	; 0x80
 8006394:	00db      	lsls	r3, r3, #3
 8006396:	4013      	ands	r3, r2
 8006398:	d005      	beq.n	80063a6 <HAL_RCC_OscConfig+0x162>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e24b      	b.n	800683e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063a6:	4b72      	ldr	r3, [pc, #456]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	4a74      	ldr	r2, [pc, #464]	; (800657c <HAL_RCC_OscConfig+0x338>)
 80063ac:	4013      	ands	r3, r2
 80063ae:	0019      	movs	r1, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	021a      	lsls	r2, r3, #8
 80063b6:	4b6e      	ldr	r3, [pc, #440]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 80063b8:	430a      	orrs	r2, r1
 80063ba:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d112      	bne.n	80063e8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80063c2:	4b6b      	ldr	r3, [pc, #428]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a6e      	ldr	r2, [pc, #440]	; (8006580 <HAL_RCC_OscConfig+0x33c>)
 80063c8:	4013      	ands	r3, r2
 80063ca:	0019      	movs	r1, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	691a      	ldr	r2, [r3, #16]
 80063d0:	4b67      	ldr	r3, [pc, #412]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 80063d2:	430a      	orrs	r2, r1
 80063d4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80063d6:	4b66      	ldr	r3, [pc, #408]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	0adb      	lsrs	r3, r3, #11
 80063dc:	2207      	movs	r2, #7
 80063de:	4013      	ands	r3, r2
 80063e0:	4a68      	ldr	r2, [pc, #416]	; (8006584 <HAL_RCC_OscConfig+0x340>)
 80063e2:	40da      	lsrs	r2, r3
 80063e4:	4b68      	ldr	r3, [pc, #416]	; (8006588 <HAL_RCC_OscConfig+0x344>)
 80063e6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80063e8:	4b68      	ldr	r3, [pc, #416]	; (800658c <HAL_RCC_OscConfig+0x348>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	0018      	movs	r0, r3
 80063ee:	f7fb ff29 	bl	8002244 <HAL_InitTick>
 80063f2:	1e03      	subs	r3, r0, #0
 80063f4:	d051      	beq.n	800649a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e221      	b.n	800683e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d030      	beq.n	8006464 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006402:	4b5b      	ldr	r3, [pc, #364]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a5e      	ldr	r2, [pc, #376]	; (8006580 <HAL_RCC_OscConfig+0x33c>)
 8006408:	4013      	ands	r3, r2
 800640a:	0019      	movs	r1, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	691a      	ldr	r2, [r3, #16]
 8006410:	4b57      	ldr	r3, [pc, #348]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 8006412:	430a      	orrs	r2, r1
 8006414:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8006416:	4b56      	ldr	r3, [pc, #344]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	4b55      	ldr	r3, [pc, #340]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 800641c:	2180      	movs	r1, #128	; 0x80
 800641e:	0049      	lsls	r1, r1, #1
 8006420:	430a      	orrs	r2, r1
 8006422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006424:	f7fb ff6a 	bl	80022fc <HAL_GetTick>
 8006428:	0003      	movs	r3, r0
 800642a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800642c:	e008      	b.n	8006440 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800642e:	f7fb ff65 	bl	80022fc <HAL_GetTick>
 8006432:	0002      	movs	r2, r0
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	2b02      	cmp	r3, #2
 800643a:	d901      	bls.n	8006440 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e1fe      	b.n	800683e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006440:	4b4b      	ldr	r3, [pc, #300]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	2380      	movs	r3, #128	; 0x80
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	4013      	ands	r3, r2
 800644a:	d0f0      	beq.n	800642e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800644c:	4b48      	ldr	r3, [pc, #288]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	4a4a      	ldr	r2, [pc, #296]	; (800657c <HAL_RCC_OscConfig+0x338>)
 8006452:	4013      	ands	r3, r2
 8006454:	0019      	movs	r1, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	021a      	lsls	r2, r3, #8
 800645c:	4b44      	ldr	r3, [pc, #272]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 800645e:	430a      	orrs	r2, r1
 8006460:	605a      	str	r2, [r3, #4]
 8006462:	e01b      	b.n	800649c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8006464:	4b42      	ldr	r3, [pc, #264]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	4b41      	ldr	r3, [pc, #260]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 800646a:	4949      	ldr	r1, [pc, #292]	; (8006590 <HAL_RCC_OscConfig+0x34c>)
 800646c:	400a      	ands	r2, r1
 800646e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006470:	f7fb ff44 	bl	80022fc <HAL_GetTick>
 8006474:	0003      	movs	r3, r0
 8006476:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006478:	e008      	b.n	800648c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800647a:	f7fb ff3f 	bl	80022fc <HAL_GetTick>
 800647e:	0002      	movs	r2, r0
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	2b02      	cmp	r3, #2
 8006486:	d901      	bls.n	800648c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e1d8      	b.n	800683e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800648c:	4b38      	ldr	r3, [pc, #224]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	2380      	movs	r3, #128	; 0x80
 8006492:	00db      	lsls	r3, r3, #3
 8006494:	4013      	ands	r3, r2
 8006496:	d1f0      	bne.n	800647a <HAL_RCC_OscConfig+0x236>
 8006498:	e000      	b.n	800649c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800649a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2208      	movs	r2, #8
 80064a2:	4013      	ands	r3, r2
 80064a4:	d047      	beq.n	8006536 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80064a6:	4b32      	ldr	r3, [pc, #200]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	2238      	movs	r2, #56	; 0x38
 80064ac:	4013      	ands	r3, r2
 80064ae:	2b18      	cmp	r3, #24
 80064b0:	d10a      	bne.n	80064c8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80064b2:	4b2f      	ldr	r3, [pc, #188]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 80064b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064b6:	2202      	movs	r2, #2
 80064b8:	4013      	ands	r3, r2
 80064ba:	d03c      	beq.n	8006536 <HAL_RCC_OscConfig+0x2f2>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d138      	bne.n	8006536 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e1ba      	b.n	800683e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d019      	beq.n	8006504 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80064d0:	4b27      	ldr	r3, [pc, #156]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 80064d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80064d4:	4b26      	ldr	r3, [pc, #152]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 80064d6:	2101      	movs	r1, #1
 80064d8:	430a      	orrs	r2, r1
 80064da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064dc:	f7fb ff0e 	bl	80022fc <HAL_GetTick>
 80064e0:	0003      	movs	r3, r0
 80064e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80064e4:	e008      	b.n	80064f8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064e6:	f7fb ff09 	bl	80022fc <HAL_GetTick>
 80064ea:	0002      	movs	r2, r0
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d901      	bls.n	80064f8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e1a2      	b.n	800683e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80064f8:	4b1d      	ldr	r3, [pc, #116]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 80064fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064fc:	2202      	movs	r2, #2
 80064fe:	4013      	ands	r3, r2
 8006500:	d0f1      	beq.n	80064e6 <HAL_RCC_OscConfig+0x2a2>
 8006502:	e018      	b.n	8006536 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8006504:	4b1a      	ldr	r3, [pc, #104]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 8006506:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006508:	4b19      	ldr	r3, [pc, #100]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 800650a:	2101      	movs	r1, #1
 800650c:	438a      	bics	r2, r1
 800650e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006510:	f7fb fef4 	bl	80022fc <HAL_GetTick>
 8006514:	0003      	movs	r3, r0
 8006516:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006518:	e008      	b.n	800652c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800651a:	f7fb feef 	bl	80022fc <HAL_GetTick>
 800651e:	0002      	movs	r2, r0
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	2b02      	cmp	r3, #2
 8006526:	d901      	bls.n	800652c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e188      	b.n	800683e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800652c:	4b10      	ldr	r3, [pc, #64]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 800652e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006530:	2202      	movs	r2, #2
 8006532:	4013      	ands	r3, r2
 8006534:	d1f1      	bne.n	800651a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2204      	movs	r2, #4
 800653c:	4013      	ands	r3, r2
 800653e:	d100      	bne.n	8006542 <HAL_RCC_OscConfig+0x2fe>
 8006540:	e0c6      	b.n	80066d0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006542:	231f      	movs	r3, #31
 8006544:	18fb      	adds	r3, r7, r3
 8006546:	2200      	movs	r2, #0
 8006548:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800654a:	4b09      	ldr	r3, [pc, #36]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	2238      	movs	r2, #56	; 0x38
 8006550:	4013      	ands	r3, r2
 8006552:	2b20      	cmp	r3, #32
 8006554:	d11e      	bne.n	8006594 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8006556:	4b06      	ldr	r3, [pc, #24]	; (8006570 <HAL_RCC_OscConfig+0x32c>)
 8006558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800655a:	2202      	movs	r2, #2
 800655c:	4013      	ands	r3, r2
 800655e:	d100      	bne.n	8006562 <HAL_RCC_OscConfig+0x31e>
 8006560:	e0b6      	b.n	80066d0 <HAL_RCC_OscConfig+0x48c>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d000      	beq.n	800656c <HAL_RCC_OscConfig+0x328>
 800656a:	e0b1      	b.n	80066d0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e166      	b.n	800683e <HAL_RCC_OscConfig+0x5fa>
 8006570:	40021000 	.word	0x40021000
 8006574:	fffeffff 	.word	0xfffeffff
 8006578:	fffbffff 	.word	0xfffbffff
 800657c:	ffff80ff 	.word	0xffff80ff
 8006580:	ffffc7ff 	.word	0xffffc7ff
 8006584:	00f42400 	.word	0x00f42400
 8006588:	20000000 	.word	0x20000000
 800658c:	20000004 	.word	0x20000004
 8006590:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006594:	4bac      	ldr	r3, [pc, #688]	; (8006848 <HAL_RCC_OscConfig+0x604>)
 8006596:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006598:	2380      	movs	r3, #128	; 0x80
 800659a:	055b      	lsls	r3, r3, #21
 800659c:	4013      	ands	r3, r2
 800659e:	d101      	bne.n	80065a4 <HAL_RCC_OscConfig+0x360>
 80065a0:	2301      	movs	r3, #1
 80065a2:	e000      	b.n	80065a6 <HAL_RCC_OscConfig+0x362>
 80065a4:	2300      	movs	r3, #0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d011      	beq.n	80065ce <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80065aa:	4ba7      	ldr	r3, [pc, #668]	; (8006848 <HAL_RCC_OscConfig+0x604>)
 80065ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065ae:	4ba6      	ldr	r3, [pc, #664]	; (8006848 <HAL_RCC_OscConfig+0x604>)
 80065b0:	2180      	movs	r1, #128	; 0x80
 80065b2:	0549      	lsls	r1, r1, #21
 80065b4:	430a      	orrs	r2, r1
 80065b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80065b8:	4ba3      	ldr	r3, [pc, #652]	; (8006848 <HAL_RCC_OscConfig+0x604>)
 80065ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065bc:	2380      	movs	r3, #128	; 0x80
 80065be:	055b      	lsls	r3, r3, #21
 80065c0:	4013      	ands	r3, r2
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80065c6:	231f      	movs	r3, #31
 80065c8:	18fb      	adds	r3, r7, r3
 80065ca:	2201      	movs	r2, #1
 80065cc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065ce:	4b9f      	ldr	r3, [pc, #636]	; (800684c <HAL_RCC_OscConfig+0x608>)
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	2380      	movs	r3, #128	; 0x80
 80065d4:	005b      	lsls	r3, r3, #1
 80065d6:	4013      	ands	r3, r2
 80065d8:	d11a      	bne.n	8006610 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065da:	4b9c      	ldr	r3, [pc, #624]	; (800684c <HAL_RCC_OscConfig+0x608>)
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	4b9b      	ldr	r3, [pc, #620]	; (800684c <HAL_RCC_OscConfig+0x608>)
 80065e0:	2180      	movs	r1, #128	; 0x80
 80065e2:	0049      	lsls	r1, r1, #1
 80065e4:	430a      	orrs	r2, r1
 80065e6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80065e8:	f7fb fe88 	bl	80022fc <HAL_GetTick>
 80065ec:	0003      	movs	r3, r0
 80065ee:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065f0:	e008      	b.n	8006604 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065f2:	f7fb fe83 	bl	80022fc <HAL_GetTick>
 80065f6:	0002      	movs	r2, r0
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d901      	bls.n	8006604 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e11c      	b.n	800683e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006604:	4b91      	ldr	r3, [pc, #580]	; (800684c <HAL_RCC_OscConfig+0x608>)
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	2380      	movs	r3, #128	; 0x80
 800660a:	005b      	lsls	r3, r3, #1
 800660c:	4013      	ands	r3, r2
 800660e:	d0f0      	beq.n	80065f2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d106      	bne.n	8006626 <HAL_RCC_OscConfig+0x3e2>
 8006618:	4b8b      	ldr	r3, [pc, #556]	; (8006848 <HAL_RCC_OscConfig+0x604>)
 800661a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800661c:	4b8a      	ldr	r3, [pc, #552]	; (8006848 <HAL_RCC_OscConfig+0x604>)
 800661e:	2101      	movs	r1, #1
 8006620:	430a      	orrs	r2, r1
 8006622:	65da      	str	r2, [r3, #92]	; 0x5c
 8006624:	e01c      	b.n	8006660 <HAL_RCC_OscConfig+0x41c>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	2b05      	cmp	r3, #5
 800662c:	d10c      	bne.n	8006648 <HAL_RCC_OscConfig+0x404>
 800662e:	4b86      	ldr	r3, [pc, #536]	; (8006848 <HAL_RCC_OscConfig+0x604>)
 8006630:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006632:	4b85      	ldr	r3, [pc, #532]	; (8006848 <HAL_RCC_OscConfig+0x604>)
 8006634:	2104      	movs	r1, #4
 8006636:	430a      	orrs	r2, r1
 8006638:	65da      	str	r2, [r3, #92]	; 0x5c
 800663a:	4b83      	ldr	r3, [pc, #524]	; (8006848 <HAL_RCC_OscConfig+0x604>)
 800663c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800663e:	4b82      	ldr	r3, [pc, #520]	; (8006848 <HAL_RCC_OscConfig+0x604>)
 8006640:	2101      	movs	r1, #1
 8006642:	430a      	orrs	r2, r1
 8006644:	65da      	str	r2, [r3, #92]	; 0x5c
 8006646:	e00b      	b.n	8006660 <HAL_RCC_OscConfig+0x41c>
 8006648:	4b7f      	ldr	r3, [pc, #508]	; (8006848 <HAL_RCC_OscConfig+0x604>)
 800664a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800664c:	4b7e      	ldr	r3, [pc, #504]	; (8006848 <HAL_RCC_OscConfig+0x604>)
 800664e:	2101      	movs	r1, #1
 8006650:	438a      	bics	r2, r1
 8006652:	65da      	str	r2, [r3, #92]	; 0x5c
 8006654:	4b7c      	ldr	r3, [pc, #496]	; (8006848 <HAL_RCC_OscConfig+0x604>)
 8006656:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006658:	4b7b      	ldr	r3, [pc, #492]	; (8006848 <HAL_RCC_OscConfig+0x604>)
 800665a:	2104      	movs	r1, #4
 800665c:	438a      	bics	r2, r1
 800665e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d014      	beq.n	8006692 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006668:	f7fb fe48 	bl	80022fc <HAL_GetTick>
 800666c:	0003      	movs	r3, r0
 800666e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006670:	e009      	b.n	8006686 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006672:	f7fb fe43 	bl	80022fc <HAL_GetTick>
 8006676:	0002      	movs	r2, r0
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	4a74      	ldr	r2, [pc, #464]	; (8006850 <HAL_RCC_OscConfig+0x60c>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d901      	bls.n	8006686 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e0db      	b.n	800683e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006686:	4b70      	ldr	r3, [pc, #448]	; (8006848 <HAL_RCC_OscConfig+0x604>)
 8006688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800668a:	2202      	movs	r2, #2
 800668c:	4013      	ands	r3, r2
 800668e:	d0f0      	beq.n	8006672 <HAL_RCC_OscConfig+0x42e>
 8006690:	e013      	b.n	80066ba <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006692:	f7fb fe33 	bl	80022fc <HAL_GetTick>
 8006696:	0003      	movs	r3, r0
 8006698:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800669a:	e009      	b.n	80066b0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800669c:	f7fb fe2e 	bl	80022fc <HAL_GetTick>
 80066a0:	0002      	movs	r2, r0
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	4a6a      	ldr	r2, [pc, #424]	; (8006850 <HAL_RCC_OscConfig+0x60c>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d901      	bls.n	80066b0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80066ac:	2303      	movs	r3, #3
 80066ae:	e0c6      	b.n	800683e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80066b0:	4b65      	ldr	r3, [pc, #404]	; (8006848 <HAL_RCC_OscConfig+0x604>)
 80066b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066b4:	2202      	movs	r2, #2
 80066b6:	4013      	ands	r3, r2
 80066b8:	d1f0      	bne.n	800669c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80066ba:	231f      	movs	r3, #31
 80066bc:	18fb      	adds	r3, r7, r3
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d105      	bne.n	80066d0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80066c4:	4b60      	ldr	r3, [pc, #384]	; (8006848 <HAL_RCC_OscConfig+0x604>)
 80066c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066c8:	4b5f      	ldr	r3, [pc, #380]	; (8006848 <HAL_RCC_OscConfig+0x604>)
 80066ca:	4962      	ldr	r1, [pc, #392]	; (8006854 <HAL_RCC_OscConfig+0x610>)
 80066cc:	400a      	ands	r2, r1
 80066ce:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	69db      	ldr	r3, [r3, #28]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d100      	bne.n	80066da <HAL_RCC_OscConfig+0x496>
 80066d8:	e0b0      	b.n	800683c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066da:	4b5b      	ldr	r3, [pc, #364]	; (8006848 <HAL_RCC_OscConfig+0x604>)
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	2238      	movs	r2, #56	; 0x38
 80066e0:	4013      	ands	r3, r2
 80066e2:	2b10      	cmp	r3, #16
 80066e4:	d100      	bne.n	80066e8 <HAL_RCC_OscConfig+0x4a4>
 80066e6:	e078      	b.n	80067da <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	69db      	ldr	r3, [r3, #28]
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d153      	bne.n	8006798 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066f0:	4b55      	ldr	r3, [pc, #340]	; (8006848 <HAL_RCC_OscConfig+0x604>)
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	4b54      	ldr	r3, [pc, #336]	; (8006848 <HAL_RCC_OscConfig+0x604>)
 80066f6:	4958      	ldr	r1, [pc, #352]	; (8006858 <HAL_RCC_OscConfig+0x614>)
 80066f8:	400a      	ands	r2, r1
 80066fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066fc:	f7fb fdfe 	bl	80022fc <HAL_GetTick>
 8006700:	0003      	movs	r3, r0
 8006702:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006704:	e008      	b.n	8006718 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006706:	f7fb fdf9 	bl	80022fc <HAL_GetTick>
 800670a:	0002      	movs	r2, r0
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	2b02      	cmp	r3, #2
 8006712:	d901      	bls.n	8006718 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	e092      	b.n	800683e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006718:	4b4b      	ldr	r3, [pc, #300]	; (8006848 <HAL_RCC_OscConfig+0x604>)
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	2380      	movs	r3, #128	; 0x80
 800671e:	049b      	lsls	r3, r3, #18
 8006720:	4013      	ands	r3, r2
 8006722:	d1f0      	bne.n	8006706 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006724:	4b48      	ldr	r3, [pc, #288]	; (8006848 <HAL_RCC_OscConfig+0x604>)
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	4a4c      	ldr	r2, [pc, #304]	; (800685c <HAL_RCC_OscConfig+0x618>)
 800672a:	4013      	ands	r3, r2
 800672c:	0019      	movs	r1, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a1a      	ldr	r2, [r3, #32]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006736:	431a      	orrs	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673c:	021b      	lsls	r3, r3, #8
 800673e:	431a      	orrs	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006744:	431a      	orrs	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674a:	431a      	orrs	r2, r3
 800674c:	4b3e      	ldr	r3, [pc, #248]	; (8006848 <HAL_RCC_OscConfig+0x604>)
 800674e:	430a      	orrs	r2, r1
 8006750:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006752:	4b3d      	ldr	r3, [pc, #244]	; (8006848 <HAL_RCC_OscConfig+0x604>)
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	4b3c      	ldr	r3, [pc, #240]	; (8006848 <HAL_RCC_OscConfig+0x604>)
 8006758:	2180      	movs	r1, #128	; 0x80
 800675a:	0449      	lsls	r1, r1, #17
 800675c:	430a      	orrs	r2, r1
 800675e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006760:	4b39      	ldr	r3, [pc, #228]	; (8006848 <HAL_RCC_OscConfig+0x604>)
 8006762:	68da      	ldr	r2, [r3, #12]
 8006764:	4b38      	ldr	r3, [pc, #224]	; (8006848 <HAL_RCC_OscConfig+0x604>)
 8006766:	2180      	movs	r1, #128	; 0x80
 8006768:	0549      	lsls	r1, r1, #21
 800676a:	430a      	orrs	r2, r1
 800676c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800676e:	f7fb fdc5 	bl	80022fc <HAL_GetTick>
 8006772:	0003      	movs	r3, r0
 8006774:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006776:	e008      	b.n	800678a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006778:	f7fb fdc0 	bl	80022fc <HAL_GetTick>
 800677c:	0002      	movs	r2, r0
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	2b02      	cmp	r3, #2
 8006784:	d901      	bls.n	800678a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e059      	b.n	800683e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800678a:	4b2f      	ldr	r3, [pc, #188]	; (8006848 <HAL_RCC_OscConfig+0x604>)
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	2380      	movs	r3, #128	; 0x80
 8006790:	049b      	lsls	r3, r3, #18
 8006792:	4013      	ands	r3, r2
 8006794:	d0f0      	beq.n	8006778 <HAL_RCC_OscConfig+0x534>
 8006796:	e051      	b.n	800683c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006798:	4b2b      	ldr	r3, [pc, #172]	; (8006848 <HAL_RCC_OscConfig+0x604>)
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	4b2a      	ldr	r3, [pc, #168]	; (8006848 <HAL_RCC_OscConfig+0x604>)
 800679e:	492e      	ldr	r1, [pc, #184]	; (8006858 <HAL_RCC_OscConfig+0x614>)
 80067a0:	400a      	ands	r2, r1
 80067a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a4:	f7fb fdaa 	bl	80022fc <HAL_GetTick>
 80067a8:	0003      	movs	r3, r0
 80067aa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067ac:	e008      	b.n	80067c0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067ae:	f7fb fda5 	bl	80022fc <HAL_GetTick>
 80067b2:	0002      	movs	r2, r0
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d901      	bls.n	80067c0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e03e      	b.n	800683e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067c0:	4b21      	ldr	r3, [pc, #132]	; (8006848 <HAL_RCC_OscConfig+0x604>)
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	2380      	movs	r3, #128	; 0x80
 80067c6:	049b      	lsls	r3, r3, #18
 80067c8:	4013      	ands	r3, r2
 80067ca:	d1f0      	bne.n	80067ae <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80067cc:	4b1e      	ldr	r3, [pc, #120]	; (8006848 <HAL_RCC_OscConfig+0x604>)
 80067ce:	68da      	ldr	r2, [r3, #12]
 80067d0:	4b1d      	ldr	r3, [pc, #116]	; (8006848 <HAL_RCC_OscConfig+0x604>)
 80067d2:	4923      	ldr	r1, [pc, #140]	; (8006860 <HAL_RCC_OscConfig+0x61c>)
 80067d4:	400a      	ands	r2, r1
 80067d6:	60da      	str	r2, [r3, #12]
 80067d8:	e030      	b.n	800683c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d101      	bne.n	80067e6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e02b      	b.n	800683e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80067e6:	4b18      	ldr	r3, [pc, #96]	; (8006848 <HAL_RCC_OscConfig+0x604>)
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	2203      	movs	r2, #3
 80067f0:	401a      	ands	r2, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d11e      	bne.n	8006838 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	2270      	movs	r2, #112	; 0x70
 80067fe:	401a      	ands	r2, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006804:	429a      	cmp	r2, r3
 8006806:	d117      	bne.n	8006838 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	23fe      	movs	r3, #254	; 0xfe
 800680c:	01db      	lsls	r3, r3, #7
 800680e:	401a      	ands	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006814:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006816:	429a      	cmp	r2, r3
 8006818:	d10e      	bne.n	8006838 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	23f8      	movs	r3, #248	; 0xf8
 800681e:	039b      	lsls	r3, r3, #14
 8006820:	401a      	ands	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006826:	429a      	cmp	r2, r3
 8006828:	d106      	bne.n	8006838 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	0f5b      	lsrs	r3, r3, #29
 800682e:	075a      	lsls	r2, r3, #29
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006834:	429a      	cmp	r2, r3
 8006836:	d001      	beq.n	800683c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e000      	b.n	800683e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	0018      	movs	r0, r3
 8006840:	46bd      	mov	sp, r7
 8006842:	b008      	add	sp, #32
 8006844:	bd80      	pop	{r7, pc}
 8006846:	46c0      	nop			; (mov r8, r8)
 8006848:	40021000 	.word	0x40021000
 800684c:	40007000 	.word	0x40007000
 8006850:	00001388 	.word	0x00001388
 8006854:	efffffff 	.word	0xefffffff
 8006858:	feffffff 	.word	0xfeffffff
 800685c:	1fc1808c 	.word	0x1fc1808c
 8006860:	effefffc 	.word	0xeffefffc

08006864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e0e9      	b.n	8006a4c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006878:	4b76      	ldr	r3, [pc, #472]	; (8006a54 <HAL_RCC_ClockConfig+0x1f0>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2207      	movs	r2, #7
 800687e:	4013      	ands	r3, r2
 8006880:	683a      	ldr	r2, [r7, #0]
 8006882:	429a      	cmp	r2, r3
 8006884:	d91e      	bls.n	80068c4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006886:	4b73      	ldr	r3, [pc, #460]	; (8006a54 <HAL_RCC_ClockConfig+0x1f0>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2207      	movs	r2, #7
 800688c:	4393      	bics	r3, r2
 800688e:	0019      	movs	r1, r3
 8006890:	4b70      	ldr	r3, [pc, #448]	; (8006a54 <HAL_RCC_ClockConfig+0x1f0>)
 8006892:	683a      	ldr	r2, [r7, #0]
 8006894:	430a      	orrs	r2, r1
 8006896:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006898:	f7fb fd30 	bl	80022fc <HAL_GetTick>
 800689c:	0003      	movs	r3, r0
 800689e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80068a0:	e009      	b.n	80068b6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068a2:	f7fb fd2b 	bl	80022fc <HAL_GetTick>
 80068a6:	0002      	movs	r2, r0
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	4a6a      	ldr	r2, [pc, #424]	; (8006a58 <HAL_RCC_ClockConfig+0x1f4>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d901      	bls.n	80068b6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e0ca      	b.n	8006a4c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80068b6:	4b67      	ldr	r3, [pc, #412]	; (8006a54 <HAL_RCC_ClockConfig+0x1f0>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2207      	movs	r2, #7
 80068bc:	4013      	ands	r3, r2
 80068be:	683a      	ldr	r2, [r7, #0]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d1ee      	bne.n	80068a2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2202      	movs	r2, #2
 80068ca:	4013      	ands	r3, r2
 80068cc:	d015      	beq.n	80068fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2204      	movs	r2, #4
 80068d4:	4013      	ands	r3, r2
 80068d6:	d006      	beq.n	80068e6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80068d8:	4b60      	ldr	r3, [pc, #384]	; (8006a5c <HAL_RCC_ClockConfig+0x1f8>)
 80068da:	689a      	ldr	r2, [r3, #8]
 80068dc:	4b5f      	ldr	r3, [pc, #380]	; (8006a5c <HAL_RCC_ClockConfig+0x1f8>)
 80068de:	21e0      	movs	r1, #224	; 0xe0
 80068e0:	01c9      	lsls	r1, r1, #7
 80068e2:	430a      	orrs	r2, r1
 80068e4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068e6:	4b5d      	ldr	r3, [pc, #372]	; (8006a5c <HAL_RCC_ClockConfig+0x1f8>)
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	4a5d      	ldr	r2, [pc, #372]	; (8006a60 <HAL_RCC_ClockConfig+0x1fc>)
 80068ec:	4013      	ands	r3, r2
 80068ee:	0019      	movs	r1, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	689a      	ldr	r2, [r3, #8]
 80068f4:	4b59      	ldr	r3, [pc, #356]	; (8006a5c <HAL_RCC_ClockConfig+0x1f8>)
 80068f6:	430a      	orrs	r2, r1
 80068f8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2201      	movs	r2, #1
 8006900:	4013      	ands	r3, r2
 8006902:	d057      	beq.n	80069b4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d107      	bne.n	800691c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800690c:	4b53      	ldr	r3, [pc, #332]	; (8006a5c <HAL_RCC_ClockConfig+0x1f8>)
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	2380      	movs	r3, #128	; 0x80
 8006912:	029b      	lsls	r3, r3, #10
 8006914:	4013      	ands	r3, r2
 8006916:	d12b      	bne.n	8006970 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e097      	b.n	8006a4c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	2b02      	cmp	r3, #2
 8006922:	d107      	bne.n	8006934 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006924:	4b4d      	ldr	r3, [pc, #308]	; (8006a5c <HAL_RCC_ClockConfig+0x1f8>)
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	2380      	movs	r3, #128	; 0x80
 800692a:	049b      	lsls	r3, r3, #18
 800692c:	4013      	ands	r3, r2
 800692e:	d11f      	bne.n	8006970 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e08b      	b.n	8006a4c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d107      	bne.n	800694c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800693c:	4b47      	ldr	r3, [pc, #284]	; (8006a5c <HAL_RCC_ClockConfig+0x1f8>)
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	2380      	movs	r3, #128	; 0x80
 8006942:	00db      	lsls	r3, r3, #3
 8006944:	4013      	ands	r3, r2
 8006946:	d113      	bne.n	8006970 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e07f      	b.n	8006a4c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	2b03      	cmp	r3, #3
 8006952:	d106      	bne.n	8006962 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006954:	4b41      	ldr	r3, [pc, #260]	; (8006a5c <HAL_RCC_ClockConfig+0x1f8>)
 8006956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006958:	2202      	movs	r2, #2
 800695a:	4013      	ands	r3, r2
 800695c:	d108      	bne.n	8006970 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e074      	b.n	8006a4c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006962:	4b3e      	ldr	r3, [pc, #248]	; (8006a5c <HAL_RCC_ClockConfig+0x1f8>)
 8006964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006966:	2202      	movs	r2, #2
 8006968:	4013      	ands	r3, r2
 800696a:	d101      	bne.n	8006970 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e06d      	b.n	8006a4c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006970:	4b3a      	ldr	r3, [pc, #232]	; (8006a5c <HAL_RCC_ClockConfig+0x1f8>)
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	2207      	movs	r2, #7
 8006976:	4393      	bics	r3, r2
 8006978:	0019      	movs	r1, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685a      	ldr	r2, [r3, #4]
 800697e:	4b37      	ldr	r3, [pc, #220]	; (8006a5c <HAL_RCC_ClockConfig+0x1f8>)
 8006980:	430a      	orrs	r2, r1
 8006982:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006984:	f7fb fcba 	bl	80022fc <HAL_GetTick>
 8006988:	0003      	movs	r3, r0
 800698a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800698c:	e009      	b.n	80069a2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800698e:	f7fb fcb5 	bl	80022fc <HAL_GetTick>
 8006992:	0002      	movs	r2, r0
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	4a2f      	ldr	r2, [pc, #188]	; (8006a58 <HAL_RCC_ClockConfig+0x1f4>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d901      	bls.n	80069a2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e054      	b.n	8006a4c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069a2:	4b2e      	ldr	r3, [pc, #184]	; (8006a5c <HAL_RCC_ClockConfig+0x1f8>)
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	2238      	movs	r2, #56	; 0x38
 80069a8:	401a      	ands	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	00db      	lsls	r3, r3, #3
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d1ec      	bne.n	800698e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069b4:	4b27      	ldr	r3, [pc, #156]	; (8006a54 <HAL_RCC_ClockConfig+0x1f0>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2207      	movs	r2, #7
 80069ba:	4013      	ands	r3, r2
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d21e      	bcs.n	8006a00 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069c2:	4b24      	ldr	r3, [pc, #144]	; (8006a54 <HAL_RCC_ClockConfig+0x1f0>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2207      	movs	r2, #7
 80069c8:	4393      	bics	r3, r2
 80069ca:	0019      	movs	r1, r3
 80069cc:	4b21      	ldr	r3, [pc, #132]	; (8006a54 <HAL_RCC_ClockConfig+0x1f0>)
 80069ce:	683a      	ldr	r2, [r7, #0]
 80069d0:	430a      	orrs	r2, r1
 80069d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80069d4:	f7fb fc92 	bl	80022fc <HAL_GetTick>
 80069d8:	0003      	movs	r3, r0
 80069da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80069dc:	e009      	b.n	80069f2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069de:	f7fb fc8d 	bl	80022fc <HAL_GetTick>
 80069e2:	0002      	movs	r2, r0
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	4a1b      	ldr	r2, [pc, #108]	; (8006a58 <HAL_RCC_ClockConfig+0x1f4>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d901      	bls.n	80069f2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e02c      	b.n	8006a4c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80069f2:	4b18      	ldr	r3, [pc, #96]	; (8006a54 <HAL_RCC_ClockConfig+0x1f0>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2207      	movs	r2, #7
 80069f8:	4013      	ands	r3, r2
 80069fa:	683a      	ldr	r2, [r7, #0]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d1ee      	bne.n	80069de <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2204      	movs	r2, #4
 8006a06:	4013      	ands	r3, r2
 8006a08:	d009      	beq.n	8006a1e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006a0a:	4b14      	ldr	r3, [pc, #80]	; (8006a5c <HAL_RCC_ClockConfig+0x1f8>)
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	4a15      	ldr	r2, [pc, #84]	; (8006a64 <HAL_RCC_ClockConfig+0x200>)
 8006a10:	4013      	ands	r3, r2
 8006a12:	0019      	movs	r1, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	68da      	ldr	r2, [r3, #12]
 8006a18:	4b10      	ldr	r3, [pc, #64]	; (8006a5c <HAL_RCC_ClockConfig+0x1f8>)
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006a1e:	f000 f829 	bl	8006a74 <HAL_RCC_GetSysClockFreq>
 8006a22:	0001      	movs	r1, r0
 8006a24:	4b0d      	ldr	r3, [pc, #52]	; (8006a5c <HAL_RCC_ClockConfig+0x1f8>)
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	0a1b      	lsrs	r3, r3, #8
 8006a2a:	220f      	movs	r2, #15
 8006a2c:	401a      	ands	r2, r3
 8006a2e:	4b0e      	ldr	r3, [pc, #56]	; (8006a68 <HAL_RCC_ClockConfig+0x204>)
 8006a30:	0092      	lsls	r2, r2, #2
 8006a32:	58d3      	ldr	r3, [r2, r3]
 8006a34:	221f      	movs	r2, #31
 8006a36:	4013      	ands	r3, r2
 8006a38:	000a      	movs	r2, r1
 8006a3a:	40da      	lsrs	r2, r3
 8006a3c:	4b0b      	ldr	r3, [pc, #44]	; (8006a6c <HAL_RCC_ClockConfig+0x208>)
 8006a3e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006a40:	4b0b      	ldr	r3, [pc, #44]	; (8006a70 <HAL_RCC_ClockConfig+0x20c>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	0018      	movs	r0, r3
 8006a46:	f7fb fbfd 	bl	8002244 <HAL_InitTick>
 8006a4a:	0003      	movs	r3, r0
}
 8006a4c:	0018      	movs	r0, r3
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	b004      	add	sp, #16
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	40022000 	.word	0x40022000
 8006a58:	00001388 	.word	0x00001388
 8006a5c:	40021000 	.word	0x40021000
 8006a60:	fffff0ff 	.word	0xfffff0ff
 8006a64:	ffff8fff 	.word	0xffff8fff
 8006a68:	08008340 	.word	0x08008340
 8006a6c:	20000000 	.word	0x20000000
 8006a70:	20000004 	.word	0x20000004

08006a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a7a:	4b3c      	ldr	r3, [pc, #240]	; (8006b6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	2238      	movs	r2, #56	; 0x38
 8006a80:	4013      	ands	r3, r2
 8006a82:	d10f      	bne.n	8006aa4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006a84:	4b39      	ldr	r3, [pc, #228]	; (8006b6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	0adb      	lsrs	r3, r3, #11
 8006a8a:	2207      	movs	r2, #7
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	2201      	movs	r2, #1
 8006a90:	409a      	lsls	r2, r3
 8006a92:	0013      	movs	r3, r2
 8006a94:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006a96:	6839      	ldr	r1, [r7, #0]
 8006a98:	4835      	ldr	r0, [pc, #212]	; (8006b70 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006a9a:	f7f9 fb31 	bl	8000100 <__udivsi3>
 8006a9e:	0003      	movs	r3, r0
 8006aa0:	613b      	str	r3, [r7, #16]
 8006aa2:	e05d      	b.n	8006b60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006aa4:	4b31      	ldr	r3, [pc, #196]	; (8006b6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	2238      	movs	r2, #56	; 0x38
 8006aaa:	4013      	ands	r3, r2
 8006aac:	2b08      	cmp	r3, #8
 8006aae:	d102      	bne.n	8006ab6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006ab0:	4b30      	ldr	r3, [pc, #192]	; (8006b74 <HAL_RCC_GetSysClockFreq+0x100>)
 8006ab2:	613b      	str	r3, [r7, #16]
 8006ab4:	e054      	b.n	8006b60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ab6:	4b2d      	ldr	r3, [pc, #180]	; (8006b6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	2238      	movs	r2, #56	; 0x38
 8006abc:	4013      	ands	r3, r2
 8006abe:	2b10      	cmp	r3, #16
 8006ac0:	d138      	bne.n	8006b34 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006ac2:	4b2a      	ldr	r3, [pc, #168]	; (8006b6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	2203      	movs	r2, #3
 8006ac8:	4013      	ands	r3, r2
 8006aca:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006acc:	4b27      	ldr	r3, [pc, #156]	; (8006b6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	091b      	lsrs	r3, r3, #4
 8006ad2:	2207      	movs	r2, #7
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2b03      	cmp	r3, #3
 8006ade:	d10d      	bne.n	8006afc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ae0:	68b9      	ldr	r1, [r7, #8]
 8006ae2:	4824      	ldr	r0, [pc, #144]	; (8006b74 <HAL_RCC_GetSysClockFreq+0x100>)
 8006ae4:	f7f9 fb0c 	bl	8000100 <__udivsi3>
 8006ae8:	0003      	movs	r3, r0
 8006aea:	0019      	movs	r1, r3
 8006aec:	4b1f      	ldr	r3, [pc, #124]	; (8006b6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	0a1b      	lsrs	r3, r3, #8
 8006af2:	227f      	movs	r2, #127	; 0x7f
 8006af4:	4013      	ands	r3, r2
 8006af6:	434b      	muls	r3, r1
 8006af8:	617b      	str	r3, [r7, #20]
        break;
 8006afa:	e00d      	b.n	8006b18 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006afc:	68b9      	ldr	r1, [r7, #8]
 8006afe:	481c      	ldr	r0, [pc, #112]	; (8006b70 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006b00:	f7f9 fafe 	bl	8000100 <__udivsi3>
 8006b04:	0003      	movs	r3, r0
 8006b06:	0019      	movs	r1, r3
 8006b08:	4b18      	ldr	r3, [pc, #96]	; (8006b6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	0a1b      	lsrs	r3, r3, #8
 8006b0e:	227f      	movs	r2, #127	; 0x7f
 8006b10:	4013      	ands	r3, r2
 8006b12:	434b      	muls	r3, r1
 8006b14:	617b      	str	r3, [r7, #20]
        break;
 8006b16:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006b18:	4b14      	ldr	r3, [pc, #80]	; (8006b6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	0f5b      	lsrs	r3, r3, #29
 8006b1e:	2207      	movs	r2, #7
 8006b20:	4013      	ands	r3, r2
 8006b22:	3301      	adds	r3, #1
 8006b24:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006b26:	6879      	ldr	r1, [r7, #4]
 8006b28:	6978      	ldr	r0, [r7, #20]
 8006b2a:	f7f9 fae9 	bl	8000100 <__udivsi3>
 8006b2e:	0003      	movs	r3, r0
 8006b30:	613b      	str	r3, [r7, #16]
 8006b32:	e015      	b.n	8006b60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006b34:	4b0d      	ldr	r3, [pc, #52]	; (8006b6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	2238      	movs	r2, #56	; 0x38
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	2b20      	cmp	r3, #32
 8006b3e:	d103      	bne.n	8006b48 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006b40:	2380      	movs	r3, #128	; 0x80
 8006b42:	021b      	lsls	r3, r3, #8
 8006b44:	613b      	str	r3, [r7, #16]
 8006b46:	e00b      	b.n	8006b60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006b48:	4b08      	ldr	r3, [pc, #32]	; (8006b6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	2238      	movs	r2, #56	; 0x38
 8006b4e:	4013      	ands	r3, r2
 8006b50:	2b18      	cmp	r3, #24
 8006b52:	d103      	bne.n	8006b5c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006b54:	23fa      	movs	r3, #250	; 0xfa
 8006b56:	01db      	lsls	r3, r3, #7
 8006b58:	613b      	str	r3, [r7, #16]
 8006b5a:	e001      	b.n	8006b60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006b60:	693b      	ldr	r3, [r7, #16]
}
 8006b62:	0018      	movs	r0, r3
 8006b64:	46bd      	mov	sp, r7
 8006b66:	b006      	add	sp, #24
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	46c0      	nop			; (mov r8, r8)
 8006b6c:	40021000 	.word	0x40021000
 8006b70:	00f42400 	.word	0x00f42400
 8006b74:	007a1200 	.word	0x007a1200

08006b78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006b80:	2313      	movs	r3, #19
 8006b82:	18fb      	adds	r3, r7, r3
 8006b84:	2200      	movs	r2, #0
 8006b86:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b88:	2312      	movs	r3, #18
 8006b8a:	18fb      	adds	r3, r7, r3
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	2380      	movs	r3, #128	; 0x80
 8006b96:	029b      	lsls	r3, r3, #10
 8006b98:	4013      	ands	r3, r2
 8006b9a:	d100      	bne.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8006b9c:	e0a3      	b.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b9e:	2011      	movs	r0, #17
 8006ba0:	183b      	adds	r3, r7, r0
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ba6:	4b86      	ldr	r3, [pc, #536]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006ba8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006baa:	2380      	movs	r3, #128	; 0x80
 8006bac:	055b      	lsls	r3, r3, #21
 8006bae:	4013      	ands	r3, r2
 8006bb0:	d110      	bne.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bb2:	4b83      	ldr	r3, [pc, #524]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006bb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bb6:	4b82      	ldr	r3, [pc, #520]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006bb8:	2180      	movs	r1, #128	; 0x80
 8006bba:	0549      	lsls	r1, r1, #21
 8006bbc:	430a      	orrs	r2, r1
 8006bbe:	63da      	str	r2, [r3, #60]	; 0x3c
 8006bc0:	4b7f      	ldr	r3, [pc, #508]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006bc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bc4:	2380      	movs	r3, #128	; 0x80
 8006bc6:	055b      	lsls	r3, r3, #21
 8006bc8:	4013      	ands	r3, r2
 8006bca:	60bb      	str	r3, [r7, #8]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bce:	183b      	adds	r3, r7, r0
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006bd4:	4b7b      	ldr	r3, [pc, #492]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	4b7a      	ldr	r3, [pc, #488]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006bda:	2180      	movs	r1, #128	; 0x80
 8006bdc:	0049      	lsls	r1, r1, #1
 8006bde:	430a      	orrs	r2, r1
 8006be0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006be2:	f7fb fb8b 	bl	80022fc <HAL_GetTick>
 8006be6:	0003      	movs	r3, r0
 8006be8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006bea:	e00b      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bec:	f7fb fb86 	bl	80022fc <HAL_GetTick>
 8006bf0:	0002      	movs	r2, r0
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d904      	bls.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8006bfa:	2313      	movs	r3, #19
 8006bfc:	18fb      	adds	r3, r7, r3
 8006bfe:	2203      	movs	r2, #3
 8006c00:	701a      	strb	r2, [r3, #0]
        break;
 8006c02:	e005      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c04:	4b6f      	ldr	r3, [pc, #444]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	2380      	movs	r3, #128	; 0x80
 8006c0a:	005b      	lsls	r3, r3, #1
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	d0ed      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006c10:	2313      	movs	r3, #19
 8006c12:	18fb      	adds	r3, r7, r3
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d154      	bne.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006c1a:	4b69      	ldr	r3, [pc, #420]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006c1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006c1e:	23c0      	movs	r3, #192	; 0xc0
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	4013      	ands	r3, r2
 8006c24:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d019      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d014      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006c36:	4b62      	ldr	r3, [pc, #392]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c3a:	4a63      	ldr	r2, [pc, #396]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006c40:	4b5f      	ldr	r3, [pc, #380]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006c42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006c44:	4b5e      	ldr	r3, [pc, #376]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006c46:	2180      	movs	r1, #128	; 0x80
 8006c48:	0249      	lsls	r1, r1, #9
 8006c4a:	430a      	orrs	r2, r1
 8006c4c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006c4e:	4b5c      	ldr	r3, [pc, #368]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006c50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006c52:	4b5b      	ldr	r3, [pc, #364]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006c54:	495d      	ldr	r1, [pc, #372]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006c56:	400a      	ands	r2, r1
 8006c58:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006c5a:	4b59      	ldr	r3, [pc, #356]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006c5c:	697a      	ldr	r2, [r7, #20]
 8006c5e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	2201      	movs	r2, #1
 8006c64:	4013      	ands	r3, r2
 8006c66:	d016      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c68:	f7fb fb48 	bl	80022fc <HAL_GetTick>
 8006c6c:	0003      	movs	r3, r0
 8006c6e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c70:	e00c      	b.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c72:	f7fb fb43 	bl	80022fc <HAL_GetTick>
 8006c76:	0002      	movs	r2, r0
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	4a54      	ldr	r2, [pc, #336]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d904      	bls.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8006c82:	2313      	movs	r3, #19
 8006c84:	18fb      	adds	r3, r7, r3
 8006c86:	2203      	movs	r2, #3
 8006c88:	701a      	strb	r2, [r3, #0]
            break;
 8006c8a:	e004      	b.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c8c:	4b4c      	ldr	r3, [pc, #304]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c90:	2202      	movs	r2, #2
 8006c92:	4013      	ands	r3, r2
 8006c94:	d0ed      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8006c96:	2313      	movs	r3, #19
 8006c98:	18fb      	adds	r3, r7, r3
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d10a      	bne.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ca0:	4b47      	ldr	r3, [pc, #284]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ca4:	4a48      	ldr	r2, [pc, #288]	; (8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	0019      	movs	r1, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	699a      	ldr	r2, [r3, #24]
 8006cae:	4b44      	ldr	r3, [pc, #272]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	65da      	str	r2, [r3, #92]	; 0x5c
 8006cb4:	e00c      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006cb6:	2312      	movs	r3, #18
 8006cb8:	18fb      	adds	r3, r7, r3
 8006cba:	2213      	movs	r2, #19
 8006cbc:	18ba      	adds	r2, r7, r2
 8006cbe:	7812      	ldrb	r2, [r2, #0]
 8006cc0:	701a      	strb	r2, [r3, #0]
 8006cc2:	e005      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc4:	2312      	movs	r3, #18
 8006cc6:	18fb      	adds	r3, r7, r3
 8006cc8:	2213      	movs	r2, #19
 8006cca:	18ba      	adds	r2, r7, r2
 8006ccc:	7812      	ldrb	r2, [r2, #0]
 8006cce:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006cd0:	2311      	movs	r3, #17
 8006cd2:	18fb      	adds	r3, r7, r3
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d105      	bne.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cda:	4b39      	ldr	r3, [pc, #228]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006cdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cde:	4b38      	ldr	r3, [pc, #224]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006ce0:	493c      	ldr	r1, [pc, #240]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006ce2:	400a      	ands	r2, r1
 8006ce4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2201      	movs	r2, #1
 8006cec:	4013      	ands	r3, r2
 8006cee:	d009      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006cf0:	4b33      	ldr	r3, [pc, #204]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf4:	2203      	movs	r2, #3
 8006cf6:	4393      	bics	r3, r2
 8006cf8:	0019      	movs	r1, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	4b30      	ldr	r3, [pc, #192]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006d00:	430a      	orrs	r2, r1
 8006d02:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2202      	movs	r2, #2
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	d009      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006d0e:	4b2c      	ldr	r3, [pc, #176]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d12:	220c      	movs	r2, #12
 8006d14:	4393      	bics	r3, r2
 8006d16:	0019      	movs	r1, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	689a      	ldr	r2, [r3, #8]
 8006d1c:	4b28      	ldr	r3, [pc, #160]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2220      	movs	r2, #32
 8006d28:	4013      	ands	r3, r2
 8006d2a:	d009      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d2c:	4b24      	ldr	r3, [pc, #144]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d30:	4a29      	ldr	r2, [pc, #164]	; (8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d32:	4013      	ands	r3, r2
 8006d34:	0019      	movs	r1, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68da      	ldr	r2, [r3, #12]
 8006d3a:	4b21      	ldr	r3, [pc, #132]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	2380      	movs	r3, #128	; 0x80
 8006d46:	01db      	lsls	r3, r3, #7
 8006d48:	4013      	ands	r3, r2
 8006d4a:	d015      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d4c:	4b1c      	ldr	r3, [pc, #112]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	0899      	lsrs	r1, r3, #2
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	695a      	ldr	r2, [r3, #20]
 8006d58:	4b19      	ldr	r3, [pc, #100]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	695a      	ldr	r2, [r3, #20]
 8006d62:	2380      	movs	r3, #128	; 0x80
 8006d64:	05db      	lsls	r3, r3, #23
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d106      	bne.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006d6a:	4b15      	ldr	r3, [pc, #84]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006d6c:	68da      	ldr	r2, [r3, #12]
 8006d6e:	4b14      	ldr	r3, [pc, #80]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006d70:	2180      	movs	r1, #128	; 0x80
 8006d72:	0249      	lsls	r1, r1, #9
 8006d74:	430a      	orrs	r2, r1
 8006d76:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	2380      	movs	r3, #128	; 0x80
 8006d7e:	011b      	lsls	r3, r3, #4
 8006d80:	4013      	ands	r3, r2
 8006d82:	d016      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006d84:	4b0e      	ldr	r3, [pc, #56]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d88:	4a14      	ldr	r2, [pc, #80]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	0019      	movs	r1, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	691a      	ldr	r2, [r3, #16]
 8006d92:	4b0b      	ldr	r3, [pc, #44]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006d94:	430a      	orrs	r2, r1
 8006d96:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	691a      	ldr	r2, [r3, #16]
 8006d9c:	2380      	movs	r3, #128	; 0x80
 8006d9e:	01db      	lsls	r3, r3, #7
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d106      	bne.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006da4:	4b06      	ldr	r3, [pc, #24]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006da6:	68da      	ldr	r2, [r3, #12]
 8006da8:	4b05      	ldr	r3, [pc, #20]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006daa:	2180      	movs	r1, #128	; 0x80
 8006dac:	0249      	lsls	r1, r1, #9
 8006dae:	430a      	orrs	r2, r1
 8006db0:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006db2:	2312      	movs	r3, #18
 8006db4:	18fb      	adds	r3, r7, r3
 8006db6:	781b      	ldrb	r3, [r3, #0]
}
 8006db8:	0018      	movs	r0, r3
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	b006      	add	sp, #24
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	40021000 	.word	0x40021000
 8006dc4:	40007000 	.word	0x40007000
 8006dc8:	fffffcff 	.word	0xfffffcff
 8006dcc:	fffeffff 	.word	0xfffeffff
 8006dd0:	00001388 	.word	0x00001388
 8006dd4:	efffffff 	.word	0xefffffff
 8006dd8:	ffffcfff 	.word	0xffffcfff
 8006ddc:	ffff3fff 	.word	0xffff3fff

08006de0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e04a      	b.n	8006e88 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	223d      	movs	r2, #61	; 0x3d
 8006df6:	5c9b      	ldrb	r3, [r3, r2]
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d107      	bne.n	8006e0e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	223c      	movs	r2, #60	; 0x3c
 8006e02:	2100      	movs	r1, #0
 8006e04:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	0018      	movs	r0, r3
 8006e0a:	f7fa ffbf 	bl	8001d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	223d      	movs	r2, #61	; 0x3d
 8006e12:	2102      	movs	r1, #2
 8006e14:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	3304      	adds	r3, #4
 8006e1e:	0019      	movs	r1, r3
 8006e20:	0010      	movs	r0, r2
 8006e22:	f000 fd15 	bl	8007850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2248      	movs	r2, #72	; 0x48
 8006e2a:	2101      	movs	r1, #1
 8006e2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	223e      	movs	r2, #62	; 0x3e
 8006e32:	2101      	movs	r1, #1
 8006e34:	5499      	strb	r1, [r3, r2]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	223f      	movs	r2, #63	; 0x3f
 8006e3a:	2101      	movs	r1, #1
 8006e3c:	5499      	strb	r1, [r3, r2]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2240      	movs	r2, #64	; 0x40
 8006e42:	2101      	movs	r1, #1
 8006e44:	5499      	strb	r1, [r3, r2]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2241      	movs	r2, #65	; 0x41
 8006e4a:	2101      	movs	r1, #1
 8006e4c:	5499      	strb	r1, [r3, r2]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2242      	movs	r2, #66	; 0x42
 8006e52:	2101      	movs	r1, #1
 8006e54:	5499      	strb	r1, [r3, r2]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2243      	movs	r2, #67	; 0x43
 8006e5a:	2101      	movs	r1, #1
 8006e5c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2244      	movs	r2, #68	; 0x44
 8006e62:	2101      	movs	r1, #1
 8006e64:	5499      	strb	r1, [r3, r2]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2245      	movs	r2, #69	; 0x45
 8006e6a:	2101      	movs	r1, #1
 8006e6c:	5499      	strb	r1, [r3, r2]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2246      	movs	r2, #70	; 0x46
 8006e72:	2101      	movs	r1, #1
 8006e74:	5499      	strb	r1, [r3, r2]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2247      	movs	r2, #71	; 0x47
 8006e7a:	2101      	movs	r1, #1
 8006e7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	223d      	movs	r2, #61	; 0x3d
 8006e82:	2101      	movs	r1, #1
 8006e84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	0018      	movs	r0, r3
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	b002      	add	sp, #8
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	4a0d      	ldr	r2, [pc, #52]	; (8006ed4 <HAL_TIM_Base_Stop+0x44>)
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	d10d      	bne.n	8006ec0 <HAL_TIM_Base_Stop+0x30>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	4a0b      	ldr	r2, [pc, #44]	; (8006ed8 <HAL_TIM_Base_Stop+0x48>)
 8006eac:	4013      	ands	r3, r2
 8006eae:	d107      	bne.n	8006ec0 <HAL_TIM_Base_Stop+0x30>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2101      	movs	r1, #1
 8006ebc:	438a      	bics	r2, r1
 8006ebe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	223d      	movs	r2, #61	; 0x3d
 8006ec4:	2101      	movs	r1, #1
 8006ec6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	0018      	movs	r0, r3
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	b002      	add	sp, #8
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	46c0      	nop			; (mov r8, r8)
 8006ed4:	00001111 	.word	0x00001111
 8006ed8:	00000444 	.word	0x00000444

08006edc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	223d      	movs	r2, #61	; 0x3d
 8006ee8:	5c9b      	ldrb	r3, [r3, r2]
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d001      	beq.n	8006ef4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e03c      	b.n	8006f6e <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	223d      	movs	r2, #61	; 0x3d
 8006ef8:	2102      	movs	r1, #2
 8006efa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68da      	ldr	r2, [r3, #12]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2101      	movs	r1, #1
 8006f08:	430a      	orrs	r2, r1
 8006f0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a19      	ldr	r2, [pc, #100]	; (8006f78 <HAL_TIM_Base_Start_IT+0x9c>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d009      	beq.n	8006f2a <HAL_TIM_Base_Start_IT+0x4e>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a18      	ldr	r2, [pc, #96]	; (8006f7c <HAL_TIM_Base_Start_IT+0xa0>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d004      	beq.n	8006f2a <HAL_TIM_Base_Start_IT+0x4e>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a16      	ldr	r2, [pc, #88]	; (8006f80 <HAL_TIM_Base_Start_IT+0xa4>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d116      	bne.n	8006f58 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	4a14      	ldr	r2, [pc, #80]	; (8006f84 <HAL_TIM_Base_Start_IT+0xa8>)
 8006f32:	4013      	ands	r3, r2
 8006f34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2b06      	cmp	r3, #6
 8006f3a:	d016      	beq.n	8006f6a <HAL_TIM_Base_Start_IT+0x8e>
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	2380      	movs	r3, #128	; 0x80
 8006f40:	025b      	lsls	r3, r3, #9
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d011      	beq.n	8006f6a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2101      	movs	r1, #1
 8006f52:	430a      	orrs	r2, r1
 8006f54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f56:	e008      	b.n	8006f6a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2101      	movs	r1, #1
 8006f64:	430a      	orrs	r2, r1
 8006f66:	601a      	str	r2, [r3, #0]
 8006f68:	e000      	b.n	8006f6c <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f6a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	0018      	movs	r0, r3
 8006f70:	46bd      	mov	sp, r7
 8006f72:	b004      	add	sp, #16
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	46c0      	nop			; (mov r8, r8)
 8006f78:	40012c00 	.word	0x40012c00
 8006f7c:	40000400 	.word	0x40000400
 8006f80:	40014000 	.word	0x40014000
 8006f84:	00010007 	.word	0x00010007

08006f88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e04a      	b.n	8007030 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	223d      	movs	r2, #61	; 0x3d
 8006f9e:	5c9b      	ldrb	r3, [r3, r2]
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d107      	bne.n	8006fb6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	223c      	movs	r2, #60	; 0x3c
 8006faa:	2100      	movs	r1, #0
 8006fac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	0018      	movs	r0, r3
 8006fb2:	f7fa ff7d 	bl	8001eb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	223d      	movs	r2, #61	; 0x3d
 8006fba:	2102      	movs	r1, #2
 8006fbc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	3304      	adds	r3, #4
 8006fc6:	0019      	movs	r1, r3
 8006fc8:	0010      	movs	r0, r2
 8006fca:	f000 fc41 	bl	8007850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2248      	movs	r2, #72	; 0x48
 8006fd2:	2101      	movs	r1, #1
 8006fd4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	223e      	movs	r2, #62	; 0x3e
 8006fda:	2101      	movs	r1, #1
 8006fdc:	5499      	strb	r1, [r3, r2]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	223f      	movs	r2, #63	; 0x3f
 8006fe2:	2101      	movs	r1, #1
 8006fe4:	5499      	strb	r1, [r3, r2]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2240      	movs	r2, #64	; 0x40
 8006fea:	2101      	movs	r1, #1
 8006fec:	5499      	strb	r1, [r3, r2]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2241      	movs	r2, #65	; 0x41
 8006ff2:	2101      	movs	r1, #1
 8006ff4:	5499      	strb	r1, [r3, r2]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2242      	movs	r2, #66	; 0x42
 8006ffa:	2101      	movs	r1, #1
 8006ffc:	5499      	strb	r1, [r3, r2]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2243      	movs	r2, #67	; 0x43
 8007002:	2101      	movs	r1, #1
 8007004:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2244      	movs	r2, #68	; 0x44
 800700a:	2101      	movs	r1, #1
 800700c:	5499      	strb	r1, [r3, r2]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2245      	movs	r2, #69	; 0x45
 8007012:	2101      	movs	r1, #1
 8007014:	5499      	strb	r1, [r3, r2]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2246      	movs	r2, #70	; 0x46
 800701a:	2101      	movs	r1, #1
 800701c:	5499      	strb	r1, [r3, r2]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2247      	movs	r2, #71	; 0x47
 8007022:	2101      	movs	r1, #1
 8007024:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	223d      	movs	r2, #61	; 0x3d
 800702a:	2101      	movs	r1, #1
 800702c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	0018      	movs	r0, r3
 8007032:	46bd      	mov	sp, r7
 8007034:	b002      	add	sp, #8
 8007036:	bd80      	pop	{r7, pc}

08007038 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d108      	bne.n	800705a <HAL_TIM_PWM_Start+0x22>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	223e      	movs	r2, #62	; 0x3e
 800704c:	5c9b      	ldrb	r3, [r3, r2]
 800704e:	b2db      	uxtb	r3, r3
 8007050:	3b01      	subs	r3, #1
 8007052:	1e5a      	subs	r2, r3, #1
 8007054:	4193      	sbcs	r3, r2
 8007056:	b2db      	uxtb	r3, r3
 8007058:	e037      	b.n	80070ca <HAL_TIM_PWM_Start+0x92>
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b04      	cmp	r3, #4
 800705e:	d108      	bne.n	8007072 <HAL_TIM_PWM_Start+0x3a>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	223f      	movs	r2, #63	; 0x3f
 8007064:	5c9b      	ldrb	r3, [r3, r2]
 8007066:	b2db      	uxtb	r3, r3
 8007068:	3b01      	subs	r3, #1
 800706a:	1e5a      	subs	r2, r3, #1
 800706c:	4193      	sbcs	r3, r2
 800706e:	b2db      	uxtb	r3, r3
 8007070:	e02b      	b.n	80070ca <HAL_TIM_PWM_Start+0x92>
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	2b08      	cmp	r3, #8
 8007076:	d108      	bne.n	800708a <HAL_TIM_PWM_Start+0x52>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2240      	movs	r2, #64	; 0x40
 800707c:	5c9b      	ldrb	r3, [r3, r2]
 800707e:	b2db      	uxtb	r3, r3
 8007080:	3b01      	subs	r3, #1
 8007082:	1e5a      	subs	r2, r3, #1
 8007084:	4193      	sbcs	r3, r2
 8007086:	b2db      	uxtb	r3, r3
 8007088:	e01f      	b.n	80070ca <HAL_TIM_PWM_Start+0x92>
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2b0c      	cmp	r3, #12
 800708e:	d108      	bne.n	80070a2 <HAL_TIM_PWM_Start+0x6a>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2241      	movs	r2, #65	; 0x41
 8007094:	5c9b      	ldrb	r3, [r3, r2]
 8007096:	b2db      	uxtb	r3, r3
 8007098:	3b01      	subs	r3, #1
 800709a:	1e5a      	subs	r2, r3, #1
 800709c:	4193      	sbcs	r3, r2
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	e013      	b.n	80070ca <HAL_TIM_PWM_Start+0x92>
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	2b10      	cmp	r3, #16
 80070a6:	d108      	bne.n	80070ba <HAL_TIM_PWM_Start+0x82>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2242      	movs	r2, #66	; 0x42
 80070ac:	5c9b      	ldrb	r3, [r3, r2]
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	3b01      	subs	r3, #1
 80070b2:	1e5a      	subs	r2, r3, #1
 80070b4:	4193      	sbcs	r3, r2
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	e007      	b.n	80070ca <HAL_TIM_PWM_Start+0x92>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2243      	movs	r2, #67	; 0x43
 80070be:	5c9b      	ldrb	r3, [r3, r2]
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	3b01      	subs	r3, #1
 80070c4:	1e5a      	subs	r2, r3, #1
 80070c6:	4193      	sbcs	r3, r2
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d001      	beq.n	80070d2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e085      	b.n	80071de <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d104      	bne.n	80070e2 <HAL_TIM_PWM_Start+0xaa>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	223e      	movs	r2, #62	; 0x3e
 80070dc:	2102      	movs	r1, #2
 80070de:	5499      	strb	r1, [r3, r2]
 80070e0:	e023      	b.n	800712a <HAL_TIM_PWM_Start+0xf2>
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	2b04      	cmp	r3, #4
 80070e6:	d104      	bne.n	80070f2 <HAL_TIM_PWM_Start+0xba>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	223f      	movs	r2, #63	; 0x3f
 80070ec:	2102      	movs	r1, #2
 80070ee:	5499      	strb	r1, [r3, r2]
 80070f0:	e01b      	b.n	800712a <HAL_TIM_PWM_Start+0xf2>
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	2b08      	cmp	r3, #8
 80070f6:	d104      	bne.n	8007102 <HAL_TIM_PWM_Start+0xca>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2240      	movs	r2, #64	; 0x40
 80070fc:	2102      	movs	r1, #2
 80070fe:	5499      	strb	r1, [r3, r2]
 8007100:	e013      	b.n	800712a <HAL_TIM_PWM_Start+0xf2>
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	2b0c      	cmp	r3, #12
 8007106:	d104      	bne.n	8007112 <HAL_TIM_PWM_Start+0xda>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2241      	movs	r2, #65	; 0x41
 800710c:	2102      	movs	r1, #2
 800710e:	5499      	strb	r1, [r3, r2]
 8007110:	e00b      	b.n	800712a <HAL_TIM_PWM_Start+0xf2>
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	2b10      	cmp	r3, #16
 8007116:	d104      	bne.n	8007122 <HAL_TIM_PWM_Start+0xea>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2242      	movs	r2, #66	; 0x42
 800711c:	2102      	movs	r1, #2
 800711e:	5499      	strb	r1, [r3, r2]
 8007120:	e003      	b.n	800712a <HAL_TIM_PWM_Start+0xf2>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2243      	movs	r2, #67	; 0x43
 8007126:	2102      	movs	r1, #2
 8007128:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	6839      	ldr	r1, [r7, #0]
 8007130:	2201      	movs	r2, #1
 8007132:	0018      	movs	r0, r3
 8007134:	f000 ff62 	bl	8007ffc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a2a      	ldr	r2, [pc, #168]	; (80071e8 <HAL_TIM_PWM_Start+0x1b0>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d00e      	beq.n	8007160 <HAL_TIM_PWM_Start+0x128>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a29      	ldr	r2, [pc, #164]	; (80071ec <HAL_TIM_PWM_Start+0x1b4>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d009      	beq.n	8007160 <HAL_TIM_PWM_Start+0x128>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a27      	ldr	r2, [pc, #156]	; (80071f0 <HAL_TIM_PWM_Start+0x1b8>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d004      	beq.n	8007160 <HAL_TIM_PWM_Start+0x128>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a26      	ldr	r2, [pc, #152]	; (80071f4 <HAL_TIM_PWM_Start+0x1bc>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d101      	bne.n	8007164 <HAL_TIM_PWM_Start+0x12c>
 8007160:	2301      	movs	r3, #1
 8007162:	e000      	b.n	8007166 <HAL_TIM_PWM_Start+0x12e>
 8007164:	2300      	movs	r3, #0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d008      	beq.n	800717c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2180      	movs	r1, #128	; 0x80
 8007176:	0209      	lsls	r1, r1, #8
 8007178:	430a      	orrs	r2, r1
 800717a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a19      	ldr	r2, [pc, #100]	; (80071e8 <HAL_TIM_PWM_Start+0x1b0>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d009      	beq.n	800719a <HAL_TIM_PWM_Start+0x162>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a1b      	ldr	r2, [pc, #108]	; (80071f8 <HAL_TIM_PWM_Start+0x1c0>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d004      	beq.n	800719a <HAL_TIM_PWM_Start+0x162>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a15      	ldr	r2, [pc, #84]	; (80071ec <HAL_TIM_PWM_Start+0x1b4>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d116      	bne.n	80071c8 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	4a16      	ldr	r2, [pc, #88]	; (80071fc <HAL_TIM_PWM_Start+0x1c4>)
 80071a2:	4013      	ands	r3, r2
 80071a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2b06      	cmp	r3, #6
 80071aa:	d016      	beq.n	80071da <HAL_TIM_PWM_Start+0x1a2>
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	2380      	movs	r3, #128	; 0x80
 80071b0:	025b      	lsls	r3, r3, #9
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d011      	beq.n	80071da <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2101      	movs	r1, #1
 80071c2:	430a      	orrs	r2, r1
 80071c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071c6:	e008      	b.n	80071da <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2101      	movs	r1, #1
 80071d4:	430a      	orrs	r2, r1
 80071d6:	601a      	str	r2, [r3, #0]
 80071d8:	e000      	b.n	80071dc <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071da:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	0018      	movs	r0, r3
 80071e0:	46bd      	mov	sp, r7
 80071e2:	b004      	add	sp, #16
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	46c0      	nop			; (mov r8, r8)
 80071e8:	40012c00 	.word	0x40012c00
 80071ec:	40014000 	.word	0x40014000
 80071f0:	40014400 	.word	0x40014400
 80071f4:	40014800 	.word	0x40014800
 80071f8:	40000400 	.word	0x40000400
 80071fc:	00010007 	.word	0x00010007

08007200 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	2202      	movs	r2, #2
 8007210:	4013      	ands	r3, r2
 8007212:	2b02      	cmp	r3, #2
 8007214:	d124      	bne.n	8007260 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	2202      	movs	r2, #2
 800721e:	4013      	ands	r3, r2
 8007220:	2b02      	cmp	r3, #2
 8007222:	d11d      	bne.n	8007260 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2203      	movs	r2, #3
 800722a:	4252      	negs	r2, r2
 800722c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	2203      	movs	r2, #3
 800723c:	4013      	ands	r3, r2
 800723e:	d004      	beq.n	800724a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	0018      	movs	r0, r3
 8007244:	f000 faec 	bl	8007820 <HAL_TIM_IC_CaptureCallback>
 8007248:	e007      	b.n	800725a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	0018      	movs	r0, r3
 800724e:	f000 fadf 	bl	8007810 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	0018      	movs	r0, r3
 8007256:	f000 faeb 	bl	8007830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	2204      	movs	r2, #4
 8007268:	4013      	ands	r3, r2
 800726a:	2b04      	cmp	r3, #4
 800726c:	d125      	bne.n	80072ba <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	2204      	movs	r2, #4
 8007276:	4013      	ands	r3, r2
 8007278:	2b04      	cmp	r3, #4
 800727a:	d11e      	bne.n	80072ba <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2205      	movs	r2, #5
 8007282:	4252      	negs	r2, r2
 8007284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2202      	movs	r2, #2
 800728a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	699a      	ldr	r2, [r3, #24]
 8007292:	23c0      	movs	r3, #192	; 0xc0
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4013      	ands	r3, r2
 8007298:	d004      	beq.n	80072a4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	0018      	movs	r0, r3
 800729e:	f000 fabf 	bl	8007820 <HAL_TIM_IC_CaptureCallback>
 80072a2:	e007      	b.n	80072b4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	0018      	movs	r0, r3
 80072a8:	f000 fab2 	bl	8007810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	0018      	movs	r0, r3
 80072b0:	f000 fabe 	bl	8007830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	2208      	movs	r2, #8
 80072c2:	4013      	ands	r3, r2
 80072c4:	2b08      	cmp	r3, #8
 80072c6:	d124      	bne.n	8007312 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	2208      	movs	r2, #8
 80072d0:	4013      	ands	r3, r2
 80072d2:	2b08      	cmp	r3, #8
 80072d4:	d11d      	bne.n	8007312 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2209      	movs	r2, #9
 80072dc:	4252      	negs	r2, r2
 80072de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2204      	movs	r2, #4
 80072e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	69db      	ldr	r3, [r3, #28]
 80072ec:	2203      	movs	r2, #3
 80072ee:	4013      	ands	r3, r2
 80072f0:	d004      	beq.n	80072fc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	0018      	movs	r0, r3
 80072f6:	f000 fa93 	bl	8007820 <HAL_TIM_IC_CaptureCallback>
 80072fa:	e007      	b.n	800730c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	0018      	movs	r0, r3
 8007300:	f000 fa86 	bl	8007810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	0018      	movs	r0, r3
 8007308:	f000 fa92 	bl	8007830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	2210      	movs	r2, #16
 800731a:	4013      	ands	r3, r2
 800731c:	2b10      	cmp	r3, #16
 800731e:	d125      	bne.n	800736c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	2210      	movs	r2, #16
 8007328:	4013      	ands	r3, r2
 800732a:	2b10      	cmp	r3, #16
 800732c:	d11e      	bne.n	800736c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2211      	movs	r2, #17
 8007334:	4252      	negs	r2, r2
 8007336:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2208      	movs	r2, #8
 800733c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	69da      	ldr	r2, [r3, #28]
 8007344:	23c0      	movs	r3, #192	; 0xc0
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4013      	ands	r3, r2
 800734a:	d004      	beq.n	8007356 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	0018      	movs	r0, r3
 8007350:	f000 fa66 	bl	8007820 <HAL_TIM_IC_CaptureCallback>
 8007354:	e007      	b.n	8007366 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	0018      	movs	r0, r3
 800735a:	f000 fa59 	bl	8007810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	0018      	movs	r0, r3
 8007362:	f000 fa65 	bl	8007830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	2201      	movs	r2, #1
 8007374:	4013      	ands	r3, r2
 8007376:	2b01      	cmp	r3, #1
 8007378:	d10f      	bne.n	800739a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	2201      	movs	r2, #1
 8007382:	4013      	ands	r3, r2
 8007384:	2b01      	cmp	r3, #1
 8007386:	d108      	bne.n	800739a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2202      	movs	r2, #2
 800738e:	4252      	negs	r2, r2
 8007390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	0018      	movs	r0, r3
 8007396:	f7f9 fa47 	bl	8000828 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	2280      	movs	r2, #128	; 0x80
 80073a2:	4013      	ands	r3, r2
 80073a4:	2b80      	cmp	r3, #128	; 0x80
 80073a6:	d10f      	bne.n	80073c8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	2280      	movs	r2, #128	; 0x80
 80073b0:	4013      	ands	r3, r2
 80073b2:	2b80      	cmp	r3, #128	; 0x80
 80073b4:	d108      	bne.n	80073c8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2281      	movs	r2, #129	; 0x81
 80073bc:	4252      	negs	r2, r2
 80073be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	0018      	movs	r0, r3
 80073c4:	f000 ff54 	bl	8008270 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	691a      	ldr	r2, [r3, #16]
 80073ce:	2380      	movs	r3, #128	; 0x80
 80073d0:	005b      	lsls	r3, r3, #1
 80073d2:	401a      	ands	r2, r3
 80073d4:	2380      	movs	r3, #128	; 0x80
 80073d6:	005b      	lsls	r3, r3, #1
 80073d8:	429a      	cmp	r2, r3
 80073da:	d10e      	bne.n	80073fa <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	2280      	movs	r2, #128	; 0x80
 80073e4:	4013      	ands	r3, r2
 80073e6:	2b80      	cmp	r3, #128	; 0x80
 80073e8:	d107      	bne.n	80073fa <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a1c      	ldr	r2, [pc, #112]	; (8007460 <HAL_TIM_IRQHandler+0x260>)
 80073f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	0018      	movs	r0, r3
 80073f6:	f000 ff43 	bl	8008280 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	2240      	movs	r2, #64	; 0x40
 8007402:	4013      	ands	r3, r2
 8007404:	2b40      	cmp	r3, #64	; 0x40
 8007406:	d10f      	bne.n	8007428 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	2240      	movs	r2, #64	; 0x40
 8007410:	4013      	ands	r3, r2
 8007412:	2b40      	cmp	r3, #64	; 0x40
 8007414:	d108      	bne.n	8007428 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2241      	movs	r2, #65	; 0x41
 800741c:	4252      	negs	r2, r2
 800741e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	0018      	movs	r0, r3
 8007424:	f000 fa0c 	bl	8007840 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	2220      	movs	r2, #32
 8007430:	4013      	ands	r3, r2
 8007432:	2b20      	cmp	r3, #32
 8007434:	d10f      	bne.n	8007456 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	2220      	movs	r2, #32
 800743e:	4013      	ands	r3, r2
 8007440:	2b20      	cmp	r3, #32
 8007442:	d108      	bne.n	8007456 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2221      	movs	r2, #33	; 0x21
 800744a:	4252      	negs	r2, r2
 800744c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	0018      	movs	r0, r3
 8007452:	f000 ff05 	bl	8008260 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007456:	46c0      	nop			; (mov r8, r8)
 8007458:	46bd      	mov	sp, r7
 800745a:	b002      	add	sp, #8
 800745c:	bd80      	pop	{r7, pc}
 800745e:	46c0      	nop			; (mov r8, r8)
 8007460:	fffffeff 	.word	0xfffffeff

08007464 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b086      	sub	sp, #24
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007470:	2317      	movs	r3, #23
 8007472:	18fb      	adds	r3, r7, r3
 8007474:	2200      	movs	r2, #0
 8007476:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	223c      	movs	r2, #60	; 0x3c
 800747c:	5c9b      	ldrb	r3, [r3, r2]
 800747e:	2b01      	cmp	r3, #1
 8007480:	d101      	bne.n	8007486 <HAL_TIM_PWM_ConfigChannel+0x22>
 8007482:	2302      	movs	r3, #2
 8007484:	e0e5      	b.n	8007652 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	223c      	movs	r2, #60	; 0x3c
 800748a:	2101      	movs	r1, #1
 800748c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2b14      	cmp	r3, #20
 8007492:	d900      	bls.n	8007496 <HAL_TIM_PWM_ConfigChannel+0x32>
 8007494:	e0d1      	b.n	800763a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	009a      	lsls	r2, r3, #2
 800749a:	4b70      	ldr	r3, [pc, #448]	; (800765c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800749c:	18d3      	adds	r3, r2, r3
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	0011      	movs	r1, r2
 80074aa:	0018      	movs	r0, r3
 80074ac:	f000 fa46 	bl	800793c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	699a      	ldr	r2, [r3, #24]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2108      	movs	r1, #8
 80074bc:	430a      	orrs	r2, r1
 80074be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	699a      	ldr	r2, [r3, #24]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2104      	movs	r1, #4
 80074cc:	438a      	bics	r2, r1
 80074ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6999      	ldr	r1, [r3, #24]
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	691a      	ldr	r2, [r3, #16]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	430a      	orrs	r2, r1
 80074e0:	619a      	str	r2, [r3, #24]
      break;
 80074e2:	e0af      	b.n	8007644 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	0011      	movs	r1, r2
 80074ec:	0018      	movs	r0, r3
 80074ee:	f000 faaf 	bl	8007a50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	699a      	ldr	r2, [r3, #24]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2180      	movs	r1, #128	; 0x80
 80074fe:	0109      	lsls	r1, r1, #4
 8007500:	430a      	orrs	r2, r1
 8007502:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	699a      	ldr	r2, [r3, #24]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4954      	ldr	r1, [pc, #336]	; (8007660 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007510:	400a      	ands	r2, r1
 8007512:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	6999      	ldr	r1, [r3, #24]
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	021a      	lsls	r2, r3, #8
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	430a      	orrs	r2, r1
 8007526:	619a      	str	r2, [r3, #24]
      break;
 8007528:	e08c      	b.n	8007644 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68ba      	ldr	r2, [r7, #8]
 8007530:	0011      	movs	r1, r2
 8007532:	0018      	movs	r0, r3
 8007534:	f000 fb10 	bl	8007b58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	69da      	ldr	r2, [r3, #28]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2108      	movs	r1, #8
 8007544:	430a      	orrs	r2, r1
 8007546:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	69da      	ldr	r2, [r3, #28]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2104      	movs	r1, #4
 8007554:	438a      	bics	r2, r1
 8007556:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	69d9      	ldr	r1, [r3, #28]
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	691a      	ldr	r2, [r3, #16]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	430a      	orrs	r2, r1
 8007568:	61da      	str	r2, [r3, #28]
      break;
 800756a:	e06b      	b.n	8007644 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	0011      	movs	r1, r2
 8007574:	0018      	movs	r0, r3
 8007576:	f000 fb77 	bl	8007c68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	69da      	ldr	r2, [r3, #28]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2180      	movs	r1, #128	; 0x80
 8007586:	0109      	lsls	r1, r1, #4
 8007588:	430a      	orrs	r2, r1
 800758a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	69da      	ldr	r2, [r3, #28]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4932      	ldr	r1, [pc, #200]	; (8007660 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007598:	400a      	ands	r2, r1
 800759a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	69d9      	ldr	r1, [r3, #28]
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	021a      	lsls	r2, r3, #8
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	430a      	orrs	r2, r1
 80075ae:	61da      	str	r2, [r3, #28]
      break;
 80075b0:	e048      	b.n	8007644 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68ba      	ldr	r2, [r7, #8]
 80075b8:	0011      	movs	r1, r2
 80075ba:	0018      	movs	r0, r3
 80075bc:	f000 fbbe 	bl	8007d3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2108      	movs	r1, #8
 80075cc:	430a      	orrs	r2, r1
 80075ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2104      	movs	r1, #4
 80075dc:	438a      	bics	r2, r1
 80075de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	691a      	ldr	r2, [r3, #16]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	430a      	orrs	r2, r1
 80075f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80075f2:	e027      	b.n	8007644 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	0011      	movs	r1, r2
 80075fc:	0018      	movs	r0, r3
 80075fe:	f000 fbfd 	bl	8007dfc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2180      	movs	r1, #128	; 0x80
 800760e:	0109      	lsls	r1, r1, #4
 8007610:	430a      	orrs	r2, r1
 8007612:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4910      	ldr	r1, [pc, #64]	; (8007660 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007620:	400a      	ands	r2, r1
 8007622:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	021a      	lsls	r2, r3, #8
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	430a      	orrs	r2, r1
 8007636:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007638:	e004      	b.n	8007644 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800763a:	2317      	movs	r3, #23
 800763c:	18fb      	adds	r3, r7, r3
 800763e:	2201      	movs	r2, #1
 8007640:	701a      	strb	r2, [r3, #0]
      break;
 8007642:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	223c      	movs	r2, #60	; 0x3c
 8007648:	2100      	movs	r1, #0
 800764a:	5499      	strb	r1, [r3, r2]

  return status;
 800764c:	2317      	movs	r3, #23
 800764e:	18fb      	adds	r3, r7, r3
 8007650:	781b      	ldrb	r3, [r3, #0]
}
 8007652:	0018      	movs	r0, r3
 8007654:	46bd      	mov	sp, r7
 8007656:	b006      	add	sp, #24
 8007658:	bd80      	pop	{r7, pc}
 800765a:	46c0      	nop			; (mov r8, r8)
 800765c:	08008380 	.word	0x08008380
 8007660:	fffffbff 	.word	0xfffffbff

08007664 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800766e:	230f      	movs	r3, #15
 8007670:	18fb      	adds	r3, r7, r3
 8007672:	2200      	movs	r2, #0
 8007674:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	223c      	movs	r2, #60	; 0x3c
 800767a:	5c9b      	ldrb	r3, [r3, r2]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d101      	bne.n	8007684 <HAL_TIM_ConfigClockSource+0x20>
 8007680:	2302      	movs	r3, #2
 8007682:	e0bc      	b.n	80077fe <HAL_TIM_ConfigClockSource+0x19a>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	223c      	movs	r2, #60	; 0x3c
 8007688:	2101      	movs	r1, #1
 800768a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	223d      	movs	r2, #61	; 0x3d
 8007690:	2102      	movs	r1, #2
 8007692:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	4a5a      	ldr	r2, [pc, #360]	; (8007808 <HAL_TIM_ConfigClockSource+0x1a4>)
 80076a0:	4013      	ands	r3, r2
 80076a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	4a59      	ldr	r2, [pc, #356]	; (800780c <HAL_TIM_ConfigClockSource+0x1a8>)
 80076a8:	4013      	ands	r3, r2
 80076aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2280      	movs	r2, #128	; 0x80
 80076ba:	0192      	lsls	r2, r2, #6
 80076bc:	4293      	cmp	r3, r2
 80076be:	d040      	beq.n	8007742 <HAL_TIM_ConfigClockSource+0xde>
 80076c0:	2280      	movs	r2, #128	; 0x80
 80076c2:	0192      	lsls	r2, r2, #6
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d900      	bls.n	80076ca <HAL_TIM_ConfigClockSource+0x66>
 80076c8:	e088      	b.n	80077dc <HAL_TIM_ConfigClockSource+0x178>
 80076ca:	2280      	movs	r2, #128	; 0x80
 80076cc:	0152      	lsls	r2, r2, #5
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d100      	bne.n	80076d4 <HAL_TIM_ConfigClockSource+0x70>
 80076d2:	e088      	b.n	80077e6 <HAL_TIM_ConfigClockSource+0x182>
 80076d4:	2280      	movs	r2, #128	; 0x80
 80076d6:	0152      	lsls	r2, r2, #5
 80076d8:	4293      	cmp	r3, r2
 80076da:	d900      	bls.n	80076de <HAL_TIM_ConfigClockSource+0x7a>
 80076dc:	e07e      	b.n	80077dc <HAL_TIM_ConfigClockSource+0x178>
 80076de:	2b70      	cmp	r3, #112	; 0x70
 80076e0:	d018      	beq.n	8007714 <HAL_TIM_ConfigClockSource+0xb0>
 80076e2:	d900      	bls.n	80076e6 <HAL_TIM_ConfigClockSource+0x82>
 80076e4:	e07a      	b.n	80077dc <HAL_TIM_ConfigClockSource+0x178>
 80076e6:	2b60      	cmp	r3, #96	; 0x60
 80076e8:	d04f      	beq.n	800778a <HAL_TIM_ConfigClockSource+0x126>
 80076ea:	d900      	bls.n	80076ee <HAL_TIM_ConfigClockSource+0x8a>
 80076ec:	e076      	b.n	80077dc <HAL_TIM_ConfigClockSource+0x178>
 80076ee:	2b50      	cmp	r3, #80	; 0x50
 80076f0:	d03b      	beq.n	800776a <HAL_TIM_ConfigClockSource+0x106>
 80076f2:	d900      	bls.n	80076f6 <HAL_TIM_ConfigClockSource+0x92>
 80076f4:	e072      	b.n	80077dc <HAL_TIM_ConfigClockSource+0x178>
 80076f6:	2b40      	cmp	r3, #64	; 0x40
 80076f8:	d057      	beq.n	80077aa <HAL_TIM_ConfigClockSource+0x146>
 80076fa:	d900      	bls.n	80076fe <HAL_TIM_ConfigClockSource+0x9a>
 80076fc:	e06e      	b.n	80077dc <HAL_TIM_ConfigClockSource+0x178>
 80076fe:	2b30      	cmp	r3, #48	; 0x30
 8007700:	d063      	beq.n	80077ca <HAL_TIM_ConfigClockSource+0x166>
 8007702:	d86b      	bhi.n	80077dc <HAL_TIM_ConfigClockSource+0x178>
 8007704:	2b20      	cmp	r3, #32
 8007706:	d060      	beq.n	80077ca <HAL_TIM_ConfigClockSource+0x166>
 8007708:	d868      	bhi.n	80077dc <HAL_TIM_ConfigClockSource+0x178>
 800770a:	2b00      	cmp	r3, #0
 800770c:	d05d      	beq.n	80077ca <HAL_TIM_ConfigClockSource+0x166>
 800770e:	2b10      	cmp	r3, #16
 8007710:	d05b      	beq.n	80077ca <HAL_TIM_ConfigClockSource+0x166>
 8007712:	e063      	b.n	80077dc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007724:	f000 fc4a 	bl	8007fbc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	2277      	movs	r2, #119	; 0x77
 8007734:	4313      	orrs	r3, r2
 8007736:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68ba      	ldr	r2, [r7, #8]
 800773e:	609a      	str	r2, [r3, #8]
      break;
 8007740:	e052      	b.n	80077e8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007752:	f000 fc33 	bl	8007fbc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	689a      	ldr	r2, [r3, #8]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2180      	movs	r1, #128	; 0x80
 8007762:	01c9      	lsls	r1, r1, #7
 8007764:	430a      	orrs	r2, r1
 8007766:	609a      	str	r2, [r3, #8]
      break;
 8007768:	e03e      	b.n	80077e8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007776:	001a      	movs	r2, r3
 8007778:	f000 fba4 	bl	8007ec4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2150      	movs	r1, #80	; 0x50
 8007782:	0018      	movs	r0, r3
 8007784:	f000 fbfe 	bl	8007f84 <TIM_ITRx_SetConfig>
      break;
 8007788:	e02e      	b.n	80077e8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007796:	001a      	movs	r2, r3
 8007798:	f000 fbc2 	bl	8007f20 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2160      	movs	r1, #96	; 0x60
 80077a2:	0018      	movs	r0, r3
 80077a4:	f000 fbee 	bl	8007f84 <TIM_ITRx_SetConfig>
      break;
 80077a8:	e01e      	b.n	80077e8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077b6:	001a      	movs	r2, r3
 80077b8:	f000 fb84 	bl	8007ec4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2140      	movs	r1, #64	; 0x40
 80077c2:	0018      	movs	r0, r3
 80077c4:	f000 fbde 	bl	8007f84 <TIM_ITRx_SetConfig>
      break;
 80077c8:	e00e      	b.n	80077e8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	0019      	movs	r1, r3
 80077d4:	0010      	movs	r0, r2
 80077d6:	f000 fbd5 	bl	8007f84 <TIM_ITRx_SetConfig>
      break;
 80077da:	e005      	b.n	80077e8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80077dc:	230f      	movs	r3, #15
 80077de:	18fb      	adds	r3, r7, r3
 80077e0:	2201      	movs	r2, #1
 80077e2:	701a      	strb	r2, [r3, #0]
      break;
 80077e4:	e000      	b.n	80077e8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80077e6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	223d      	movs	r2, #61	; 0x3d
 80077ec:	2101      	movs	r1, #1
 80077ee:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	223c      	movs	r2, #60	; 0x3c
 80077f4:	2100      	movs	r1, #0
 80077f6:	5499      	strb	r1, [r3, r2]

  return status;
 80077f8:	230f      	movs	r3, #15
 80077fa:	18fb      	adds	r3, r7, r3
 80077fc:	781b      	ldrb	r3, [r3, #0]
}
 80077fe:	0018      	movs	r0, r3
 8007800:	46bd      	mov	sp, r7
 8007802:	b004      	add	sp, #16
 8007804:	bd80      	pop	{r7, pc}
 8007806:	46c0      	nop			; (mov r8, r8)
 8007808:	ffceff88 	.word	0xffceff88
 800780c:	ffff00ff 	.word	0xffff00ff

08007810 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007818:	46c0      	nop			; (mov r8, r8)
 800781a:	46bd      	mov	sp, r7
 800781c:	b002      	add	sp, #8
 800781e:	bd80      	pop	{r7, pc}

08007820 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007828:	46c0      	nop			; (mov r8, r8)
 800782a:	46bd      	mov	sp, r7
 800782c:	b002      	add	sp, #8
 800782e:	bd80      	pop	{r7, pc}

08007830 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007838:	46c0      	nop			; (mov r8, r8)
 800783a:	46bd      	mov	sp, r7
 800783c:	b002      	add	sp, #8
 800783e:	bd80      	pop	{r7, pc}

08007840 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007848:	46c0      	nop			; (mov r8, r8)
 800784a:	46bd      	mov	sp, r7
 800784c:	b002      	add	sp, #8
 800784e:	bd80      	pop	{r7, pc}

08007850 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4a2f      	ldr	r2, [pc, #188]	; (8007920 <TIM_Base_SetConfig+0xd0>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d003      	beq.n	8007870 <TIM_Base_SetConfig+0x20>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a2e      	ldr	r2, [pc, #184]	; (8007924 <TIM_Base_SetConfig+0xd4>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d108      	bne.n	8007882 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2270      	movs	r2, #112	; 0x70
 8007874:	4393      	bics	r3, r2
 8007876:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	4313      	orrs	r3, r2
 8007880:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a26      	ldr	r2, [pc, #152]	; (8007920 <TIM_Base_SetConfig+0xd0>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d013      	beq.n	80078b2 <TIM_Base_SetConfig+0x62>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a25      	ldr	r2, [pc, #148]	; (8007924 <TIM_Base_SetConfig+0xd4>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d00f      	beq.n	80078b2 <TIM_Base_SetConfig+0x62>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a24      	ldr	r2, [pc, #144]	; (8007928 <TIM_Base_SetConfig+0xd8>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d00b      	beq.n	80078b2 <TIM_Base_SetConfig+0x62>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a23      	ldr	r2, [pc, #140]	; (800792c <TIM_Base_SetConfig+0xdc>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d007      	beq.n	80078b2 <TIM_Base_SetConfig+0x62>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a22      	ldr	r2, [pc, #136]	; (8007930 <TIM_Base_SetConfig+0xe0>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d003      	beq.n	80078b2 <TIM_Base_SetConfig+0x62>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a21      	ldr	r2, [pc, #132]	; (8007934 <TIM_Base_SetConfig+0xe4>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d108      	bne.n	80078c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	4a20      	ldr	r2, [pc, #128]	; (8007938 <TIM_Base_SetConfig+0xe8>)
 80078b6:	4013      	ands	r3, r2
 80078b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2280      	movs	r2, #128	; 0x80
 80078c8:	4393      	bics	r3, r2
 80078ca:	001a      	movs	r2, r3
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	695b      	ldr	r3, [r3, #20]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	689a      	ldr	r2, [r3, #8]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a0c      	ldr	r2, [pc, #48]	; (8007920 <TIM_Base_SetConfig+0xd0>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d00b      	beq.n	800790a <TIM_Base_SetConfig+0xba>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a0d      	ldr	r2, [pc, #52]	; (800792c <TIM_Base_SetConfig+0xdc>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d007      	beq.n	800790a <TIM_Base_SetConfig+0xba>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a0c      	ldr	r2, [pc, #48]	; (8007930 <TIM_Base_SetConfig+0xe0>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d003      	beq.n	800790a <TIM_Base_SetConfig+0xba>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a0b      	ldr	r2, [pc, #44]	; (8007934 <TIM_Base_SetConfig+0xe4>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d103      	bne.n	8007912 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	691a      	ldr	r2, [r3, #16]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2201      	movs	r2, #1
 8007916:	615a      	str	r2, [r3, #20]
}
 8007918:	46c0      	nop			; (mov r8, r8)
 800791a:	46bd      	mov	sp, r7
 800791c:	b004      	add	sp, #16
 800791e:	bd80      	pop	{r7, pc}
 8007920:	40012c00 	.word	0x40012c00
 8007924:	40000400 	.word	0x40000400
 8007928:	40002000 	.word	0x40002000
 800792c:	40014000 	.word	0x40014000
 8007930:	40014400 	.word	0x40014400
 8007934:	40014800 	.word	0x40014800
 8007938:	fffffcff 	.word	0xfffffcff

0800793c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b086      	sub	sp, #24
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	2201      	movs	r2, #1
 800794c:	4393      	bics	r3, r2
 800794e:	001a      	movs	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6a1b      	ldr	r3, [r3, #32]
 8007958:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	4a32      	ldr	r2, [pc, #200]	; (8007a34 <TIM_OC1_SetConfig+0xf8>)
 800796a:	4013      	ands	r3, r2
 800796c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2203      	movs	r2, #3
 8007972:	4393      	bics	r3, r2
 8007974:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	4313      	orrs	r3, r2
 800797e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	2202      	movs	r2, #2
 8007984:	4393      	bics	r3, r2
 8007986:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	697a      	ldr	r2, [r7, #20]
 800798e:	4313      	orrs	r3, r2
 8007990:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a28      	ldr	r2, [pc, #160]	; (8007a38 <TIM_OC1_SetConfig+0xfc>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d00b      	beq.n	80079b2 <TIM_OC1_SetConfig+0x76>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a27      	ldr	r2, [pc, #156]	; (8007a3c <TIM_OC1_SetConfig+0x100>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d007      	beq.n	80079b2 <TIM_OC1_SetConfig+0x76>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a26      	ldr	r2, [pc, #152]	; (8007a40 <TIM_OC1_SetConfig+0x104>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d003      	beq.n	80079b2 <TIM_OC1_SetConfig+0x76>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a25      	ldr	r2, [pc, #148]	; (8007a44 <TIM_OC1_SetConfig+0x108>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d10c      	bne.n	80079cc <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	2208      	movs	r2, #8
 80079b6:	4393      	bics	r3, r2
 80079b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	2204      	movs	r2, #4
 80079c8:	4393      	bics	r3, r2
 80079ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a1a      	ldr	r2, [pc, #104]	; (8007a38 <TIM_OC1_SetConfig+0xfc>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d00b      	beq.n	80079ec <TIM_OC1_SetConfig+0xb0>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a19      	ldr	r2, [pc, #100]	; (8007a3c <TIM_OC1_SetConfig+0x100>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d007      	beq.n	80079ec <TIM_OC1_SetConfig+0xb0>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a18      	ldr	r2, [pc, #96]	; (8007a40 <TIM_OC1_SetConfig+0x104>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d003      	beq.n	80079ec <TIM_OC1_SetConfig+0xb0>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a17      	ldr	r2, [pc, #92]	; (8007a44 <TIM_OC1_SetConfig+0x108>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d111      	bne.n	8007a10 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	4a16      	ldr	r2, [pc, #88]	; (8007a48 <TIM_OC1_SetConfig+0x10c>)
 80079f0:	4013      	ands	r3, r2
 80079f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	4a15      	ldr	r2, [pc, #84]	; (8007a4c <TIM_OC1_SetConfig+0x110>)
 80079f8:	4013      	ands	r3, r2
 80079fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	695b      	ldr	r3, [r3, #20]
 8007a00:	693a      	ldr	r2, [r7, #16]
 8007a02:	4313      	orrs	r3, r2
 8007a04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	693a      	ldr	r2, [r7, #16]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	685a      	ldr	r2, [r3, #4]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	621a      	str	r2, [r3, #32]
}
 8007a2a:	46c0      	nop			; (mov r8, r8)
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	b006      	add	sp, #24
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	46c0      	nop			; (mov r8, r8)
 8007a34:	fffeff8f 	.word	0xfffeff8f
 8007a38:	40012c00 	.word	0x40012c00
 8007a3c:	40014000 	.word	0x40014000
 8007a40:	40014400 	.word	0x40014400
 8007a44:	40014800 	.word	0x40014800
 8007a48:	fffffeff 	.word	0xfffffeff
 8007a4c:	fffffdff 	.word	0xfffffdff

08007a50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a1b      	ldr	r3, [r3, #32]
 8007a5e:	2210      	movs	r2, #16
 8007a60:	4393      	bics	r3, r2
 8007a62:	001a      	movs	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a1b      	ldr	r3, [r3, #32]
 8007a6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	4a2e      	ldr	r2, [pc, #184]	; (8007b38 <TIM_OC2_SetConfig+0xe8>)
 8007a7e:	4013      	ands	r3, r2
 8007a80:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	4a2d      	ldr	r2, [pc, #180]	; (8007b3c <TIM_OC2_SetConfig+0xec>)
 8007a86:	4013      	ands	r3, r2
 8007a88:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	021b      	lsls	r3, r3, #8
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	2220      	movs	r2, #32
 8007a9a:	4393      	bics	r3, r2
 8007a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	011b      	lsls	r3, r3, #4
 8007aa4:	697a      	ldr	r2, [r7, #20]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a24      	ldr	r2, [pc, #144]	; (8007b40 <TIM_OC2_SetConfig+0xf0>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d10d      	bne.n	8007ace <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	2280      	movs	r2, #128	; 0x80
 8007ab6:	4393      	bics	r3, r2
 8007ab8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	011b      	lsls	r3, r3, #4
 8007ac0:	697a      	ldr	r2, [r7, #20]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	2240      	movs	r2, #64	; 0x40
 8007aca:	4393      	bics	r3, r2
 8007acc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a1b      	ldr	r2, [pc, #108]	; (8007b40 <TIM_OC2_SetConfig+0xf0>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d00b      	beq.n	8007aee <TIM_OC2_SetConfig+0x9e>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a1a      	ldr	r2, [pc, #104]	; (8007b44 <TIM_OC2_SetConfig+0xf4>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d007      	beq.n	8007aee <TIM_OC2_SetConfig+0x9e>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a19      	ldr	r2, [pc, #100]	; (8007b48 <TIM_OC2_SetConfig+0xf8>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d003      	beq.n	8007aee <TIM_OC2_SetConfig+0x9e>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a18      	ldr	r2, [pc, #96]	; (8007b4c <TIM_OC2_SetConfig+0xfc>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d113      	bne.n	8007b16 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	4a17      	ldr	r2, [pc, #92]	; (8007b50 <TIM_OC2_SetConfig+0x100>)
 8007af2:	4013      	ands	r3, r2
 8007af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	4a16      	ldr	r2, [pc, #88]	; (8007b54 <TIM_OC2_SetConfig+0x104>)
 8007afa:	4013      	ands	r3, r2
 8007afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	693a      	ldr	r2, [r7, #16]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	693a      	ldr	r2, [r7, #16]
 8007b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	68fa      	ldr	r2, [r7, #12]
 8007b20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	685a      	ldr	r2, [r3, #4]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	697a      	ldr	r2, [r7, #20]
 8007b2e:	621a      	str	r2, [r3, #32]
}
 8007b30:	46c0      	nop			; (mov r8, r8)
 8007b32:	46bd      	mov	sp, r7
 8007b34:	b006      	add	sp, #24
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	feff8fff 	.word	0xfeff8fff
 8007b3c:	fffffcff 	.word	0xfffffcff
 8007b40:	40012c00 	.word	0x40012c00
 8007b44:	40014000 	.word	0x40014000
 8007b48:	40014400 	.word	0x40014400
 8007b4c:	40014800 	.word	0x40014800
 8007b50:	fffffbff 	.word	0xfffffbff
 8007b54:	fffff7ff 	.word	0xfffff7ff

08007b58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b086      	sub	sp, #24
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a1b      	ldr	r3, [r3, #32]
 8007b66:	4a35      	ldr	r2, [pc, #212]	; (8007c3c <TIM_OC3_SetConfig+0xe4>)
 8007b68:	401a      	ands	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	69db      	ldr	r3, [r3, #28]
 8007b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	4a2f      	ldr	r2, [pc, #188]	; (8007c40 <TIM_OC3_SetConfig+0xe8>)
 8007b84:	4013      	ands	r3, r2
 8007b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2203      	movs	r2, #3
 8007b8c:	4393      	bics	r3, r2
 8007b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	4a29      	ldr	r2, [pc, #164]	; (8007c44 <TIM_OC3_SetConfig+0xec>)
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	021b      	lsls	r3, r3, #8
 8007ba8:	697a      	ldr	r2, [r7, #20]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a25      	ldr	r2, [pc, #148]	; (8007c48 <TIM_OC3_SetConfig+0xf0>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d10d      	bne.n	8007bd2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	4a24      	ldr	r2, [pc, #144]	; (8007c4c <TIM_OC3_SetConfig+0xf4>)
 8007bba:	4013      	ands	r3, r2
 8007bbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	021b      	lsls	r3, r3, #8
 8007bc4:	697a      	ldr	r2, [r7, #20]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	4a20      	ldr	r2, [pc, #128]	; (8007c50 <TIM_OC3_SetConfig+0xf8>)
 8007bce:	4013      	ands	r3, r2
 8007bd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a1c      	ldr	r2, [pc, #112]	; (8007c48 <TIM_OC3_SetConfig+0xf0>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d00b      	beq.n	8007bf2 <TIM_OC3_SetConfig+0x9a>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4a1d      	ldr	r2, [pc, #116]	; (8007c54 <TIM_OC3_SetConfig+0xfc>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d007      	beq.n	8007bf2 <TIM_OC3_SetConfig+0x9a>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a1c      	ldr	r2, [pc, #112]	; (8007c58 <TIM_OC3_SetConfig+0x100>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d003      	beq.n	8007bf2 <TIM_OC3_SetConfig+0x9a>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a1b      	ldr	r2, [pc, #108]	; (8007c5c <TIM_OC3_SetConfig+0x104>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d113      	bne.n	8007c1a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	4a1a      	ldr	r2, [pc, #104]	; (8007c60 <TIM_OC3_SetConfig+0x108>)
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	4a19      	ldr	r2, [pc, #100]	; (8007c64 <TIM_OC3_SetConfig+0x10c>)
 8007bfe:	4013      	ands	r3, r2
 8007c00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	695b      	ldr	r3, [r3, #20]
 8007c06:	011b      	lsls	r3, r3, #4
 8007c08:	693a      	ldr	r2, [r7, #16]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	699b      	ldr	r3, [r3, #24]
 8007c12:	011b      	lsls	r3, r3, #4
 8007c14:	693a      	ldr	r2, [r7, #16]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	697a      	ldr	r2, [r7, #20]
 8007c32:	621a      	str	r2, [r3, #32]
}
 8007c34:	46c0      	nop			; (mov r8, r8)
 8007c36:	46bd      	mov	sp, r7
 8007c38:	b006      	add	sp, #24
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	fffffeff 	.word	0xfffffeff
 8007c40:	fffeff8f 	.word	0xfffeff8f
 8007c44:	fffffdff 	.word	0xfffffdff
 8007c48:	40012c00 	.word	0x40012c00
 8007c4c:	fffff7ff 	.word	0xfffff7ff
 8007c50:	fffffbff 	.word	0xfffffbff
 8007c54:	40014000 	.word	0x40014000
 8007c58:	40014400 	.word	0x40014400
 8007c5c:	40014800 	.word	0x40014800
 8007c60:	ffffefff 	.word	0xffffefff
 8007c64:	ffffdfff 	.word	0xffffdfff

08007c68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b086      	sub	sp, #24
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a1b      	ldr	r3, [r3, #32]
 8007c76:	4a28      	ldr	r2, [pc, #160]	; (8007d18 <TIM_OC4_SetConfig+0xb0>)
 8007c78:	401a      	ands	r2, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	69db      	ldr	r3, [r3, #28]
 8007c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	4a22      	ldr	r2, [pc, #136]	; (8007d1c <TIM_OC4_SetConfig+0xb4>)
 8007c94:	4013      	ands	r3, r2
 8007c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	4a21      	ldr	r2, [pc, #132]	; (8007d20 <TIM_OC4_SetConfig+0xb8>)
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	021b      	lsls	r3, r3, #8
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	4a1d      	ldr	r2, [pc, #116]	; (8007d24 <TIM_OC4_SetConfig+0xbc>)
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	031b      	lsls	r3, r3, #12
 8007cba:	693a      	ldr	r2, [r7, #16]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a19      	ldr	r2, [pc, #100]	; (8007d28 <TIM_OC4_SetConfig+0xc0>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d00b      	beq.n	8007ce0 <TIM_OC4_SetConfig+0x78>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a18      	ldr	r2, [pc, #96]	; (8007d2c <TIM_OC4_SetConfig+0xc4>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d007      	beq.n	8007ce0 <TIM_OC4_SetConfig+0x78>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a17      	ldr	r2, [pc, #92]	; (8007d30 <TIM_OC4_SetConfig+0xc8>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d003      	beq.n	8007ce0 <TIM_OC4_SetConfig+0x78>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a16      	ldr	r2, [pc, #88]	; (8007d34 <TIM_OC4_SetConfig+0xcc>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d109      	bne.n	8007cf4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	4a15      	ldr	r2, [pc, #84]	; (8007d38 <TIM_OC4_SetConfig+0xd0>)
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	695b      	ldr	r3, [r3, #20]
 8007cec:	019b      	lsls	r3, r3, #6
 8007cee:	697a      	ldr	r2, [r7, #20]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	697a      	ldr	r2, [r7, #20]
 8007cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	685a      	ldr	r2, [r3, #4]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	693a      	ldr	r2, [r7, #16]
 8007d0c:	621a      	str	r2, [r3, #32]
}
 8007d0e:	46c0      	nop			; (mov r8, r8)
 8007d10:	46bd      	mov	sp, r7
 8007d12:	b006      	add	sp, #24
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	46c0      	nop			; (mov r8, r8)
 8007d18:	ffffefff 	.word	0xffffefff
 8007d1c:	feff8fff 	.word	0xfeff8fff
 8007d20:	fffffcff 	.word	0xfffffcff
 8007d24:	ffffdfff 	.word	0xffffdfff
 8007d28:	40012c00 	.word	0x40012c00
 8007d2c:	40014000 	.word	0x40014000
 8007d30:	40014400 	.word	0x40014400
 8007d34:	40014800 	.word	0x40014800
 8007d38:	ffffbfff 	.word	0xffffbfff

08007d3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b086      	sub	sp, #24
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a1b      	ldr	r3, [r3, #32]
 8007d4a:	4a25      	ldr	r2, [pc, #148]	; (8007de0 <TIM_OC5_SetConfig+0xa4>)
 8007d4c:	401a      	ands	r2, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a1b      	ldr	r3, [r3, #32]
 8007d56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	4a1f      	ldr	r2, [pc, #124]	; (8007de4 <TIM_OC5_SetConfig+0xa8>)
 8007d68:	4013      	ands	r3, r2
 8007d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	4a1b      	ldr	r2, [pc, #108]	; (8007de8 <TIM_OC5_SetConfig+0xac>)
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	041b      	lsls	r3, r3, #16
 8007d84:	693a      	ldr	r2, [r7, #16]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a17      	ldr	r2, [pc, #92]	; (8007dec <TIM_OC5_SetConfig+0xb0>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d00b      	beq.n	8007daa <TIM_OC5_SetConfig+0x6e>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a16      	ldr	r2, [pc, #88]	; (8007df0 <TIM_OC5_SetConfig+0xb4>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d007      	beq.n	8007daa <TIM_OC5_SetConfig+0x6e>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a15      	ldr	r2, [pc, #84]	; (8007df4 <TIM_OC5_SetConfig+0xb8>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d003      	beq.n	8007daa <TIM_OC5_SetConfig+0x6e>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a14      	ldr	r2, [pc, #80]	; (8007df8 <TIM_OC5_SetConfig+0xbc>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d109      	bne.n	8007dbe <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	4a0c      	ldr	r2, [pc, #48]	; (8007de0 <TIM_OC5_SetConfig+0xa4>)
 8007dae:	4013      	ands	r3, r2
 8007db0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	695b      	ldr	r3, [r3, #20]
 8007db6:	021b      	lsls	r3, r3, #8
 8007db8:	697a      	ldr	r2, [r7, #20]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	697a      	ldr	r2, [r7, #20]
 8007dc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	685a      	ldr	r2, [r3, #4]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	693a      	ldr	r2, [r7, #16]
 8007dd6:	621a      	str	r2, [r3, #32]
}
 8007dd8:	46c0      	nop			; (mov r8, r8)
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	b006      	add	sp, #24
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	fffeffff 	.word	0xfffeffff
 8007de4:	fffeff8f 	.word	0xfffeff8f
 8007de8:	fffdffff 	.word	0xfffdffff
 8007dec:	40012c00 	.word	0x40012c00
 8007df0:	40014000 	.word	0x40014000
 8007df4:	40014400 	.word	0x40014400
 8007df8:	40014800 	.word	0x40014800

08007dfc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b086      	sub	sp, #24
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a1b      	ldr	r3, [r3, #32]
 8007e0a:	4a26      	ldr	r2, [pc, #152]	; (8007ea4 <TIM_OC6_SetConfig+0xa8>)
 8007e0c:	401a      	ands	r2, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6a1b      	ldr	r3, [r3, #32]
 8007e16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	4a20      	ldr	r2, [pc, #128]	; (8007ea8 <TIM_OC6_SetConfig+0xac>)
 8007e28:	4013      	ands	r3, r2
 8007e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	021b      	lsls	r3, r3, #8
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	4a1c      	ldr	r2, [pc, #112]	; (8007eac <TIM_OC6_SetConfig+0xb0>)
 8007e3c:	4013      	ands	r3, r2
 8007e3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	051b      	lsls	r3, r3, #20
 8007e46:	693a      	ldr	r2, [r7, #16]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a18      	ldr	r2, [pc, #96]	; (8007eb0 <TIM_OC6_SetConfig+0xb4>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d00b      	beq.n	8007e6c <TIM_OC6_SetConfig+0x70>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a17      	ldr	r2, [pc, #92]	; (8007eb4 <TIM_OC6_SetConfig+0xb8>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d007      	beq.n	8007e6c <TIM_OC6_SetConfig+0x70>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a16      	ldr	r2, [pc, #88]	; (8007eb8 <TIM_OC6_SetConfig+0xbc>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d003      	beq.n	8007e6c <TIM_OC6_SetConfig+0x70>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4a15      	ldr	r2, [pc, #84]	; (8007ebc <TIM_OC6_SetConfig+0xc0>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d109      	bne.n	8007e80 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	4a14      	ldr	r2, [pc, #80]	; (8007ec0 <TIM_OC6_SetConfig+0xc4>)
 8007e70:	4013      	ands	r3, r2
 8007e72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	695b      	ldr	r3, [r3, #20]
 8007e78:	029b      	lsls	r3, r3, #10
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	685a      	ldr	r2, [r3, #4]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	621a      	str	r2, [r3, #32]
}
 8007e9a:	46c0      	nop			; (mov r8, r8)
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	b006      	add	sp, #24
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	46c0      	nop			; (mov r8, r8)
 8007ea4:	ffefffff 	.word	0xffefffff
 8007ea8:	feff8fff 	.word	0xfeff8fff
 8007eac:	ffdfffff 	.word	0xffdfffff
 8007eb0:	40012c00 	.word	0x40012c00
 8007eb4:	40014000 	.word	0x40014000
 8007eb8:	40014400 	.word	0x40014400
 8007ebc:	40014800 	.word	0x40014800
 8007ec0:	fffbffff 	.word	0xfffbffff

08007ec4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b086      	sub	sp, #24
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6a1b      	ldr	r3, [r3, #32]
 8007ed4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	2201      	movs	r2, #1
 8007edc:	4393      	bics	r3, r2
 8007ede:	001a      	movs	r2, r3
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	699b      	ldr	r3, [r3, #24]
 8007ee8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	22f0      	movs	r2, #240	; 0xf0
 8007eee:	4393      	bics	r3, r2
 8007ef0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	011b      	lsls	r3, r3, #4
 8007ef6:	693a      	ldr	r2, [r7, #16]
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	220a      	movs	r2, #10
 8007f00:	4393      	bics	r3, r2
 8007f02:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f04:	697a      	ldr	r2, [r7, #20]
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	693a      	ldr	r2, [r7, #16]
 8007f10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	621a      	str	r2, [r3, #32]
}
 8007f18:	46c0      	nop			; (mov r8, r8)
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	b006      	add	sp, #24
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b086      	sub	sp, #24
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6a1b      	ldr	r3, [r3, #32]
 8007f30:	2210      	movs	r2, #16
 8007f32:	4393      	bics	r3, r2
 8007f34:	001a      	movs	r2, r3
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	699b      	ldr	r3, [r3, #24]
 8007f3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6a1b      	ldr	r3, [r3, #32]
 8007f44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	4a0d      	ldr	r2, [pc, #52]	; (8007f80 <TIM_TI2_ConfigInputStage+0x60>)
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	031b      	lsls	r3, r3, #12
 8007f52:	697a      	ldr	r2, [r7, #20]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	22a0      	movs	r2, #160	; 0xa0
 8007f5c:	4393      	bics	r3, r2
 8007f5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	011b      	lsls	r3, r3, #4
 8007f64:	693a      	ldr	r2, [r7, #16]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	697a      	ldr	r2, [r7, #20]
 8007f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	693a      	ldr	r2, [r7, #16]
 8007f74:	621a      	str	r2, [r3, #32]
}
 8007f76:	46c0      	nop			; (mov r8, r8)
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	b006      	add	sp, #24
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	46c0      	nop			; (mov r8, r8)
 8007f80:	ffff0fff 	.word	0xffff0fff

08007f84 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	4a08      	ldr	r2, [pc, #32]	; (8007fb8 <TIM_ITRx_SetConfig+0x34>)
 8007f98:	4013      	ands	r3, r2
 8007f9a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f9c:	683a      	ldr	r2, [r7, #0]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	2207      	movs	r2, #7
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	609a      	str	r2, [r3, #8]
}
 8007fae:	46c0      	nop			; (mov r8, r8)
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	b004      	add	sp, #16
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	46c0      	nop			; (mov r8, r8)
 8007fb8:	ffcfff8f 	.word	0xffcfff8f

08007fbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b086      	sub	sp, #24
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
 8007fc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	4a09      	ldr	r2, [pc, #36]	; (8007ff8 <TIM_ETR_SetConfig+0x3c>)
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	021a      	lsls	r2, r3, #8
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	431a      	orrs	r2, r3
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	697a      	ldr	r2, [r7, #20]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	697a      	ldr	r2, [r7, #20]
 8007fee:	609a      	str	r2, [r3, #8]
}
 8007ff0:	46c0      	nop			; (mov r8, r8)
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	b006      	add	sp, #24
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	ffff00ff 	.word	0xffff00ff

08007ffc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b086      	sub	sp, #24
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	221f      	movs	r2, #31
 800800c:	4013      	ands	r3, r2
 800800e:	2201      	movs	r2, #1
 8008010:	409a      	lsls	r2, r3
 8008012:	0013      	movs	r3, r2
 8008014:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6a1b      	ldr	r3, [r3, #32]
 800801a:	697a      	ldr	r2, [r7, #20]
 800801c:	43d2      	mvns	r2, r2
 800801e:	401a      	ands	r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6a1a      	ldr	r2, [r3, #32]
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	211f      	movs	r1, #31
 800802c:	400b      	ands	r3, r1
 800802e:	6879      	ldr	r1, [r7, #4]
 8008030:	4099      	lsls	r1, r3
 8008032:	000b      	movs	r3, r1
 8008034:	431a      	orrs	r2, r3
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	621a      	str	r2, [r3, #32]
}
 800803a:	46c0      	nop			; (mov r8, r8)
 800803c:	46bd      	mov	sp, r7
 800803e:	b006      	add	sp, #24
 8008040:	bd80      	pop	{r7, pc}
	...

08008044 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	223c      	movs	r2, #60	; 0x3c
 8008052:	5c9b      	ldrb	r3, [r3, r2]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d101      	bne.n	800805c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008058:	2302      	movs	r3, #2
 800805a:	e04f      	b.n	80080fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	223c      	movs	r2, #60	; 0x3c
 8008060:	2101      	movs	r1, #1
 8008062:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	223d      	movs	r2, #61	; 0x3d
 8008068:	2102      	movs	r1, #2
 800806a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a20      	ldr	r2, [pc, #128]	; (8008104 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d108      	bne.n	8008098 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	4a1f      	ldr	r2, [pc, #124]	; (8008108 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800808a:	4013      	ands	r3, r2
 800808c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	4313      	orrs	r3, r2
 8008096:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2270      	movs	r2, #112	; 0x70
 800809c:	4393      	bics	r3, r2
 800809e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a13      	ldr	r2, [pc, #76]	; (8008104 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d009      	beq.n	80080d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a12      	ldr	r2, [pc, #72]	; (800810c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d004      	beq.n	80080d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a11      	ldr	r2, [pc, #68]	; (8008110 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d10c      	bne.n	80080ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	2280      	movs	r2, #128	; 0x80
 80080d4:	4393      	bics	r3, r2
 80080d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	4313      	orrs	r3, r2
 80080e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	68ba      	ldr	r2, [r7, #8]
 80080e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	223d      	movs	r2, #61	; 0x3d
 80080ee:	2101      	movs	r1, #1
 80080f0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	223c      	movs	r2, #60	; 0x3c
 80080f6:	2100      	movs	r1, #0
 80080f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	0018      	movs	r0, r3
 80080fe:	46bd      	mov	sp, r7
 8008100:	b004      	add	sp, #16
 8008102:	bd80      	pop	{r7, pc}
 8008104:	40012c00 	.word	0x40012c00
 8008108:	ff0fffff 	.word	0xff0fffff
 800810c:	40000400 	.word	0x40000400
 8008110:	40014000 	.word	0x40014000

08008114 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800811e:	2300      	movs	r3, #0
 8008120:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	223c      	movs	r2, #60	; 0x3c
 8008126:	5c9b      	ldrb	r3, [r3, r2]
 8008128:	2b01      	cmp	r3, #1
 800812a:	d101      	bne.n	8008130 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800812c:	2302      	movs	r3, #2
 800812e:	e079      	b.n	8008224 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	223c      	movs	r2, #60	; 0x3c
 8008134:	2101      	movs	r1, #1
 8008136:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	22ff      	movs	r2, #255	; 0xff
 800813c:	4393      	bics	r3, r2
 800813e:	001a      	movs	r2, r3
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	4313      	orrs	r3, r2
 8008146:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	4a38      	ldr	r2, [pc, #224]	; (800822c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800814c:	401a      	ands	r2, r3
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	4313      	orrs	r3, r2
 8008154:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	4a35      	ldr	r2, [pc, #212]	; (8008230 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800815a:	401a      	ands	r2, r3
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	4313      	orrs	r3, r2
 8008162:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	4a33      	ldr	r2, [pc, #204]	; (8008234 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008168:	401a      	ands	r2, r3
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4313      	orrs	r3, r2
 8008170:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	4a30      	ldr	r2, [pc, #192]	; (8008238 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008176:	401a      	ands	r2, r3
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	4313      	orrs	r3, r2
 800817e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	4a2e      	ldr	r2, [pc, #184]	; (800823c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8008184:	401a      	ands	r2, r3
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	695b      	ldr	r3, [r3, #20]
 800818a:	4313      	orrs	r3, r2
 800818c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	4a2b      	ldr	r2, [pc, #172]	; (8008240 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8008192:	401a      	ands	r2, r3
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008198:	4313      	orrs	r3, r2
 800819a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	4a29      	ldr	r2, [pc, #164]	; (8008244 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80081a0:	401a      	ands	r2, r3
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	041b      	lsls	r3, r3, #16
 80081a8:	4313      	orrs	r3, r2
 80081aa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a25      	ldr	r2, [pc, #148]	; (8008248 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d106      	bne.n	80081c4 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	4a24      	ldr	r2, [pc, #144]	; (800824c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80081ba:	401a      	ands	r2, r3
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	69db      	ldr	r3, [r3, #28]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a1f      	ldr	r2, [pc, #124]	; (8008248 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d121      	bne.n	8008212 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	4a1f      	ldr	r2, [pc, #124]	; (8008250 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80081d2:	401a      	ands	r2, r3
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d8:	051b      	lsls	r3, r3, #20
 80081da:	4313      	orrs	r3, r2
 80081dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	4a1c      	ldr	r2, [pc, #112]	; (8008254 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 80081e2:	401a      	ands	r2, r3
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	6a1b      	ldr	r3, [r3, #32]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	4a1a      	ldr	r2, [pc, #104]	; (8008258 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 80081f0:	401a      	ands	r2, r3
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f6:	4313      	orrs	r3, r2
 80081f8:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a12      	ldr	r2, [pc, #72]	; (8008248 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d106      	bne.n	8008212 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	4a15      	ldr	r2, [pc, #84]	; (800825c <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8008208:	401a      	ands	r2, r3
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820e:	4313      	orrs	r3, r2
 8008210:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	68fa      	ldr	r2, [r7, #12]
 8008218:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	223c      	movs	r2, #60	; 0x3c
 800821e:	2100      	movs	r1, #0
 8008220:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	0018      	movs	r0, r3
 8008226:	46bd      	mov	sp, r7
 8008228:	b004      	add	sp, #16
 800822a:	bd80      	pop	{r7, pc}
 800822c:	fffffcff 	.word	0xfffffcff
 8008230:	fffffbff 	.word	0xfffffbff
 8008234:	fffff7ff 	.word	0xfffff7ff
 8008238:	ffffefff 	.word	0xffffefff
 800823c:	ffffdfff 	.word	0xffffdfff
 8008240:	ffffbfff 	.word	0xffffbfff
 8008244:	fff0ffff 	.word	0xfff0ffff
 8008248:	40012c00 	.word	0x40012c00
 800824c:	efffffff 	.word	0xefffffff
 8008250:	ff0fffff 	.word	0xff0fffff
 8008254:	feffffff 	.word	0xfeffffff
 8008258:	fdffffff 	.word	0xfdffffff
 800825c:	dfffffff 	.word	0xdfffffff

08008260 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008268:	46c0      	nop			; (mov r8, r8)
 800826a:	46bd      	mov	sp, r7
 800826c:	b002      	add	sp, #8
 800826e:	bd80      	pop	{r7, pc}

08008270 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008278:	46c0      	nop			; (mov r8, r8)
 800827a:	46bd      	mov	sp, r7
 800827c:	b002      	add	sp, #8
 800827e:	bd80      	pop	{r7, pc}

08008280 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008288:	46c0      	nop			; (mov r8, r8)
 800828a:	46bd      	mov	sp, r7
 800828c:	b002      	add	sp, #8
 800828e:	bd80      	pop	{r7, pc}

08008290 <memset>:
 8008290:	0003      	movs	r3, r0
 8008292:	1882      	adds	r2, r0, r2
 8008294:	4293      	cmp	r3, r2
 8008296:	d100      	bne.n	800829a <memset+0xa>
 8008298:	4770      	bx	lr
 800829a:	7019      	strb	r1, [r3, #0]
 800829c:	3301      	adds	r3, #1
 800829e:	e7f9      	b.n	8008294 <memset+0x4>

080082a0 <__libc_init_array>:
 80082a0:	b570      	push	{r4, r5, r6, lr}
 80082a2:	2600      	movs	r6, #0
 80082a4:	4c0c      	ldr	r4, [pc, #48]	; (80082d8 <__libc_init_array+0x38>)
 80082a6:	4d0d      	ldr	r5, [pc, #52]	; (80082dc <__libc_init_array+0x3c>)
 80082a8:	1b64      	subs	r4, r4, r5
 80082aa:	10a4      	asrs	r4, r4, #2
 80082ac:	42a6      	cmp	r6, r4
 80082ae:	d109      	bne.n	80082c4 <__libc_init_array+0x24>
 80082b0:	2600      	movs	r6, #0
 80082b2:	f000 f819 	bl	80082e8 <_init>
 80082b6:	4c0a      	ldr	r4, [pc, #40]	; (80082e0 <__libc_init_array+0x40>)
 80082b8:	4d0a      	ldr	r5, [pc, #40]	; (80082e4 <__libc_init_array+0x44>)
 80082ba:	1b64      	subs	r4, r4, r5
 80082bc:	10a4      	asrs	r4, r4, #2
 80082be:	42a6      	cmp	r6, r4
 80082c0:	d105      	bne.n	80082ce <__libc_init_array+0x2e>
 80082c2:	bd70      	pop	{r4, r5, r6, pc}
 80082c4:	00b3      	lsls	r3, r6, #2
 80082c6:	58eb      	ldr	r3, [r5, r3]
 80082c8:	4798      	blx	r3
 80082ca:	3601      	adds	r6, #1
 80082cc:	e7ee      	b.n	80082ac <__libc_init_array+0xc>
 80082ce:	00b3      	lsls	r3, r6, #2
 80082d0:	58eb      	ldr	r3, [r5, r3]
 80082d2:	4798      	blx	r3
 80082d4:	3601      	adds	r6, #1
 80082d6:	e7f2      	b.n	80082be <__libc_init_array+0x1e>
 80082d8:	080083d4 	.word	0x080083d4
 80082dc:	080083d4 	.word	0x080083d4
 80082e0:	080083d8 	.word	0x080083d8
 80082e4:	080083d4 	.word	0x080083d4

080082e8 <_init>:
 80082e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ea:	46c0      	nop			; (mov r8, r8)
 80082ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ee:	bc08      	pop	{r3}
 80082f0:	469e      	mov	lr, r3
 80082f2:	4770      	bx	lr

080082f4 <_fini>:
 80082f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f6:	46c0      	nop			; (mov r8, r8)
 80082f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082fa:	bc08      	pop	{r3}
 80082fc:	469e      	mov	lr, r3
 80082fe:	4770      	bx	lr
